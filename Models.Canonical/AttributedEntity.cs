#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using Tlm.Sdk.Core.Models;

namespace Tlm.Fed.Models.Canonical
{
    public abstract class AttributedEntity
    {
        /// <summary>
        ///     List of attributes.
        /// </summary>
        public ICollection<AttributeValue> Attributes { get; set; } = new List<AttributeValue>();

        /// <summary>
        ///     Updates the attribute.
        /// </summary>
        public void SetAttribute(AttributeValue value)
        {
            var existingAttribute = GetAttribute(value.Code);
            if (existingAttribute != null)
                Attributes.Remove(existingAttribute);
            Attributes.Add(value);
        }

        /// <summary>
        ///     Fetches the attribute on basis of code.
        /// </summary>
        /// <returns></returns>
        public AttributeValue GetAttribute(string name)
        {
            var attributes = Attributes.FirstOrDefault(x => x.Code == name);
            return attributes;
        }

        /// <summary>
        ///     Removes attribute on basis of code.
        /// </summary>
        /// <returns></returns>
        public void RemoveAttribute(string code)
        {
            var attributes = GetAttribute(code);
            if (attributes != null)
                Attributes.Remove(attributes);
        }

        /// <summary>
        ///     Removes all the attributes.
        /// </summary>
        public void RemoveAllAttributes()
        {
            Attributes.Clear();
        }
    }
}