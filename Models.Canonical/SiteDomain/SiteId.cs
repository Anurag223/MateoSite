#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.ComponentModel;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models;

namespace Tlm.Fed.Models.Canonical.SiteDomain
{
    [TypeConverter(typeof(IdConverter<SiteId>))]
    public class SiteId : Id<SiteId>, IEquatable<SiteId>
    {
        public bool Equals(SiteId other)
        {
            return Value == other.Value;
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            if (obj.GetType() != GetType())
                return false;
            return Equals((SiteId)obj);
        }

        public override int GetHashCode()
        {
            return Value?.GetHashCode() ?? 0;
        }

        public static bool operator ==(SiteId left, SiteId right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SiteId left, SiteId right)
        {
            return !Equals(left, right);
        }

        public SiteId()
        {}

        public SiteId(string value)
        {
            if (!KeyGenerator.ValidateKey(value.Eval(nameof(value))))
                throw new ArgumentException($"The ID \"{value}\" is not a valid site ID", nameof(value));
            Value = value;
        }

        public static implicit operator SiteId(string value) => string.IsNullOrWhiteSpace(value) ? null : new SiteId(value);

        public static implicit operator SiteCode(SiteId id) => id == null ? null : new SiteCode(KeyGenerator.ExtractKeyPart(nameof(Site.Code), id));

        private static readonly IKeyGenerator<Site> KeyGenerator = new CompositeKeyGenerator<Site>();
    }
}