#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using MoreLinq;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Metadata;
using Tlm.Sdk.Core.Models.Querying;

namespace Tlm.Fed.Models.Canonical.WorkorderDomain
{
    /// <summary>
    ///     Work order information.
    /// </summary>
    [Key("{0:D}:{1}", @"^\d+:.+$", nameof(ActiveCmmsId), nameof(SourceSystemRecordId))]
    [IsRoot()]
    public class Workorder : AttributedCmmsTrackedEntity
    {
        public const string Version = "1.0";
        public const string AttributeValueEquipmentId = "equipmentId";
        public const string AttributeValueTestLevel = "testLevel";
        public const string AttributeValueDeepLink = "deepLink";
        public const string AttributeValueWoSeconaryStatus = "WOSecondaryStatus";
        public const string AttributeValueWotmoEdd = "WOTMOEDD";
        public const string AttributeValueWotmoStatus = "WOTMOStatus";
        public const string AttributeValueWOTemplateId = "WOTemplateId";
        public const string AttributeValueWOTemplateVersion = "WOTemplateVersion";
        public const string AttributeValueWorkPackId = "WorkPackId";

        /// <summary>
        ///     Date the work order is actually fully completed. This date should coincide with the Status of the Workorder being
        ///     set to Closed/Completed
        /// </summary>
        public DateTime? ActualEndDate { get; set; }

        /// <summary>
        ///     Date and time the actual work begin.
        /// </summary>
        public DateTime? ActualStartDate { get; set; }

        /// <summary>
        ///     LDAP ID of a person who approved this work order.
        /// </summary>
        public string ApprovedBy { get; set; }

        /// <summary>
        ///     The comments.
        /// </summary>
        public ICollection<Comment> Comments { get; set; }

        /// <summary>
        ///     The control site key.
        /// </summary>
        [CanBeFilteredOn]
        public SiteId ControlSiteId { get; set; }

        /// <summary>
        ///     Describes the work order
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     The IDs of the related.
        /// </summary>
        public ICollection<string> EquipmentIds { get; set; } = new List<string>();

        public ICollection<WOEquipment> Equipments { get; set; } = new List<WOEquipment>();

        /// <summary>
        ///     Personnel the work order is assigned to.
        /// </summary>
        public ICollection<Personnel> Assignments { get; set; } = new List<Personnel>();

        /// <summary>
        ///     Sub-type of the maintenance activity.
        /// </summary>
        public string MaintenanceActivitySubType { get; set; }

        /// <summary>
        ///     The work order type identifies the work order source and how it should be processed
        /// </summary>
        public string MaintenanceActivityType { get; set; }

        /// <summary>
        ///     The owning site.
        /// </summary>
        [CanBeFilteredOn]
        public SiteId OwningSiteId { get; set; }

        /// <summary>
        ///     Parent of the work order shown in the Work Order field. When this field is blank, the work order in the Work Order
        ///     field is a top-level work order
        /// </summary>
        [CanBeFilteredOn]
        public string ParentWorkorderId { get; set; }

        /// <summary>
        ///     Name of the person who completed the WorkOrder
        /// </summary>
        public string PerformedBy { get; set; }

        /// <summary>
        ///     Date the work order is targeted to be completed.
        /// </summary>
        public DateTime? PlannedEndDate { get; set; }

        /// <summary>
        ///     Date the work order is targeted to be completed.
        /// </summary>
        public DateTime? PlannedStartDate { get; set; }

        /// <summary>
        ///     The priority.
        /// </summary>
        public string Priority { get; set; }

        /// <summary>
        ///     Specifies the repair facility location. A repair facility can take ownership of
        ///     work orders from multiple sites in the same organization.
        /// </summary>
        [CanBeFilteredOn]
        public SiteId RepairSiteId { get; set; }

        /// <summary>
        ///     Resources.
        /// </summary>
        public ICollection<Resource> Resources { get; set; } = new List<Resource>();

        /// <summary>
        ///     The last time when the status of the work order has been changed.
        /// </summary>
        public DateTime? StatusChangeDate { get; set; }

        /// <summary>
        ///     The number of the work order.
        /// </summary>
        [CanBeFilteredOn]
        public string WorkorderNumber { get; set; }

        /// <summary>
        ///     Work order status tracks a work order through the job process
        /// </summary>
        public List<StatusValue> WorkorderStatus { get; set; } = new List<StatusValue>();

        /// <summary>
        ///     Total task associated with a workorder.
        /// </summary>
        public int TotalTaskCount { get; set; }

        /// <summary>
        ///     Completed task count associated with workorder.
        /// </summary>
        public int CompletedTaskCount { get; set; }

        /// <summary>
        ///     Method returns whether work order is in open state or not.
        /// </summary>
        /// <returns></returns>
        public bool IsOpen()
        {
            if (WorkorderStatus == null || !WorkorderStatus.Any()) return false;
            return WorkorderStatus.Select(x => x.Value).Intersect(FMPOpenStatuses).Any();
        }

        public override int GetHashCode()
        {
            var code = 0;
            Equipments
                .OrderBy(x => x.EquipmentCode, OrderByDirection.Ascending)
                .ThenBy(x => x.SerialNumber, OrderByDirection.Ascending)
                .ForEach(x => code = HashCode.Combine(code, x.EquipmentCode, x.SerialNumber));
            return Math.Abs(code);
        }

        public static readonly string[] FMPOpenStatuses =
        {
            "APPR",
            "INPRG",
            "WAPPR",
            "WMATL",
            "WSCH",
            "IPLAN",
            "CKE",
            "WIP",
            "WOP",
            "WOR",
            "OPEN",
            "IN PROGRESS",
            "ASSIGNED",
            "RELEASED"
        };
    }
}