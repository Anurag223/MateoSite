#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Tlm.Fed.Models.CrossDomain.Models.MasterData;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Metadata;

namespace Tlm.Fed.Models.Canonical.MasterData
{
    /// <summary>
    ///     EPIC is an acronym for Engineering, Procurement, Installation and Commissioning, which are areas of concern when
    ///     working
    ///     in the TLM domain. In the context of the APIs exposed by Mateo, EPIC can be thought of as a classification
    ///     hierarchy and
    ///     a shorthand for identifying a node in the EPIC hierarchy. The hierarchy has seven levels. It is at level 7 that
    ///     equipment
    ///     can be tied back to the hierarchy via the equipment's code.
    ///     The seven levels from widest to least scope are
    ///     <list type="number">
    ///         <item>
    ///             <description>Group</description>
    ///         </item>
    ///         <item>
    ///             <description>Product Line</description>
    ///         </item>
    ///         <item>
    ///             <description>Sub Product Line</description>
    ///         </item>
    ///         <item>
    ///             <description>Product Family</description>
    ///         </item>
    ///         <item>
    ///             <description>EMS Product Line</description>
    ///         </item>
    ///         <item>
    ///             <description>Brand</description>
    ///         </item>
    ///         <item>
    ///             <description>Equipment System</description>
    ///         </item>
    ///     </list>
    /// </summary>
    [Key("{0:D}:{1}", @"^\d+:.+$", nameof(EpicType), nameof(Code))]
    [IsRoot()]
    public class EPIC : Entity
    {
        public const string Version = "1.0";

        /// <summary>
        ///     A code used to uniquely identify the EPIC.
        /// </summary>
        public string Code { get; set; }

        private EquipmentClassificationType _epicType;

        /// <summary>
        ///     The classification level associated with the EPIC.
        /// </summary>
        [JsonIgnore]
        [JsonConverter(typeof(StringEnumConverter))]
        [BsonRepresentation(BsonType.String)]
        public EquipmentClassificationType EpicType
        {
            get { return _epicType; }
            set
            {
                _epicType = value;
                Type = _epicType;
            }
        }

        [JsonConverter(typeof(StringEnumConverter))]
        [BsonRepresentation(BsonType.String)]
        public EquipmentClassificationType Type { get; set; }

        /// <summary>
        ///     The name of the EPIC.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     A key that can be used to directly retrieve the parent EPIC. This will be null if the subject EPIC is at the Group
        ///     level.
        /// </summary>
        public string ParentKey { get; set; }

        public IReadOnlyCollection<EPIC> Children { get; set; } = new List<EPIC>();
    }
}