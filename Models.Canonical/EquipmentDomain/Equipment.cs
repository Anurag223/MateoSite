#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using MongoDB.Bson.Serialization.Attributes;
using Tlm.Fed.Models.Canonical.MasterData;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Fed.Models.Core;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Metadata;
using Tlm.Sdk.Core.Models.Querying;

namespace Tlm.Fed.Models.Canonical.EquipmentDomain
{
    /// <summary>
    ///     Equipment is the Physical Entity that represents the real-world object that
    ///     provides a some value/service to a business. Other terms that are used for
    ///     Equipment include:
    ///     <ul>
    ///         <li>Tool</li>
    ///         <li>Asset</li>
    ///         <li>Product</li>
    ///     </ul>
    ///     Equipment is typically maintained and monitored via Measure Points. An
    ///     Equipment will be associated to a Financial Asset. All equipment are traceable
    ///     and trackable via a Serial Number - Equipment Code combination.
    /// </summary>
    [IsRoot]
    public class Equipment : AttributedCmmsTrackedEntity
    {
        /// <summary>
        ///     Alternate identities of the equipment.
        /// </summary>
        public ICollection<AlternateIdentity> AlternateIdentities { get; set; } = new List<AlternateIdentity>();

        public string AssetNumber { get; set; }

        /// <summary>
        ///     The key for the control site associated with the equipment.
        /// </summary>
        [CanBeFilteredOn]
        public SiteId ControlSiteId { get; set; }

        public string CountryOfOrigin { get; set; }

        /// <summary>
        ///     Description of the equipment. This is typically inherited from the reference
        ///     equipment template, but can be changed as modifications are implemented.
        /// </summary>
        public string Description { get; set; }

        /// <summary>
        ///     EPIC Equipment Code is  similar to a model number.  It Identifies the type of
        ///     equipment and replaces the legacy term "File Code".
        ///     The Equipment Code is the link to the Equipment Template (aka Reference
        ///     Equipment) that contains the Maintenance Program and default definition of the
        ///     Equipment.
        ///     It differs from a Material Number in that a material number defines what an
        ///     equipment, the Equipment Code identifies How it is used.
        ///     AKA
        ///     - File Code
        ///     - Model
        ///     - EPIC code
        /// </summary>
        [CanBeFilteredOn]
        public string EquipmentCode { get; set; }

        /// <summary>
        ///     Revision of the equipment code used to track modification to the reference
        ///     equipment template when major design changes are implemented.
        /// </summary>
        /// <remarks>
        ///     Normally an FCO is communicated with an engineering modification needing to be
        ///     applied to promote an equipment code to a new version.
        /// </remarks>
        public string EquipmentCodeRevision { get; set; }

        /// <summary>
        ///     The current location of the equipment.
        /// </summary>
        public string EquipmentState { get; set; }

        /// <summary>
        ///     Flag to identify the equipment is PCV, ServiceAssembly, Equipment, Sub-Assembly
        /// </summary>
        [CanBeFilteredOn]
        public EquipmentType EquipmentType { get; set; }

        public ICollection<FutureMaintenanceCall> FutureMaintenanceCalls { get; set; } = new List<FutureMaintenanceCall>();

        /// <summary>
        ///     Latest Comments
        /// </summary>
        public Comments LatestComment { get; set; }

        /// <summary>
        /// </summary>
        public DateTime? ManufacturedDate { get; set; }

        /// <summary>
        ///     Manufacturer
        /// </summary>
        public string Manufacturer { get; set; }

        /// <summary>
        ///     ManufacturerSerialNumber
        /// </summary>
        public string ManufacturerSerialNumber { get; set; }

        /// <summary>
        /// </summary>
        [CanBeFilteredOn]
        public string MaterialNumber { get; set; }

        /// <summary>
        ///     A list of measure points readings.
        /// </summary>
        public ICollection<MeasurePointReading> MeasurePointReadings { get; set; } = new List<MeasurePointReading>();

        /// <summary>
        ///     A list of measure points
        /// </summary>
        public ICollection<string> MeasurePoints { get; set; }

        /// <summary>
        ///     A list of measure points
        /// </summary>
        [BsonIgnore]
        public ICollection<MeasurePoint> MeasurePoints2 { get; set; }

        /// <summary>
        ///     A list of movements of this equipment.
        /// </summary>
        public ICollection<string> Movements { get; set; } = new List<string>();

        public string OrderLineId { get; set; }

        public DateTime? OriginationDate { get; set; }

        /// <summary>
        ///     The key to the owner site.
        /// </summary>
        [CanBeFilteredOn]
        public string OwningSiteDescription { get; set; }

        /// <summary>
        ///     The key to the owner site.
        /// </summary>
        [CanBeFilteredOn]
        public SiteId OwningSiteId { get; set; }

        /// <summary>
        ///     The Id of the parent equipment.
        /// </summary>
        [CanBeFilteredOn]
        public string ParentEquipmentId { get; set; }

        /// <summary>
        ///     The remaining useful life (RUL). This represents a percent value from 0 to 1.
        /// </summary>
        public double RemainingUsefulLife { get; set; }

        /// <summary>
        ///     Indicates whether the equipment is SLB's or rented.
        /// </summary>
        public RentalTypes RentalIndicator { get; set; }

        public string Revision { get; set; }

        /// <summary>
        ///     The key identifier for the equipment used for tracking purposes.  The serial number
        ///     is only unique within the context of the material number. Together the
        ///     material number and the serial number provide a unique natural key for the
        ///     equipment.
        /// </summary>
        [CanBeFilteredOn]
        public string SerialNumber { get; set; }

        /// <summary>
        ///     Status Collection.
        /// </summary>
        public ICollection<Status> StatusCollection { get; set; } = new List<Status>();

        /// <summary>
        /// </summary>
        public string Vendor { get; set; }

        /// <summary>
        ///     Well-known Entity ID, in form of MaterialNumber:SerialNumber given at birth.
        /// </summary>
        public string WellKnownEntityId { get; set; }

        /// <summary>
        ///     Manufacturer's as advertised/promoted code.
        /// </summary>
        public string ManufacturersCode { get; set; }

        public const string AttributeNameToolsetHeaderId = "ToolsetHeaderId";
        public const string Version = "1.0";
    }
}