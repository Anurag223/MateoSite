#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Metadata;

namespace Tlm.Fed.Models.Canonical.EquipmentDemandDomain
{
    [Key("{0:D}:{1}", @"^\d+:.+$", nameof(ActiveCmmsId), nameof(SourceSystemRecordId))]
    [IsRoot()]
    public class EquipmentDemandPlan : AttributedCmmsTrackedEntity
    {
        public const string ModelVersion = "1.0";

        public string Comments { get; set; }

        public ICollection<EquipmentDemandOrder> EquipmentDemandOrders { get; set; } = new List<EquipmentDemandOrder>();

        public string EquipmentDemandPlanNumber { get; set; }

        public string JobId { get; set; }

        public string JobRunStageId { get; set; }

        public string SubmittedBy { get; set; }

        public DateTime? SubmittedDate { get; set; }

        public DateTime? PlannedEndDate { get; set; }

        public string Priority { get; set; }

        public SiteId SiteId { get; set; }

        public string Status { get; set; }

        public DateTime? TargetFulfillmentDate { get; set; }

        // ReSharper disable once InconsistentNaming

        public DateTime? TLMShipDate { get; set; }

        public string Version { get; set; }

        public string ActivityId { get; set; }

        public const string AttributeNameMaintenanceComments = "Maintenance Comments";
        public const string AttributeNameShippingInstructions = "Shipping Instructions";
        public const string AttributeNameParentEdp = "Parent EDP";
        public const string AttributeNameSystemParentRecordId = "System Parent Record Id";
        public const string AttributeNameToolSize = "ToolSize";
        public const string AttributeNameHoleSize = "Hole_Size";

        protected bool Equals(EquipmentDemandPlan other)
        {
            return string.Equals(Comments, other.Comments)
                && string.Equals(EquipmentDemandPlanNumber, other.EquipmentDemandPlanNumber)
                && string.Equals(JobId, other.JobId)
                && string.Equals(JobRunStageId, other.JobRunStageId)
                && PlannedEndDate.Equals(other.PlannedEndDate)
                && string.Equals(Priority, other.Priority)
                && string.Equals(Status, other.Status)
                && TargetFulfillmentDate.Equals(other.TargetFulfillmentDate)
                && TLMShipDate.Equals(other.TLMShipDate)
                && string.Equals(Version, other.Version);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj))
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            if (obj.GetType() != GetType())
                return false;
            return Equals((EquipmentDemandPlan)obj);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hashCode = Comments != null ? Comments.GetHashCode() : 0;
                hashCode = (hashCode * 397) ^ (EquipmentDemandPlanNumber != null ? EquipmentDemandPlanNumber.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (JobId != null ? JobId.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (JobRunStageId != null ? JobRunStageId.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ PlannedEndDate.GetHashCode();
                hashCode = (hashCode * 397) ^ (Priority != null ? Priority.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ (Status != null ? Status.GetHashCode() : 0);
                hashCode = (hashCode * 397) ^ TargetFulfillmentDate.GetHashCode();
                hashCode = (hashCode * 397) ^ TLMShipDate.GetHashCode();
                hashCode = (hashCode * 397) ^ (Version != null ? Version.GetHashCode() : 0);
                return hashCode;
            }
        }
    }
}