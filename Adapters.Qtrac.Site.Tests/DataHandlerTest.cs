#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Linq.Expressions;
using System.Threading.Tasks;
using FluentAssertions;
using LinqKit;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Serilog;
using Tlm.Fed.Adapters.Qtrac.Common;
using Tlm.Fed.Adapters.Qtrac.Site.DataAccess;
using Tlm.Fed.Contexts.Common.Services;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Testing.Unit;

namespace Tlm.Fed.Adapters.Qtrac.Site.Tests
{
    [TestClass]
    
    public class DataHandlerTest : UnitTestBase
    {
        private readonly Mock<IMasterDataSiteTypeMappingService> _masterDataSiteTypeMappingService;

        public DataHandlerTest()
        {
            var mockRepository = new MockRepository(MockBehavior.Strict);
            _masterDataSiteTypeMappingService = mockRepository.Create<IMasterDataSiteTypeMappingService>();
        }

        [TestMethod]
        public async Task Should_Return_All_Sites()
        {
            var dbContext = GetDbContext();
            var adapterConfig = GetSiteAdapterConfig();
            QtracDbContext.Factory factory = () => dbContext;
            var uat = GetDataHandler(factory, adapterConfig);
            Expression<Func<WorkCenterSite, bool>> filter = PredicateBuilder.New<WorkCenterSite>(true);
            Expression<Func<WorkCenterSite, bool>> subSiteFilter = PredicateBuilder.New<WorkCenterSite>(true);
            var siteCode = "ABC,DEF";
            var result = await uat.GetSite(filter, subSiteFilter, siteCode);
            result.Should().NotBeNull();
        }

        private IDataHandler GetDataHandler(QtracDbContext.Factory factory, SiteAdapterConfig siteAdapterConfig)
        {
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingDescription(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("LABOR");
            return new DataHandler(factory, siteAdapterConfig, _masterDataSiteTypeMappingService.Object);
        }

        private QtracDbContext GetDbContext()
        {
            Log.Logger = new LoggerConfiguration()
                .WriteTo.Console()
                .CreateLogger();

            var factory = new LoggerFactory();
            _ = factory.AddSerilog();

            var builder = new DbContextOptionsBuilder<QtracDbContext>()
                .UseInMemoryDatabase(Guid.NewGuid().ToString());

            var options = builder.Options;

            return new QtracDbContext(options);
        }

        private SiteAdapterConfig GetSiteAdapterConfig()
        {
            return new SiteAdapterConfig
            {
                ConnectionTimeout = 5,
            };
        }

    }
}