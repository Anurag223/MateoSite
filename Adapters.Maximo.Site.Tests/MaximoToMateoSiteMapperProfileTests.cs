#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using AutoMapper;
using FizzWare.NBuilder;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System.Collections.Generic;
using System.Linq;
using Tlm.Fed.Adapters.Maximo.Site.Models;
using Tlm.Fed.Contexts.Common;
using Tlm.Fed.Contexts.Common.Services;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Testing.Unit;
using CanonicalSite = Tlm.Fed.Models.Canonical.SiteDomain.Site;

namespace Tlm.Fed.Adapters.Maximo.Site.Tests
{

    [TestClass]

    [UnitTestCategory]

    public class MaximoToMateoSiteMapperProfileTests : UnitTestBase
    {
        private const string STORE_LOCATION_IDENTIFIER = "DefaultLocation,OFSStore,ITTStore,UsedPartStore,OptimusStore";

        private readonly MapperConfiguration _configuration;
        private readonly IMapper _mapper;
        private readonly Mock<IMasterDataSiteTypeMappingService> _masterDataSiteTypeMappingService;
        private readonly Mock<FeatureFlag> _featureFlags;
        private static readonly IKeyGenerator<CanonicalSite> SiteKeyGenerator = new CompositeKeyGenerator<CanonicalSite>();

        #region FilePaths

        private const string MaximoServiceResponseFilePath = "Data\\MaximoSiteServiceResponse.json";

        #endregion

        public MaximoToMateoSiteMapperProfileTests()
        {
            var mockRepository = new MockRepository(MockBehavior.Strict);
            _masterDataSiteTypeMappingService = mockRepository.Create<IMasterDataSiteTypeMappingService>();
            _featureFlags = mockRepository.Create<FeatureFlag>();
            _configuration = new MapperConfiguration(config => { config.AddProfile(new MaximoToMateoSiteMapperProfile(_masterDataSiteTypeMappingService.Object, _featureFlags.Object)); });
            _mapper = _configuration.CreateMapper();
        }

        /// <summary>
        ///     Validates whether mapper configurations are valid or not.
        /// </summary>
        [TestMethod]
        public void AssertConfigurationIsValid_NoExceptionThrown()
        {
            // Assert
            _configuration.AssertConfigurationIsValid();
        }

        /// <summary>
        ///     Given: Maximo site
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite Object <see cref="WorkCenterSite" />
        /// </summary>
        [TestMethod]
        [DeploymentItem(MaximoServiceResponseFilePath)]
        public void GivenMaximoSiteObject_ReturnsMateoWorkCenterSiteObject()
        {
            // Arrange
            var data = ReadJson<SAP_R_LOCATIONS_LOCATIONSType>(MaximoServiceResponseFilePath);
            var maximoSite = data.maximoLocation[0];
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");

            // Act
            var mateoSite = _mapper.Map<WorkCenterSite>(maximoSite);

            //Assert
            Assert.IsNotNull(data.href);
            Assert.IsNotNull(data.responseInfo.href);
            Assert.IsNotNull(data.responseInfo.nextPage.href);
            Assert.IsNotNull(data.responseInfo.pagenum);
            Assert.IsNotNull(data.responseInfo.totalCount);
            Assert.IsNotNull(data.responseInfo.totalPages);
            Assert.AreEqual(maximoSite.Description, mateoSite.Description.Sanitize());
            Assert.AreEqual(maximoSite.CountryCode, mateoSite.CountryCode.Sanitize());
            Assert.AreEqual(maximoSite.City, mateoSite.City.Sanitize());
            Assert.AreEqual(maximoSite.Description.Sanitize(), mateoSite.Name.Sanitize());
            Assert.AreEqual(SiteKeyGenerator.ComposeKeyFromParts(((int)CmmsId.Maximo).ToString(), maximoSite.SlbDistrict.Sanitize()), mateoSite.FacilityId);
            Assert.AreEqual(maximoSite.OldProductLine.Sanitize(), mateoSite.SegmentCode);
            Assert.AreEqual(maximoSite.Location.Sanitize(), mateoSite.Code.ToString());
            Assert.AreEqual(CmmsId.Maximo, mateoSite.ActiveCmmsId);
            Assert.AreEqual(maximoSite.Location.Sanitize(), mateoSite.SourceSystemRecordId);
            Assert.AreEqual(maximoSite.SlbSubBusinessLine.Sanitize(), mateoSite.SubBusinessLines.FirstOrDefault());
            Assert.AreEqual(maximoSite.SLBGeoUnit.Sanitize(), mateoSite.GeoMarketCode);
            Assert.IsNotNull(maximoSite.SlbDistrict);
            Assert.IsNotNull(maximoSite.SlbSapPlant);
            Assert.IsNotNull(maximoSite.SlbAltLaborLoc);
            Assert.IsNotNull(maximoSite.SlbOfsStoreId);
            Assert.IsNotNull(maximoSite.SlbDivision);
            Assert.IsNotNull(maximoSite.SlbBasin);
            Assert.IsNotNull(maximoSite.RowStamp);
            Assert.IsNotNull(maximoSite.SiteId);
            Assert.IsNotNull(maximoSite.SlbStoreManageBy);
            Assert.IsNotNull(maximoSite.SlbSapSloc);
            Assert.IsNotNull(maximoSite.TypeDescription);
            Assert.IsNotNull(maximoSite.CountryCode);
            Assert.AreEqual(mateoSite.Attributes.Count, 1);
            Assert.AreEqual(mateoSite.UnmanagedAttributes.Count, 0);
            Assert.AreEqual(mateoSite.AlternateIdentities.Count, 0);
            Assert.AreEqual(mateoSite.FacilityName.Sanitize(), mateoSite.FacilityName);
            Assert.IsNotNull(mateoSite.SubSites);
            var attributeData = mateoSite.Attributes.FirstOrDefault(x => x.Code == "DEFAULTLOCATION");
            Assert.AreEqual(attributeData.Value, maximoSite.SLBDefault.ToLower());
            Assert.IsNotNull(mateoSite.SiteType);
            Assert.AreEqual(mateoSite.SiteType, "Operations");
        }

        /// <summary>
        ///     Given: Maximo sites list
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite list <see cref="WorkCenterSite" />
        /// </summary>
        [TestMethod]
        [DeploymentItem(MaximoServiceResponseFilePath)]
        public void GivenMaximoSiteList_ReturnsMateoWorkCenterSiteList()
        {
            // Arrange
            var maximoSites = ReadJson<SAP_R_LOCATIONS_LOCATIONSType>(MaximoServiceResponseFilePath);
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");

            // Act
            var mateoSites = _mapper.Map<WorkCenterSite[]>(maximoSites.maximoLocation).ToList();

            //Assert
            Assert.AreEqual(maximoSites.maximoLocation.Count(), mateoSites.Count);
        }

        /// <summary>
        ///     Given: Maximo site object with empty string values
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite with null value when mapped to string.Empty <see cref="WorkCenterSite">
        /// </summary>
        [TestMethod]
        public void GivenMaximoSiteObjectWithEmptyStringValues_ReturnsNullValue()
        {
            // Arrange
            var maximoSite = new SAP_R_LOCATIONS_LOCATIONSType
            {
                maximoLocation = new List<MaximoLocation> { new MaximoLocation { Description = null, SlbFacilityDb = null, Type = null, Location = null } }
            };
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Unknown");

            // Act	
            var mateoSite = _mapper.Map<WorkCenterSite>(maximoSite.maximoLocation[0]);

            // Assert
            Assert.IsNull(mateoSite.Description);
            Assert.IsNull(mateoSite.Name);
            Assert.IsNull(mateoSite.FacilityId);
            Assert.AreEqual(mateoSite.SiteType, "Unknown");
            Assert.IsNull(mateoSite.SegmentCode);
            Assert.IsNull(mateoSite.Code);
            Assert.IsNull(mateoSite.SourceSystemRecordId);
        }

        [TestMethod]
        public void Should_Return_MateoWorkCenterSiteList_With_Managed_Attributes()
        {
            // Arrange
            var maximoLocation = Builder<MaximoLocation>.CreateNew().Build();
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");

            // Act
            var mateoSite = _mapper.Map<WorkCenterSite>(maximoLocation);

            //Assert
            mateoSite.Should().NotBeNull();
            mateoSite.Attributes.Should().NotBeEmpty();
            mateoSite.Attributes.ForEach(x => STORE_LOCATION_IDENTIFIER.Contains(x.Name));
        }
    }
}