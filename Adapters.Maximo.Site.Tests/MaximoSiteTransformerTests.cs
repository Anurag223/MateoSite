#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using AutoMapper;
using FluentAssertions;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Tlm.Fed.Adapters.Maximo.Site.Concrete;
using Tlm.Fed.Adapters.Maximo.Site.Models;
using Tlm.Fed.Contexts.Site.Core.Services;
using Tlm.Fed.Framework.Common.Models;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Testing.Unit; //using Maximo;

namespace Adapters.Maximo.Site.Tests
{
	[TestClass]
	[UnitTestCategory]
	
	public class MaximoSiteTransformerTests : UnitTestBase
	{
		public MaximoSiteTransformerTests()
		{
            var mockRepository = new MockRepository(MockBehavior.Strict);
            _mapper = mockRepository.Create<IMapper>();
            _transformer = mockRepository.Create<ITransformer<WorkCenterSite>>();
            _segmentMappingService = mockRepository.Create<ISegmentMappingService>();
        }

        private readonly Mock<IMapper> _mapper;
        private readonly Mock<ITransformer<WorkCenterSite>> _transformer;
        private readonly Mock<ISegmentMappingService> _segmentMappingService;
        private const string MaximoServiceResponseFilePath = "Data\\MaximoSiteServiceResponse.json";
        private const string MaximoServiceCanonicalFilePath = "Data\\MaximoSiteServiceCanonical.json";

        /// <summary>
        ///     Given: Given empty list of equipments.
        ///     When: Called Transform method
        ///     Then: Returns default <see cref="CacheLoadInfo" />
        /// </summary>
        [TestMethod]
        public async Task EmptyList_ReturnsDefaultCacheInfoObject()
        {
            // Arrange
            var transformer = new MaximoSiteTransformer(_mapper.Object, _transformer.Object, _segmentMappingService.Object);

            // Act
            var result = await transformer.Transform(new List<MaximoLocation>());

            // Assert
            new CacheLoadInfo().ToString().Should().Be(result.ToString());
        }

        /// <summary>
        ///     Given: Given null list of equipments.
        ///     When: Called Transform method
        ///     Then: Throws <see cref="ArgumentNullException" />>
        /// </summary>
        [ExpectedException(typeof(ArgumentNullException))]
        [TestMethod]
        public async Task GivenNullAsListOfEquipment_ThrowsArgumentNullException()
        {
            // Arrange
            var transformer = new MaximoSiteTransformer(_mapper.Object, _transformer.Object, _segmentMappingService.Object);

            // Act
            await transformer.Transform(null);
        }

        /// <summary>
        ///     Given: Given list of equipments.
        ///     When: Called Transform method
        ///     Then: Returns mocked cached load info.
        /// </summary>
        [TestMethod]
        [DeploymentItem(MaximoServiceResponseFilePath)]
        [DeploymentItem(MaximoServiceCanonicalFilePath)]
        public async Task GivenListOfEquipments_ReturnsCacheInfoLoadObjectWithRelevantDetails()
        {
            // Arrange
            var data = ReadJson<SAP_R_LOCATIONS_LOCATIONSType>(MaximoServiceResponseFilePath);
            var testData = ReadJson<List<WorkCenterSite>>(MaximoServiceCanonicalFilePath);
            var transformer = new MaximoSiteTransformer(_mapper.Object, _transformer.Object, _segmentMappingService.Object);

            var expectedResult = new CacheLoadInfo();

            _mapper
                .Setup(x => x.Map<WorkCenterSite[]>(It.IsAny<MaximoLocation[]>()))
                .Returns(testData.ToArray());
            _transformer.Setup(x => x.ConstructCacheLoadInfo(It.IsAny<LoadFromSourceResult<WorkCenterSite>>()))
                .ReturnsAsync(expectedResult);
            _segmentMappingService.Setup(x => x.UpdateSegments(It.IsAny<List<WorkCenterSite>>()))
                .ReturnsAsync(testData);

            // Act
            var result = await transformer.Transform(data.maximoLocation);

            // Assert
            Assert.AreSame(expectedResult, result);
        }
    }
}