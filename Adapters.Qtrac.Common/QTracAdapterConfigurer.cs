#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.DependencyInjection;
using Tlm.Fed.Adapters.Qtrac.Common.Configuration;
using Tlm.Sdk.AspNetCore;

namespace Tlm.Fed.Adapters.Qtrac.Common
{
    public class QTracAdapterConfigurer : Configurer
    {
        public override string Name => "QTrac Adapter";

        public override void ConfigureServices(Startup startup, IServiceCollection services)
        {
            services.AddMemoryCache();
            services.AddDbContext<QtracDbContext>(options =>
            {
                var config = startup.GetConfig<QtracAdapterConfig>();

                //https://github.com/aspnet/EntityFrameworkCore/issues/10169
                var conn = new SqlConnectionStringBuilder(config.Qtrac.ConnectionString)
                {
                    ConnectRetryCount = 5,
                    ConnectRetryInterval = 2,
                    MaxPoolSize = 200,
                    MinPoolSize = 2,
                    UserID = config.Qtrac.Username,
                    Password = config.Qtrac.Password
                };

                options.UseSqlServer(conn.ToString(),
                    sqlOptions =>
                    {
                        sqlOptions.EnableRetryOnFailure(
                            config.Qtrac?.RetryOptions?.MaxTries ?? 5,
                            config.Qtrac?.RetryOptions?.MaxDelay ?? TimeSpan.FromSeconds(30),
                            null);
                        var timeout = config.Qtrac?.CommandTimeout ?? TimeSpan.FromMinutes(10);
                        sqlOptions.CommandTimeout((int)timeout.TotalSeconds);
                    });
#pragma warning disable 618
                options.ConfigureWarnings(warnings => warnings.Throw(RelationalEventId.QueryClientEvaluationWarning));
#pragma warning restore 618
                options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);
            });
        }
    }
}