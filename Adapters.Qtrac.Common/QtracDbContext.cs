#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Tlm.Fed.Adapters.Qtrac.Common.Models;
using Tlm.Fed.Adapters.Qtrac.Common.Views;

namespace Tlm.Fed.Adapters.Qtrac.Common
{
    /// <summary>
    ///     <inheritdoc cref="DbContext" />
    /// </summary>
    public class QtracDbContext : DbContext
    {
        /// <summary>
        ///     <inheritdoc cref="DbContext" />
        /// </summary>
        /// <param name="options">
        ///     <inheritdoc cref="DbContext" />
        /// </param>
        public QtracDbContext(DbContextOptions options) : base(options)
        { }

        public virtual DbSet<Country> Country { get; set; }

        public virtual DbSet<Company> Company { get; set; }

        public virtual DbSet<ContainerEqp> ContainerEqp { get; set; }

        public virtual DbSet<Equipment> Equipment { get; set; }

        public virtual DbSet<EqpRemarks> EquipmentRemarks { get; set; }

        public virtual DbSet<EquipmentType> EquipmentType { get; set; }

        public virtual DbSet<Facilities> Facilities { get; set; }

        public virtual DbSet<Job> Job { get; set; }

        public virtual DbSet<Loadout> Loadout { get; set; }

        public virtual DbSet<LoadoutModificationDetails> LoadoutModificationDetails { get; set; }

        public virtual DbSet<LoadoutTool> LoadoutTool { get; set; }

        public virtual DbSet<LoadoutToolOptions> LoadoutToolOptions { get; set; }

        public virtual DbSet<Location> Location { get; set; }

        public virtual DbSet<LrdeRunEquipment> LrdeRunEquipment { get; set; }

        public virtual DbSet<LrdeRunEquipmentAttribute> LrdeRunEquipmentAttribute { get; set; }

        public virtual DbSet<MapJobSite> MapJobSites { get; set; }

        public virtual DbSet<MovementComment> MovementComments { get; set; }

        public virtual DbSet<MovementDetail> MovementDetails { get; set; }

        public virtual DbSet<Movement> Movements { get; set; }

        public virtual DbSet<ReferenceMovementStatus> MovementStatuses { get; set; }

        public virtual DbSet<ReferenceMovementType> MovementTypes { get; set; }

        public virtual DbSet<Object> Object { get; set; }

        public virtual DbSet<PositionOptions> PositionOptions { get; set; }

        public virtual DbSet<Positions> Positions { get; set; }

        public virtual DbSet<PositionTypes> PositionTypes { get; set; }

        public virtual DbSet<RControl> RControl { get; set; }

        public virtual DbSet<RDimension> RDimension { get; set; }

        public virtual DbSet<RefEqpState> RefEqpState { get; set; }

        public virtual DbSet<RefEqpStatus> RefEqpStatus { get; set; }

        public virtual DbSet<RefInBaseAttribute> RefInBaseAttribute { get; set; }

        public virtual DbSet<RefManufacturer> RefManufacturer { get; set; }

        public virtual DbSet<RefRedirectionType> RefRedirectionType { get; set; }

        public virtual DbSet<RefSegment> RefSegment { get; set; }

        public virtual DbSet<RefBusinessLine> RefBusinessLine { get; set; }

        public virtual DbSet<RefUom> RefUom { get; set; }

        public virtual DbSet<Rig> Rig { get; set; }

        public virtual DbSet<RMasterAttribute> RMasterAttribute { get; set; }

        public virtual DbSet<Role> Role { get; set; }

        public virtual DbSet<RTcoConfiguration> RTcoConfiguration { get; set; }

        public virtual DbSet<RTcoOption> RTcoOption { get; set; }

        public virtual DbSet<RToolMaster> RToolMaster { get; set; }

        public virtual DbSet<RToolOptions> RToolOptions { get; set; }

        public virtual DbSet<RToolOrderStatus> RToolOrderStatus { get; set; }

        public virtual DbSet<Site> Site { get; set; }

        public virtual DbSet<RigAttribute> TblRigAttribute { get; set; }

        public virtual DbSet<TcoData> TcoData { get; set; }

        public virtual DbSet<TCOToolSet> TCOToolSet { get; set; }

        public virtual DbSet<ToolsetHistoryDtl> ToolsetHistoryDtl { get; set; }

        public virtual DbSet<ToolsetHistoryHdr> ToolsetHistoryHdr { get; set; }

        public virtual DbSet<User> User { get; set; }

        public virtual DbSet<HolesizeJobMapping> HolesizeJobMapping { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<HolesizeJobMapping>(entity =>
            {
                entity.HasKey(e => e.Id);

                entity.ToTable("tblHolesizeJobMapping");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.HoleSizeId).HasColumnName("Hole_size_id");

                entity.Property(e => e.IDistrictId).HasColumnName("IDISTRICT_ID");

                entity.Property(e => e.JobId).HasColumnName("JOBID");

            });
            modelBuilder.Entity<ToolsetHistoryHdr>(entity =>
            {
                entity.HasKey(e => e.ToolsetHistoryHdrId);

                entity.ToTable("tblToolsetHistoryHdr");

                entity.Property(e => e.IsActive).HasColumnName("IsActive");

                entity.Property(e => e.ToolsetHdrId).HasColumnName("ToolsetHdr_ID");

                entity.Property(e => e.ToolsetHistoryHdrId).HasColumnName("ToolsetHistoryHdr_ID");

                entity.HasIndex(e => new
                {
                    e.IsActive
                }).HasName("IX_tblToolsetHistoryHdr_IsActive");

                entity.HasIndex(e => new
                {
                    e.ToolsetHistoryHdrId,
                    e.IsActive
                }).HasName("INDX_TSHHDR_HDRIDISACTIVE");
            });

            modelBuilder.Entity<ToolsetHistoryDtl>(entity =>
            {
                entity.HasKey(e => e.ToolsetHistoryDtlId);

                entity.ToTable("tblToolsetHistoryDtl");

                entity.Property(e => e.EquipmentId).HasColumnName("Equipment_ID");

                entity.Property(e => e.ToolsetHistoryHdrId).HasColumnName("ToolsetHistoryHdr_ID");

                entity.Property(e => e.ToolsetHistoryDtlId).HasColumnName("ToolsetHistoryDtl_ID");

                entity.Property(e => e.IsToolsetParent).HasColumnName("IsToolsetParent");

                entity.Property(e => e.FileCode).HasColumnName("FileCode");

                entity.Property(e => e.LastModifiedDate).HasColumnName("LastModifiedDate");

                entity.Property(e => e.ParentToolsetHistoryDtlId).HasColumnName("ParentToolsetHistoryDtl_ID");

                entity.Property(e => e.SerialNo).HasColumnName("SerialNo");

                entity.Property(e => e.ToolsetLevel).HasColumnName("ToolsetLevel");

                entity.HasIndex(e => new
                {
                    e.EquipmentId
                }).HasName("XAK_tblToolsetHistoryDTL_Equipmetn_ID");

                entity.HasIndex(e => new
                {
                    e.ToolsetHistoryHdrId
                }).HasName("XAK_tblToolsetHistoryDTL_ToolsetHDRID");
            });

            modelBuilder.Entity<EqpRemarks>(entity =>
            {
                entity.HasKey(e => e.EqpRemarks_ID);

                entity.ToTable("tblEqpRemarks");

                entity.HasIndex(e => new { e.EqpRemarks_ID })
                    .HasName("XPKtblEqpRemarks");

                entity.HasIndex(e => new { e.Equipment_ID })
                    .HasName("XAK_tblEqpRemarks_Equipmnet_ID");

                entity.Property(e => e.Equipment_ID).HasColumnName("Equipment_ID").IsRequired();
                entity.Property(e => e.EqpRemarks_ID).HasColumnName("EqpRemarks_ID").IsRequired();
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate").IsRequired();

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate").IsRequired();

                entity.Property(e => e.EqpRemarks_SiteID).HasColumnName("EqpRemarks_SiteID").IsRequired();

                entity.Property(e => e.Remarks).HasColumnName("Remarks")
                    .IsRequired()
                    .IsUnicode(); //.HasMaxLength(8000)
            });

            modelBuilder.Entity<WorkOrderSwpspo>(entity =>
            {
                entity.ToTable("tblWorkOrderSWPSPO");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BuyerPartNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.IsUpdFromSwpssuccess).HasColumnName("IsUpdFromSWPSSuccess");

                entity.Property(e => e.LineUom)
                    .IsRequired()
                    .HasColumnName("LineUOM")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Lineitemstatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LnAccUnitCode).HasColumnName("LN_Acc_Unit_Code");

                entity.Property(e => e.LnActivityCode)
                    .IsRequired()
                    .HasColumnName("LN_Activity_Code")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ManufacturerName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Pocost).HasColumnName("POCost");

                entity.Property(e => e.Poname)
                    .IsRequired()
                    .HasColumnName("POName")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Ponumber)
                    .IsRequired()
                    .HasColumnName("PONumber")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Poquantity).HasColumnName("POQuantity");

                entity.Property(e => e.RepairType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequestedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RequesterName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierId)
                    .IsRequired()
                    .HasColumnName("SupplierID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.SupplierPartNum)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UltimateSupplierId)
                    .IsRequired()
                    .HasColumnName("UltimateSupplierID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedBy)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.WorkOrderId).HasColumnName("WorkOrder_ID");

                entity.Property(e => e.WoservicesId).HasColumnName("WOServices_ID");
            });

            modelBuilder.Entity<WorkOrderFieldRequest>(entity =>
            {
                entity.ToTable("tblWorkOrderFieldRequests");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.FrcaddyId)
                    .HasColumnName("FRCaddyId")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Frnumber)
                    .IsRequired()
                    .HasColumnName("FRNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Frstatus)
                    .IsRequired()
                    .HasColumnName("FRStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PolineNumber)
                    .HasColumnName("POLineNumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Postatus)
                    .HasColumnName("POStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionStatus)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<WorkOrderPartsTracking>(entity =>
            {
                entity.ToTable("tblWorkOrderPartsTracking");

                entity.HasIndex(e => e.ParentPartNo)
                    .HasName("Qtrac_tblWorkOrderPartsTracking_Parent_Part_No");

                entity.HasIndex(e => new { e.WorkOrderPartsId, e.FrId })
                    .HasName("NCI_tblWorkOrderPartsTracking_ID");

                entity.HasIndex(e => new { e.Used, e.Returned, e.WorkOrderPartsId })
                    .HasName("IX_tblWorkOrderPartsTracking_WorkOrderParts_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CaddyId)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ExternalKey)
                    .HasColumnName("External_key")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FrId).HasColumnName("FR_ID");

                entity.Property(e => e.Gtid).HasColumnName("GTId");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedSite)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastStoreStatusUpdateDate).HasColumnType("datetime");

                entity.Property(e => e.LotNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Notes)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.ParentPartNo)
                    .HasColumnName("Parent_Part_No")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WorkOrderPartsId).HasColumnName("WorkOrderParts_ID");
            });

            modelBuilder.Entity<Equipment>(entity =>
            {
                entity.HasKey(e => e.EquipmentId);

                entity.ToTable("tblEquipment");

                entity.HasIndex(e => e.EquipmentTypeId)
                    .HasName("XAK2tblEquipmentType_EquipmentTypeID");

                entity.HasIndex(e => new { e.MasterFileCode, e.MasterSerialNo })
                    .HasName("NCI_tblEQP_MasterFCSN");

                entity.HasIndex(e => new { e.Stampedfc, e.Stampedsn })
                    .HasName("INDEX_STAMPEDFCSN");

                entity.HasIndex(e => new { e.BlockWo, e.EquipmentId, e.LastServiceDate })
                    .HasName("IX_tblEquipment_Equipment_ID_LastServiceDate");

                entity.HasIndex(e => new { e.CurrLocationId, e.CurrLocationType, e.HoldingSiteId })
                    .HasName("IX_tblEquipment_Clt_Hldsite_ID");

                entity.HasIndex(e => new { e.RefEqpStateId, e.EquipmentId, e.SerialNo });

                entity.HasIndex(e => new { e.EquipmentId, e.FileCode, e.SerialNo, e.CreatedBy })
                    .HasName("IX_tblEquipment_CreatedBY_EQPFS");

                entity.HasIndex(e => new { e.HoldingSiteId, e.EquipmentId, e.FileCode, e.SerialNo })
                    .HasName("INDX_TBLEQUIPMENT_EID_FC_SN");

                entity.HasIndex(e => new { e.ToolHierarchyId, e.RefEqpStatusId, e.RefEqpStateId, e.FileCode, e.Dfp, e.SerialNo })
                    .HasName("XAK_tblEquipment_SN1");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentTypeId, e.RefEqpStatusId, e.FileCode, e.SerialNo, e.CurrLocationType, e.CurrLocationId, e.RefEqpStateId, e.HoldingSiteId })
                    .HasName("IX_tblEquipment_RefEqpState_ID_HoldingSite_ID");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentTypeId, e.RefEqpStatusId, e.RefEqpStateId, e.FileCode, e.SerialNo, e.CurrLocationId, e.HoldingSiteId, e.CurrLocationType })
                    .HasName("IX_tblEquipment_HoldingSite_ID_CurrLocationType");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentTypeId, e.FileCode, e.SerialNo, e.SapId, e.CurrLocationType, e.CurrLocationId, e.LastModifiedDate, e.HoldingSiteId, e.Oracleidfield })
                    .HasName("IX_tblEquipment_ORACLEIDFIELD");

                entity.HasIndex(e => new { e.EquipmentTypeId, e.RefEqpStatusId, e.ImportType, e.ImportClient, e.ClientBasket, e.AssignedClient, e.LastDateChange, e.CurrLocationId, e.RefEqpStateId, e.EquipmentId, e.CurrLocationType, e.FileCode, e.SerialNo })
                    .HasName("INDX_EQP_IDSTATECURRLOCFCSN");

                entity.HasIndex(e => new { e.AssignedClient, e.ClientBasket, e.CurrLocationId, e.CurrLocationType, e.Dfp, e.EquipmentId, e.FileCode, e.ImportClient, e.ImportType, e.LastDateChange, e.RefEqpStatusId, e.SerialNo, e.ToolHierarchyId, e.RefEqpStateId })
                    .HasName("IX_tblEquipment_Ref_EQP_TLHISTAFCSDFP");

                entity.HasIndex(e => new { e.AssignedClient, e.ClientBasket, e.CurrLocationId, e.CurrLocationType, e.Dfp, e.EquipmentId, e.EquipmentTypeId, e.FileCode, e.ImportClient, e.ImportType, e.OwnershipId, e.RefEqpStateId, e.RefEqpStatusId, e.Rental, e.SerialNo, e.HoldingSiteId })
                    .HasName("XAK_tblEquipment_HoldingSiteID");

                entity.HasIndex(e => new { e.BlockWo, e.CreatedBy, e.CurrLocationId, e.CurrLocationType, e.EquipmentSiteId, e.EquipmentTypeId, e.FileCode, e.OwnershipId, e.ProjectCodeMapId, e.RefEqpStateId, e.RefEqpStatusId, e.RefMaintGrpId, e.RefManufacturerId, e.SerialNo, e.ToolHierarchyId, e.EquipmentId })
                    .HasName("INDX_Eqp_ID");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentSiteId, e.EquipmentTypeId, e.ProjectCodeMapId, e.RefEqpStatusId, e.RefEqpStateId, e.RefManufacturerId, e.OwnershipId, e.RevisionLevel, e.SerialNo, e.BuildDate, e.CurrLocationType, e.CurrLocationId, e.CustomsStatus, e.ShockTotal, e.HrsPump, e.HrsEdt, e.TempMax, e.LastModifiedDate, e.HoldingSiteId, e.Dfp, e.Rental, e.BlockWo, e.Stampedfc, e.Stampedsn, e.ImportType, e.ImportClient, e.ClientBasket, e.AssignedClient, e.AccountSiteId, e.PartNumber, e.FileCode })
                    .HasName("NCI_tbleqp_RefEqpState_ID");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentSiteId, e.ToolHierarchyId, e.EquipmentTypeId, e.ProjectCodeMapId, e.RefEqpStateId, e.RefManufacturerId, e.OwnershipId, e.FileCode, e.RevisionLevel, e.SerialNo, e.BuildDate, e.CurrLocationType, e.CurrLocationId, e.CustomsStatus, e.ShockTotal, e.HrsPump, e.HrsEdt, e.TempMax, e.LastModifiedDate, e.HoldingSiteId, e.Dfp, e.Rental, e.BlockWo, e.Stampedfc, e.Stampedsn, e.ImportType, e.ImportClient, e.ClientBasket, e.AssignedClient, e.AccountSiteId, e.RefEqpStatusId })
                    .HasName("IX_tblEquipment_RefEqpStatus_ID");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentSiteId, e.ToolHierarchyId, e.EquipmentTypeId, e.ProjectCodeMapId, e.RefEqpStatusId, e.RefEqpStateId, e.RefManufacturerId, e.RefMaintGrpId, e.OwnershipId, e.FileCode, e.RevisionLevel, e.SerialNo, e.BuildDate, e.LawsonId, e.SapId, e.Loaned, e.Ponumber, e.PurchaseInvoiceNo, e.SalesInvoiceNo, e.CustomsStatus, e.CustomsEntry, e.CustomReceiptNo, e.LegalEntity, e.DisposalInvoiceNumber, e.DisposalApprovedBy, e.DisposalApprovedDate, e.ShockMaxLevel, e.ShockMaxDur, e.ShockTotal, e.HrsPump, e.HrsEdt, e.HrsSinceLastSl, e.LastServiceDate, e.TempMax, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.HoldingSiteId, e.MasterFileCode, e.MasterSerialNo, e.RmsId, e.RmsSiteid, e.CurrLocationType, e.CurrLocationId })
                    .HasName("INDEX_TEQP_CURRLOCTYPE_CURRLOCID");

                entity.HasIndex(e => new { e.EquipmentId, e.EquipmentSiteId, e.ToolHierarchyId, e.EquipmentTypeId, e.ProjectCodeMapId, e.RefEqpStatusId, e.RefEqpStateId, e.RefManufacturerId, e.RefMaintGrpId, e.OwnershipId, e.RevisionLevel, e.BuildDate, e.LawsonId, e.SapId, e.CurrLocationType, e.CurrLocationId, e.Loaned, e.Ponumber, e.PurchaseInvoiceNo, e.SalesInvoiceNo, e.CustomsStatus, e.CustomsEntry, e.CustomReceiptNo, e.LegalEntity, e.DisposalInvoiceNumber, e.DisposalApprovedBy, e.DisposalApprovedDate, e.ShockMaxLevel, e.ShockMaxDur, e.ShockTotal, e.HrsPump, e.HrsEdt, e.HrsSinceLastSl, e.LastServiceDate, e.TempMax, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.HoldingSiteId, e.MasterFileCode, e.MasterSerialNo, e.RmsId, e.RmsSiteid, e.Dfp, e.Rental, e.BlockWo, e.Stampedfc, e.Stampedsn, e.ImportType, e.ImportClient, e.ClientBasket, e.AssignedClient, e.AccountSiteId, e.LastDateChange, e.FileCode, e.SerialNo })
                    .HasName("XAK1tblEquipment_FC_SN1")
                    .IsUnique();

                entity.Property(e => e.EquipmentId).HasColumnName("Equipment_ID");

                entity.Property(e => e.AccountSiteId).HasColumnName("Account_Site_ID");

                entity.Property(e => e.AssignedClient)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.AssignedTo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.BlockWo).HasColumnName("BlockWO");

                entity.Property(e => e.BuildDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.BusinessUnitCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ClientBasket)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.CostUsd)
                    .HasColumnName("Cost_USD")
                    .HasColumnType("money");

                entity.Property(e => e.CountryofOrigin)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.CurrLocationId).HasColumnName("CurrLocation_ID");

                entity.Property(e => e.CurrLocationType)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CustomReceiptNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomsEntry)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CustomsExportEntryNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomsExportReceiptNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomsExportStatus)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CustomsStatus)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.DataHubSerialNo)
                    .HasColumnName("DataHub_SerialNo")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Deminimis)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Deposit)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dfp).HasColumnName("DFP");

                entity.Property(e => e.DisposalApprovedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DisposalApprovedDate).HasColumnType("datetime");

                entity.Property(e => e.DisposalInvoiceNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Duty)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EquipmentSiteId).HasColumnName("Equipment_SiteID");

                entity.Property(e => e.EquipmentTypeId).HasColumnName("EquipmentType_ID");

                entity.Property(e => e.FileCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.HoldingSiteId).HasColumnName("HoldingSite_ID");

                entity.Property(e => e.HrsEdt)
                    .HasColumnName("HrsEDT")
                    .HasColumnType("decimal(15, 1)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HrsPump)
                    .HasColumnType("decimal(15, 1)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.HrsSinceLastSl)
                    .HasColumnName("HrsSinceLastSL")
                    .HasColumnType("decimal(15, 1)")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Htccode)
                    .HasColumnName("HTCCode")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ImportClient)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ImportDate).HasColumnType("datetime");

                entity.Property(e => e.ImportType)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.IsDataHubDocFetched)
                    .HasColumnName("isDataHubDocFetched")
                    .HasMaxLength(4);

                entity.Property(e => e.LastDateChange)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.LastServiceDate).HasColumnType("datetime");

                entity.Property(e => e.LawsonId)
                    .HasColumnName("Lawson_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LegalEntity)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Length).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.LockedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockedDateTime).HasColumnType("datetime");

                entity.Property(e => e.LockedSession)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.MasterFileCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MasterSerialNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MatstestId).HasColumnName("MATSTestID");

                entity.Property(e => e.OldRefEqpStateId).HasColumnName("OldRefEqpState_ID");

                entity.Property(e => e.OldRefEqpStatusId).HasColumnName("OldRefEqpStatus_ID");

                entity.Property(e => e.Oracleidfield)
                    .HasColumnName("ORACLEIDFIELD")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OwnershipId).HasColumnName("Ownership_ID");

                entity.Property(e => e.PartNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Ponumber)
                    .HasColumnName("PONumber")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCenter)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCenterId).HasColumnName("ProductCenter_ID");

                entity.Property(e => e.ProjectCodeMapId).HasColumnName("ProjectCodeMap_ID");

                entity.Property(e => e.PurchaseInvoiceNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RadiusToolName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefEqpStateId)
                    .HasColumnName("RefEqpState_ID")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.RefEqpStatusId).HasColumnName("RefEqpStatus_ID");

                entity.Property(e => e.RefMaintGrpId).HasColumnName("RefMaintGrp_ID");

                entity.Property(e => e.RefManufacturerId).HasColumnName("RefManufacturer_ID");

                entity.Property(e => e.RevisionLevel)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.RmsId).HasColumnName("RMS_ID");

                entity.Property(e => e.RmsSiteid).HasColumnName("RMS_SITEID");

                entity.Property(e => e.SalesInvoiceNo)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.SapId)
                    .HasColumnName("SAP_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ShockMaxDur).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ShockMaxLevel).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ShockTotal).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ShopUseOnly).HasColumnName("ShopUseONLY");

                entity.Property(e => e.Stampedfc)
                    .HasColumnName("STAMPEDFC")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Stampedsn)
                    .HasColumnName("STAMPEDSN")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TempIedate1)
                    .HasColumnName("TempIEDate1")
                    .HasColumnType("datetime");

                entity.Property(e => e.TempIedate2)
                    .HasColumnName("TempIEDate2")
                    .HasColumnType("datetime");

                entity.Property(e => e.TempIedate3)
                    .HasColumnName("TempIEDate3")
                    .HasColumnType("datetime");

                entity.Property(e => e.TempMax).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.ToolHierarchyId).HasColumnName("ToolHierarchy_ID");

                entity.Property(e => e.ValueShipmentCost)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Width).HasColumnType("decimal(15, 5)");

                entity.HasOne(d => d.EquipmentType)
                    .WithMany(p => p.Equipment)
                    .HasForeignKey(d => d.EquipmentTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_EqpInfo06");
            });

            modelBuilder.Entity<EquipmentType>(entity =>
            {
                entity.HasKey(e => e.EquipmentTypeId);

                entity.ToTable("tblEquipmentType");

                entity.HasIndex(e => e.GemsproductLine)
                    .HasName("IXtblEquipmentType_GEMSProductLine");

                entity.HasIndex(e => new { e.Description, e.EquipmentTypeId })
                    .HasName("IX_tblEquipmentType_EQPID_DESC");

                entity.HasIndex(e => new { e.Uom, e.PartNumber })
                    .HasName("NCI_tbleqptype_PN");

                entity.HasIndex(e => new { e.EquipmentTypeId, e.FileCode, e.Description, e.Rmistool, e.FatigueTool, e.BlockEqpCreation, e.AllowBlockWo, e.IsVisible })
                    .HasName("IX_tblEquipmentType_Isvisible");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedDate, e.Description, e.Edtfactor, e.EquipmentTypeSiteId, e.FatigueTool, e.FileCode, e.FileCodeStatus, e.GemsproductLine, e.LastModifiedBy, e.LastModifiedDate, e.LocalTool, e.PartNumber, e.PartType, e.Price, e.RefIntervalId, e.RefMaintGrpId, e.RefManufacturerId, e.Rmistool, e.Serialized, e.ToolHierarchyId, e.Uom, e.EquipmentTypeId })
                    .HasName("INDX_EqpType_ID");

                entity.HasIndex(e => new { e.EquipmentTypeId, e.EquipmentTypeSiteId, e.ToolHierarchyId, e.RefMaintGrpId, e.GemsproductLine, e.Description, e.PartNumber, e.PartType, e.Price, e.Serialized, e.FileCodeStatus, e.RefManufacturerId, e.RefIntervalId, e.Edtfactor, e.Uom, e.Rmistool, e.LocalTool, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.FatigueTool, e.MaterialCertification, e.FileCode })
                    .HasName("XAK1tblEquipmentType")
                    .IsUnique();

                entity.Property(e => e.EquipmentTypeId)
                    .HasColumnName("EquipmentType_ID")
                    .ValueGeneratedNever();

                entity.Property(e => e.AllowBlockWo).HasColumnName("AllowBlockWO");

                entity.Property(e => e.BlockEqpCreationPc).HasColumnName("BlockEqpCreationPC");

                entity.Property(e => e.BlockEqpJunkingNonPc).HasColumnName("BlockEqpJunkingNonPC");

                entity.Property(e => e.BlockFfwocreation).HasColumnName("BlockFFWOCreation");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creationDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.Designresponsibility)
                    .HasColumnName("designresponsibility")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Designstatus)
                    .HasColumnName("designstatus")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Dtr).HasColumnName("DTR");

                entity.Property(e => e.Edtfactor)
                    .HasColumnName("EDTFactor")
                    .HasColumnType("decimal(15, 5)");

                entity.Property(e => e.EquipmentClassificationId).HasColumnName("EquipmentClassification_ID");

                entity.Property(e => e.EquipmentTypeSiteId).HasColumnName("EquipmentType_SiteID");

                entity.Property(e => e.FileCode)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.FileCodeStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.FmsKeyCodeId).HasColumnName("FMS_Key_Code_ID");

                entity.Property(e => e.GeMsdescription)
                    .HasColumnName("GeMSDescription")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.GemsproductLine)
                    .HasColumnName("GEMSProductLine")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Height).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Imte).HasColumnName("IMTE");

                entity.Property(e => e.IsVisible).HasDefaultValueSql("((1))");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.Length).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Lrde).HasColumnName("LRDE");

                entity.Property(e => e.MinRevLevel)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.PaperlessAssetTypeId).HasColumnName("PaperlessAssetTypeID");

                entity.Property(e => e.PartNumber)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PartNumberRevionLevel)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PartType)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(15, 2)");

                entity.Property(e => e.ProductCenter)
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.ProductCenterId).HasColumnName("ProductCenter_ID");

                entity.Property(e => e.PushtoSwat).HasColumnName("PushtoSWAT");

                entity.Property(e => e.RefIntervalId)
                    .HasColumnName("RefInterval_ID")
                    .HasDefaultValueSql("((2))");

                entity.Property(e => e.RefMaintGrpId).HasColumnName("RefMaintGrp_ID");

                entity.Property(e => e.RefManufacturerId).HasColumnName("RefManufacturer_ID");

                entity.Property(e => e.Rmistool).HasColumnName("RMISTool");

                entity.Property(e => e.Statusdate)
                    .HasColumnName("statusdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.ToolHierarchyId).HasColumnName("ToolHierarchy_ID");

                entity.Property(e => e.Uom)
                    .HasColumnName("UOM")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 5)");

                entity.Property(e => e.Width).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<Site>(entity =>
            {
                entity.HasKey(e => e.SiteId);

                entity.ToTable("tblSite");

                entity.HasIndex(e => new { e.Hierarchy, e.SiteCode })
                    .HasName("XAK_tblSite_SiteCode");

                entity.HasIndex(e => new { e.SiteId, e.SiteCode })
                    .HasName("XAK_tblSite_SC_SID");

                entity.HasIndex(e => new { e.SiteId, e.LocationHierarchyId, e.SiteCode, e.SiteName, e.Address1, e.Address2, e.Country, e.PhoneNumber, e.FaxNumber, e.ContactPerson, e.RefGmtId, e.RentalSite, e.SiteType, e.Status })
                    .HasName("INDX_TSITE_STATUS");

                entity.HasIndex(e => new { e.Address1, e.Address2, e.ContactPerson, e.Country, e.CreatedBy, e.CreatedDate, e.FaxNumber, e.LastModifiedBy, e.LastModifiedDate, e.LocationHierarchyId, e.PhoneNumber, e.RefGmtId, e.RentalSite, e.SiteCode, e.SiteName, e.SiteType, e.Status, e.SiteId })
                    .HasName("INDX_Site_ID");

                entity.HasIndex(e => new { e.Address1, e.Address2, e.ContactPerson, e.Country, e.CreatedBy, e.CreatedDate, e.FaxNumber, e.LastModifiedBy, e.LastModifiedDate, e.LocationHierarchyId, e.PhoneNumber, e.RefGmtId, e.RentalSite, e.SiteId, e.SiteName, e.SiteType, e.Status, e.SiteCode })
                    .HasName("INDX_SITECODE");

                entity.Property(e => e.SiteId).HasColumnName("Site_ID");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.ContactPerson)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.DfpmanualSwpsFlag).HasColumnName("DFPManualSwpsFlag");

                entity.Property(e => e.DfpstoresLocationCode)
                    .HasColumnName("DFPStores_LocationCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.FacilityId).HasColumnName("Facility_ID");

                entity.Property(e => e.FaxNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FmsDistrictNbr)
                    .HasColumnName("FMS_DISTRICT_NBR")
                    .HasMaxLength(100);

                entity.Property(e => e.FmsJob).HasColumnName("FMS_Job");

                entity.Property(e => e.FmsMovement).HasColumnName("FMS_Movement");

                entity.Property(e => e.FmsWo).HasColumnName("FMS_WO");

                entity.Property(e => e.GtCountryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Hierarchy)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.LeafType)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(' ')");

                entity.Property(e => e.LocationHierarchyId).HasColumnName("LocationHierarchy_ID");

                entity.Property(e => e.ManualTpmwoflag).HasColumnName("ManualTPMWOFlag");

                entity.Property(e => e.PhoneNumber)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Qtrac1Cflag).HasColumnName("QTrac1CFlag");

                entity.Property(e => e.RefGmtId).HasColumnName("RefGMT_ID");

                entity.Property(e => e.RefSegmentId).HasColumnName("RefSegment_ID");

                entity.Property(e => e.RentalSite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiteCode)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.SiteName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SplitDmjobs).HasColumnName("SplitDMJobs");

                entity.Property(e => e.SplitDtrjobs).HasColumnName("SplitDTRJobs");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StoresCompanyCode)
                    .HasColumnName("Stores_CompanyCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StoresLocationCode)
                    .HasColumnName("Stores_LocationCode")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.StraightHours)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TlmSite).HasColumnName("TLM_SITE");

                entity.Property(e => e.SapFlag).HasColumnName("SAPFlag");
                
                entity.Property(e => e.MupFlag).HasColumnName("MUPFlag");

                entity.Property(e => e.BusinessLine).HasColumnName("BusinessLine");
                entity.Property(e => e.SubBusinessLine).HasColumnName("SubBusinessLine");

                entity.Property(e => e.TlmWoewebFlag).HasColumnName("TlmWOEWebFlag");
            });

            modelBuilder.Entity<Job>(entity =>
            {
                entity.ToTable("JOB");

                entity.HasIndex(e => e.CompanyCrmId)
                    .HasName("IX_JOB_Company_CRM_ID");

                entity.HasIndex(e => e.JobNumber)
                    .HasName("UK_JOB")
                    .IsUnique();

                entity.HasIndex(e => new { e.CompanyCrmId, e.CompanySourceId })
                    .HasName("NCI_JOB_COMPANY_CRM_ID_SOURCE_ID");

                entity.HasIndex(e => new { e.DmLocationId, e.JobState })
                    .HasName("NCI_JOB_DM_LOCATION_ID_STATE");

                entity.HasIndex(e => new { e.DmLocationId, e.WellId })
                    .HasName("IX_JOB_Well");

                entity.HasIndex(e => new { e.SalesEngineerGin, e.DmLocationId })
                    .HasName("NCI_JOB_DM_LOCATION_ID_GIN");

                entity.HasIndex(e => new { e.SourceId, e.DistrictId })
                    .HasName("INDX_IDISTRICT_ID_DISTRICT_ID");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.DmLocationId })
                    .HasName("INDX_JOB_DMLID_JN_ID");

                entity.HasIndex(e => new { e.JobNumber, e.Id, e.CompanyCrmId })
                    .HasName("IX_JOB_ID_COMPANY_CRM_ID");

                entity.HasIndex(e => new { e.RigId, e.WellId, e.CompanyCrmId })
                    .HasName("INDX_RIG_ID_WELL_ID_COMP_ID");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.UpdateDate, e.DmLocationId })
                    .HasName("NCI_JOB_DM_LOCATION_ID_JOB_NO");

                entity.HasIndex(e => new { e.Id, e.DmLocationId, e.RigId, e.WellId, e.CompanyCrmId })
                    .HasName("T_BRS_GENERAL_GW");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.DmLocationId, e.IsRental, e.JobState })
                    .HasName("NCI_JOB_DM_LOCATION_ID_IsRental_STATE");

                entity.HasIndex(e => new { e.JobNumber, e.EndDate, e.PacketLatitude, e.PacketLongitude, e.UpdateDate })
                    .HasName("NCI_JOB_UPDATE_DATE");

                entity.HasIndex(e => new { e.JobState, e.WellId, e.RigId, e.CompanyCrmId, e.DmLocationId, e.Id })
                    .HasName("IX_JOB_JObstate_wellid_rigid_companaycrm_dm_locaitonid_id");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.CompanyCrmId, e.StartDate, e.IsRetainer, e.DmLocationId, e.Operational })
                    .HasName("NCI_JOB_DM_LOCATION_ID_OPERATIONAL");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.DmLocationId, e.CompanyCrmId, e.StartDate, e.IsRetainer, e.Operational })
                    .HasName("NCI_JOB_OPERATIONAL");

                entity.HasIndex(e => new { e.Id, e.JobState, e.FsmDdGin, e.FsmMwdGin, e.RigId, e.WellId, e.CompanyCrmId, e.DmLocationId, e.JobNumber })
                    .HasName("IX_JOB_ID_JObState_FSMDD_MWD_GIN_Rig_Well_CmpCRM_DMLOC_ID_JOBNO");

                entity.HasIndex(e => new { e.JobNumber, e.DmLocationId, e.RigId, e.StartDate, e.EndDate, e.FsmDdGin, e.FsmMwdGin, e.JobState, e.Operational })
                    .HasName("IX_JOB_JOB_STATE_OPERATIONAL");

                entity.HasIndex(e => new { e.CompanyCrmId, e.DmLocationId, e.DrillingEngineerGin, e.FsmDdGin, e.FsmMwdGin, e.Id, e.JobNumber, e.RigId, e.WellId, e.JobState })
                    .HasName("ix_JOB_JOB_STATE");

                entity.HasIndex(e => new { e.Id, e.RigId, e.WellId, e.CompanyCrmId, e.StartDate, e.EndDate, e.JobState, e.FsmDdGin, e.FsmMwdGin, e.Operational, e.DmLocationId, e.JobNumber })
                    .HasName("XAK_JOB_DM_LOCATION_IS");

                entity.HasIndex(e => new { e.BlockRigPackets, e.Comments, e.CompanyCrmId, e.CreatedDate, e.CreatedUser, e.CurrentActivity, e.Directions, e.DistrictAlias, e.DistrictId, e.DmLocationId, e.DrillingEngineerGin, e.EndDate, e.FsmDdGin, e.FsmMwdGin, e.Guid, e.JobNumber, e.JobState, e.JobType, e.Opportunity, e.OscComments, e.Probability, e.ReentryWell, e.ReentryWellTypeCode, e.SalesEngineerGin, e.SapJobNumber, e.SourceId, e.StartDate, e.UpdateDate, e.UpdateUser, e.WellId, e.Id, e.RigId })
                    .HasName("INDX_JOB_IDRIGID");

                entity.HasIndex(e => new { e.JobNumber, e.SapJobNumber, e.JobType, e.DmLocationId, e.RigId, e.WellId, e.CompanyCrmId, e.StartDate, e.EndDate, e.JobState, e.BlockRigPackets, e.CurrentActivity, e.FsmDdGin, e.FsmMwdGin, e.Comments, e.ReentryWell, e.ReentryWellTypeCode, e.UpdateDate, e.UpdateUser, e.CreatedUser, e.CreatedDate, e.DrillingEngineerGin, e.SalesEngineerGin, e.OscComments, e.Opportunity, e.Probability, e.SourceId, e.Guid, e.DistrictId, e.DistrictAlias, e.Directions, e.Id })
                    .HasName("INDX_JOB_ID");

                entity.HasIndex(e => new { e.Id, e.SapJobNumber, e.JobType, e.DmLocationId, e.RigId, e.WellId, e.CompanyCrmId, e.StartDate, e.EndDate, e.JobState, e.BlockRigPackets, e.CurrentActivity, e.FsmDdGin, e.FsmMwdGin, e.Comments, e.ReentryWell, e.ReentryWellTypeCode, e.UpdateDate, e.UpdateUser, e.CreatedUser, e.CreatedDate, e.DrillingEngineerGin, e.SalesEngineerGin, e.OscComments, e.Opportunity, e.Probability, e.SourceId, e.Guid, e.DistrictId, e.DistrictAlias, e.Directions, e.PacketLatitude, e.PacketLongitude, e.JobNumber })
                    .HasName("INDX_JOB_JOBNUMBER");

                entity.HasIndex(e => new { e.JobNumber, e.SapJobNumber, e.JobType, e.DmLocationId, e.RigId, e.WellId, e.CompanyCrmId, e.StartDate, e.EndDate, e.BlockRigPackets, e.CurrentActivity, e.FsmDdGin, e.FsmMwdGin, e.Comments, e.ReentryWell, e.ReentryWellTypeCode, e.UpdateDate, e.UpdateUser, e.CreatedUser, e.CreatedDate, e.DrillingEngineerGin, e.SalesEngineerGin, e.OscComments, e.Opportunity, e.Probability, e.SourceId, e.Guid, e.DistrictId, e.DistrictAlias, e.Directions, e.Operational, e.CrewSatellitePhone, e.CrewOtherPhone, e.CrewEmail, e.Jri, e.HpjArea, e.Hpj, e.QuestTicketNumber, e.Id, e.JobState })
                    .HasName("INDX_JOBIDSTATE");

                entity.HasIndex(e => new { e.Id, e.JobNumber, e.SapJobNumber, e.JobType, e.RigId, e.WellId, e.CompanyCrmId, e.StartDate, e.EndDate, e.JobState, e.BlockRigPackets, e.CurrentActivity, e.FsmDdGin, e.FsmMwdGin, e.Comments, e.ReentryWell, e.ReentryWellTypeCode, e.UpdateDate, e.UpdateUser, e.CreatedUser, e.CreatedDate, e.DrillingEngineerGin, e.SalesEngineerGin, e.OscComments, e.Opportunity, e.Probability, e.SourceId, e.Guid, e.DistrictId, e.DistrictAlias, e.Directions, e.Operational, e.CrewSatellitePhone, e.CrewOtherPhone, e.CrewEmail, e.Jri, e.HpjArea, e.Hpj, e.QuestTicketNumber, e.Std21DataClassification, e.PacketLatitude, e.PacketLongitude, e.RigType, e.QtracLastModifiedDate, e.PacketStd21Data, e.PacketSpudDate, e.JobFinished, e.IsRetainer, e.LastModifiedBy, e.LastModifiedDate, e.Jristatus, e.Jriscore, e.JricreatedBy, e.JricreatedDate, e.JriModifiedBy, e.JrimodifiedDate, e.SourceSystem, e.CompanySourceId, e.FieldId, e.IsRental, e.JriQuestTicket, e.JobTypeCode, e.SegmentName, e.IsCasedHole, e.IsNt5fieldTest, e.FsmMotorsGin, e.SourceServiceLineId, e.ServiceLineName, e.TrackingNumber, e.FinalCompositeLogDate, e.IsCommandCenterJob, e.SdmcellId, e.Cor, e.Ttc, e.DmLocationId })
                    .HasName("NCI_JOB_DM_LOCATION_ID_All");

                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.IsFDPJob).HasColumnName("IsFDPJob");

                entity.Property(e => e.BlockRigPackets).HasColumnName("BLOCK_RIG_PACKETS");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.CompanyCrmId)
                    .HasColumnName("COMPANY_CRM_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompanySourceId).HasColumnName("COMPANY_SOURCE_ID");

                entity.Property(e => e.Cor).HasColumnName("COR");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CrewEmail)
                    .HasColumnName("CREW_EMAIL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CrewOtherPhone)
                    .HasColumnName("CREW_OTHER_PHONE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CrewSatellitePhone)
                    .HasColumnName("CREW_SATELLITE_PHONE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CurrentActivity)
                    .HasColumnName("CURRENT_ACTIVITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Directions).HasMaxLength(2000);

                entity.Property(e => e.DistrictAlias).HasColumnType("varchar(max)");

                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");

                entity.Property(e => e.DmLocationId).HasColumnName("DM_LOCATION_ID");

                entity.Property(e => e.DrillingEngineerGin).HasColumnName("DRILLING_ENGINEER_GIN");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FieldId).HasColumnName("FieldID");

                entity.Property(e => e.FinalCompositeLogDate)
                    .HasColumnName("FINAL_COMPOSITE_LOG_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.FsmDdGin).HasColumnName("FSM_DD_GIN");

                entity.Property(e => e.FsmMotorsGin).HasColumnName("FSM_Motors_GIN");

                entity.Property(e => e.FsmMwdGin).HasColumnName("FSM_MWD_GIN");

                entity.Property(e => e.Guid)
                    .HasColumnName("GUID")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Hpj).HasColumnName("HPJ");

                entity.Property(e => e.HpjArea).HasColumnName("HPJ_AREA");

                entity.Property(e => e.IsNt5fieldTest).HasColumnName("IsNT5FieldTest");

                entity.Property(e => e.JobFinished).HasColumnName("JOB_FINISHED");

                entity.Property(e => e.JobNumber)
                    .IsRequired()
                    .HasColumnName("JOB_NUMBER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JobState)
                    .HasColumnName("JOB_STATE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JobType)
                    .HasColumnName("JOB_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JobTypeCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Jri)
                    .HasColumnName("JRI")
                    .HasColumnType("decimal(10, 1)");

                entity.Property(e => e.JriModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JriQuestTicket)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JricreatedBy)
                    .HasColumnName("JRICreatedBy")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JricreatedDate)
                    .HasColumnName("JRICreatedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.JrimodifiedDate)
                    .HasColumnName("JRIModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.Jriscore)
                    .HasColumnName("JRIScore")
                    .HasColumnType("decimal(10, 5)");

                entity.Property(e => e.Jristatus)
                    .HasColumnName("JRIStatus")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.Operational).HasColumnName("OPERATIONAL");

                entity.Property(e => e.Opportunity).HasColumnName("OPPORTUNITY");

                entity.Property(e => e.OscComments)
                    .HasColumnName("OSC_COMMENTS")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.PacketLatitude).HasColumnName("PACKET_LATITUDE");

                entity.Property(e => e.PacketLongitude).HasColumnName("PACKET_LONGITUDE");

                entity.Property(e => e.PacketSpudDate)
                    .HasColumnName("PACKET_SPUD_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.PacketStd21Data)
                    .HasColumnName("PACKET_STD21_Data")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.Probability)
                    .HasColumnName("PROBABILITY")
                    .HasDefaultValueSql("((100.0))");

                entity.Property(e => e.QtracLastModifiedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getutcdate())");

                entity.Property(e => e.QuestTicketNumber)
                    .HasColumnName("QUEST_TICKET_NUMBER")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ReentryWell).HasColumnName("REENTRY_WELL");

                entity.Property(e => e.ReentryWellTypeCode)
                    .HasColumnName("REENTRY_WELL_TYPE_CODE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RigId).HasColumnName("RIG_ID");

                entity.Property(e => e.RigType)
                    .HasColumnName("RIG_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SalesEngineerGin).HasColumnName("SALES_ENGINEER_GIN");

                entity.Property(e => e.SapJobNumber)
                    .HasColumnName("SAP_JOB_NUMBER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SdmcellId).HasColumnName("SDMCellID");

                entity.HasOne(e => e.Sdmcell).WithOne(s => s.Job)
                    .HasForeignKey<Job>(f => f.SdmcellId)
                    .HasPrincipalKey<Sdmcell>(c => c.IDistrictId);

                entity.Property(e => e.SegmentName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceLineName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SOURCE_ID");

                entity.Property(e => e.SourceServiceLineId).HasColumnName("Source_ServiceLineID");

                entity.Property(e => e.SourceSystem)
                    .HasColumnName("Source_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Std21DataClassification)
                    .HasColumnName("STD21_Data_Classification")
                    .HasMaxLength(25)
                    .IsUnicode(false);

                entity.Property(e => e.TrackingNumber)
                    .HasColumnName("TRACKING_NUMBER")
                    .HasMaxLength(510);

                entity.Property(e => e.Ttc).HasColumnName("TTC");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.WellId).HasColumnName("WELL_ID");

                entity.HasOne(x => x.DmLocation)
                    .WithMany()
                    .HasForeignKey(x => x.DmLocationId)
                    .HasPrincipalKey(x => x.LocationId);
            });

            modelBuilder.Entity<JobAttribute>(entity =>
            {
                entity.ToTable("BORE_HOLE_ATTRIBUTES");

                entity.HasIndex(e => new { e.JobId, e.Borehole, e.HoleSize })
                    .HasName("IX_BORE_HOLE_ATTRIBUTES_JobID_Borehole_Holesize");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActualEndDate)
                    .HasColumnName("ACTUAL_END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Borehole).HasColumnName("BOREHOLE");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DqrEngineerComment)
                    .HasColumnName("DQR_ENGINEER_COMMENT")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DqrFsmComment)
                    .HasColumnName("DQR_FSM_COMMENT")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.DqrLogPerformed).HasColumnName("DQR_LOG_PERFORMED");

                entity.Property(e => e.DqrQcDate)
                    .HasColumnName("DQR_QC_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DqrQcDone).HasColumnName("DQR_QC_DONE");

                entity.Property(e => e.DqrQcNotified).HasColumnName("DQR_QC_NOTIFIED");

                entity.Property(e => e.DqrQcUser)
                    .HasColumnName("DQR_QC_USER")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.DqrSentDate)
                    .HasColumnName("DQR_SENT_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DqrSubmitNotified).HasColumnName("DQR_SUBMIT_NOTIFIED");

                entity.Property(e => e.EstimatedEndDate)
                    .HasColumnName("ESTIMATED_END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EstimatedStartDate)
                    .HasColumnName("ESTIMATED_START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.HoleSize).HasColumnName("HOLE_SIZE");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.LastCasingSize).HasColumnName("LAST_CASING_SIZE");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.PlannedEndDepth).HasColumnName("PLANNED_END_DEPTH");

                entity.Property(e => e.PlannedNoOfBha).HasColumnName("PLANNED_NO_OF_BHA");

                entity.Property(e => e.PlannedStartDepth).HasColumnName("PLANNED_START_DEPTH");

                entity.Property(e => e.SectionFinished).HasColumnName("SECTION_FINISHED");

                entity.Property(e => e.ShoeMd).HasColumnName("SHOE_MD");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(255)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JobResource>(entity =>
            {
                entity.ToTable("tblIDistrictPlannedResource");

                entity.HasIndex(e => new { e.JobId, e.PlannedResourceId })
                    .HasName("ix_tblIDistrictPlannedResource_JobID_PlannedResourceID");

                entity.HasIndex(e => new { e.Id, e.ToolMasterId, e.HolesizejobmapId });

                entity.HasIndex(e => new { e.Id, e.JobId, e.Quantity, e.ToolMasterId, e.HolesizejobmapId, e.Active })
                    .HasName("IX_tblIDistrictPlannedResource_Active");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EndTime)
                    .HasColumnName("END_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.HolesizejobmapId).HasColumnName("HOLESIZEJOBMAP_ID");

                entity.Property(e => e.JobId).HasColumnName("JobID");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PlannedResourceId).HasColumnName("PlannedResourceID");

                entity.Property(e => e.ProductGroupId).HasColumnName("PRODUCT_GROUP_ID");

                entity.Property(e => e.ProductLineId).HasColumnName("PRODUCT_LINE_ID");

                entity.Property(e => e.ShippingOutJobDate).HasColumnType("datetime");

                entity.Property(e => e.ShippingToJobDate).HasColumnType("datetime");

                entity.Property(e => e.StartTime)
                    .HasColumnName("START_TIME")
                    .HasColumnType("datetime");

                entity.Property(e => e.ToolComingFromLocationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToolMasterId).HasColumnName("TOOL_MASTER_ID");
            });

            modelBuilder.Entity<Movement>(entity =>
            {
                entity.HasKey(e => e.MovementHdrId);

                entity.ToTable("tblmovementhdr");

                entity.HasIndex(e => e.LastModifiedDate)
                    .HasName("XAK_tblMovementHDR_LastModifiedDate");

                entity.HasIndex(e => e.MovementFromId)
                    .HasName("XAK_tblMovementHDR_MovementFrom");

                entity.HasIndex(e => e.MovementToId)
                    .HasName("XAK_tblMovementHDR_MovementTo_ID");

                entity.HasIndex(e => e.ParentShipmentNo)
                    .HasName("INDX_tblMovementHdr_ParentShipmentNo");

                entity.HasIndex(e => e.RefMovementStatusId)
                    .HasName("XAK_tblMovementHDR_RefMovementStatus_ID");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentDate, e.CreatedDate })
                    .HasName("ix_tblmovementhdr_CreatedDate");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentDate, e.LastModifiedDate, e.RefMovementStatusId })
                    .HasName("NCI_tblmovementhdr_RefMovementStatus_ID");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentNumber, e.MovementHdrSiteId, e.LastModifiedBy })
                    .HasName("IX_tblmovementhdr_MovementHdr_SiteID_LastModifiedBy");

                entity.HasIndex(e => new { e.ShipmentNumber, e.MovementFromId, e.MovementToId, e.RefMovementTypeId, e.ShipmentDate })
                    .HasName("XAK_tblMovementHDR_ShipmentDate");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ParentShipmentNo, e.RefMovementTypeId })
                    .HasName("XAK_tblMovementHDR_RefMovementType_ID");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentDate, e.ShipmentNumber, e.CreatedBy, e.MovementHdrSiteId, e.LastModifiedBy })
                    .HasName("missing_index_49649");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.MovementToId, e.RefMovementTypeId, e.RefMovementStatusId, e.TransferType, e.HasReceived })
                    .HasName("IX_tblmovementhdr_HasReceived");

                entity.HasIndex(e => new { e.MovementHdrId, e.MovementHdrSiteId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.RefMovementTypeId, e.RefMovementStatusId, e.HasReceived, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.TransferType, e.MovementToId })
                    .HasName("INDX_MVMTHDR_TOID");

                entity.HasIndex(e => new { e.MovementHdrSiteId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.MovementToId, e.RefMovementTypeId, e.HasReceived, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.TransferType, e.MovementHdrId, e.RefMovementStatusId })
                    .HasName("INDX_MVMTHRD_IDSTS");

                entity.HasIndex(e => new { e.MovementHdrSiteId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.RefMovementTypeId, e.RefMovementStatusId, e.HasReceived, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.TransferType, e.MovementHdrId, e.MovementToId })
                    .HasName("INDX_MVMTHDR_IDTOID");

                entity.HasIndex(e => new { e.MovementHdrSiteId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.MovementToId, e.HasReceived, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.TransferType, e.LastModifiedBy, e.RefMovementTypeId, e.RefMovementStatusId, e.MovementHdrId })
                    .HasName("INDX_MVMTHDR_MVMTTYPESTSHDRID");

                entity.HasIndex(e => new { e.MovementHdrId, e.ShipmentDate, e.ShipmentNumber, e.MovementFromId, e.MovementToId, e.RefMovementStatusId, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.CreatedBy, e.CreatedDate, e.LastModifiedDate, e.ParentShipmentNo, e.MovementHdrSiteId, e.RefMovementTypeId })
                    .HasName("IX_tblmovementhdr_MovementHdr_SiteID_RefMovementType_ID");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedDate, e.HasReceived, e.LastModifiedBy, e.LastModifiedDate, e.LoadInDate, e.LoadOutDate, e.MovementFromId, e.MovementHdrSiteId, e.MovementToId, e.RefMovementStatusId, e.RefMovementTypeId, e.RentalOffDate, e.RentalOnDate, e.ShipmentDate, e.ShipmentNumber, e.TransferType, e.MovementHdrId })
                    .HasName("INDX_MvmtHdr_ID");

                entity.HasIndex(e => new { e.MovementHdrId, e.MovementHdrSiteId, e.ShipmentDate, e.MovementFromId, e.MovementToId, e.RefMovementTypeId, e.RefMovementStatusId, e.HasReceived, e.LoadInDate, e.LoadOutDate, e.RentalOnDate, e.RentalOffDate, e.TransferType, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber })
                    .HasName("XAK_tblMovementHDR_ShipmentNumber");

                entity.Property(e => e.MovementHdrId).HasColumnName("MovementHdr_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateReceived).HasColumnType("datetime");

                entity.Property(e => e.EstimatedArrivalDate).HasColumnType("datetime");

                entity.Property(e => e.HazMatFormId).HasColumnName("HazMatFormID");

                entity.Property(e => e.IsFtlInitiated).HasColumnName("isFTL_Initiated");

                entity.Property(e => e.IsHazMatIdRecievedFromRmis).HasColumnName("IsHazMatID_RecievedFromRMIS");

                entity.Property(e => e.ItemNo)
                    .HasMaxLength(3)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.LoadInDate).HasColumnType("datetime");

                entity.Property(e => e.LoadOutDate).HasColumnType("datetime");

                entity.Property(e => e.MovementFromId).HasColumnName("MovementFrom_ID");

                entity.Property(e => e.MovementHdrSiteId).HasColumnName("MovementHdr_SiteID");

                entity.Property(e => e.MovementToId).HasColumnName("MovementTo_ID");

                entity.Property(e => e.ParentShipmentNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ReceiveDate).HasColumnType("datetime");

                entity.Property(e => e.RefMovementStatusId).HasColumnName("RefMovementStatus_ID");

                entity.Property(e => e.RefMovementTypeId).HasColumnName("RefMovementType_ID");

                entity.Property(e => e.RentalOffDate).HasColumnType("datetime");

                entity.Property(e => e.RentalOnDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentDate).HasColumnType("datetime");

                entity.Property(e => e.ShipmentNumber)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToRmisDepot)
                    .HasColumnName("ToRMIS_Depot")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TrackingNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransferType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReferenceMovementType>(entity =>
            {
                entity.HasKey(e => e.RefMovementTypeId);

                entity.ToTable("tblRefMovementType");

                entity.HasIndex(e => new { e.RefMovementTypeId, e.MovementFromType, e.MovementToType, e.MovementReportTitle, e.Active })
                    .HasName("INDX_MvmtType_ID");

                entity.HasIndex(e => new { e.Active, e.MovementFromType, e.MovementReportTitle, e.MovementToType, e.RefMovementTypeSiteId, e.RefMovementTypeId })
                    .HasName("INDX_RMVMTTYPE_ID");

                entity.HasIndex(e => new { e.Active, e.MovementReportTitle, e.MovementToType, e.RefMovementTypeSiteId, e.RefMovementTypeId, e.MovementFromType })
                    .HasName("INDX_RMVMTTYPE_IDTYPE");

                entity.HasIndex(e => new { e.RefMovementTypeId, e.RefMovementTypeSiteId, e.MovementFromType, e.MovementReportTitle, e.Active, e.MovementToType })
                    .HasName("INDX_REFMVMTTYPE_TOTYPE");

                entity.HasIndex(e => new { e.RefMovementTypeId, e.RefMovementTypeSiteId, e.MovementToType, e.MovementReportTitle, e.Active, e.MovementFromType })
                    .HasName("INDX_REFMVMTTYPE_FROMTYPE");

                entity.Property(e => e.RefMovementTypeId).HasColumnName("RefMovementType_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.MovementFromType)
                    .IsRequired()
                    .HasColumnName("MovementFrom_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MovementReportTitle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MovementToType)
                    .IsRequired()
                    .HasColumnName("MovementTo_Type")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MovementType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RefMovementTypeSiteId).HasColumnName("RefMovementType_SiteID");
            });

            modelBuilder.Entity<MovementDetail>(entity =>
            {
                entity.HasKey(e => e.MovementDtlId);

                entity.ToTable("tblmovementdtl");

                entity.HasIndex(e => new { e.MovementHdrId, e.EquipmentId })
                    .HasName("nci_TBLMOVEMENTDTL_MovEQP");

                entity.HasIndex(e => new { e.MovementHdrId, e.FtlMovementHdrId })
                    .HasName("IX_tblmovementdtl_FTL_MovementHDR_ID");

                entity.HasIndex(e => new { e.EquipmentId, e.IsToolset, e.MovementHdrId })
                    .HasName("IX_tblmovementdtl_EQPID_TOOLSET_MHDRID");

                entity.HasIndex(e => new { e.MovementHdrId, e.IsToolset, e.EquipmentId })
                    .HasName("IX_tblmovementdtl_IsToolset_Equipment_ID");

                entity.HasIndex(e => new { e.MovementHdrId, e.MovementDtlId, e.FtlMovementHdrId });

                entity.HasIndex(e => new { e.MovementDtlId, e.EquipmentId, e.IsToolset, e.IsLatestShipment, e.MovementHdrId, e.ToolsetHistoryHdrId })
                    .HasName("INDX_MVMTDTL_HDRIDTSHDRID");

                entity.HasIndex(e => new { e.CreatedDate, e.EquipmentId, e.IsLatestShipment, e.IsToolset, e.MovementDtlId, e.MovementHdrId, e.ToolsetHistoryHdrId })
                    .HasName("INDX_TMVMTDTL_TSHDRID");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedDate, e.EquipmentId, e.IsLatestShipment, e.IsToolset, e.LastModifiedBy, e.LastModifiedDate, e.MovementDtlId, e.ToolsetHistoryHdrId, e.MovementHdrId })
                    .HasName("INDX_MVMT_HDR_ID");

                entity.HasIndex(e => new { e.CreatedBy, e.CreatedDate, e.IsLatestShipment, e.IsToolset, e.LastModifiedBy, e.LastModifiedDate, e.MovementDtlId, e.MovementHdrId, e.ToolsetHistoryHdrId, e.EquipmentId })
                    .HasName("XAK_tblMovementDTL_Equipment_ID");

                entity.HasIndex(e => new { e.MovementDtlId, e.MovementHdrId, e.EquipmentId, e.IsToolset, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ToolsetHistoryHdrId, e.IsLatestShipment })
                    .HasName("XAK_tblMovementDTL_ToolsetHistHDR_ID");

                entity.Property(e => e.MovementDtlId).HasColumnName("MovementDtl_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EquipmentId).HasColumnName("Equipment_ID");

                entity.Property(e => e.FtlMovementHdrId).HasColumnName("FTL_MovementHDR_ID");

                entity.Property(e => e.HoldingsiteIdMovement).HasColumnName("HOLDINGSITE_ID_MOVEMENT");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.MovementHdrId).HasColumnName("MovementHdr_ID");

                entity.Property(e => e.OwnersiteIdMovement).HasColumnName("OWNERSITE_ID_MOVEMENT");

                entity.Property(e => e.ParentContainer)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StauseAtTimeOfTransfer).HasColumnName("Stause_at_time_of_transfer");

                entity.Property(e => e.ToolsetHistoryHdrId).HasColumnName("ToolsetHistoryHdr_ID");

                entity.Property(e => e.TransferOutdate)
                    .HasColumnName("Transfer_outdate")
                    .HasColumnType("datetime");

                entity.Property(e => e.TransferredBy)
                    .HasColumnName("Transferred_by")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Weight).HasColumnType("decimal(15, 5)");
            });

            modelBuilder.Entity<MovementComment>(entity =>
            {
                entity.HasKey(e => e.MovementCommentId);

                entity.ToTable("tblMovementComment");

                entity.HasIndex(e => e.ParentShipmentNo)
                    .HasName("INDX_tblMovementComment_ParentShipmentNo");

                entity.HasIndex(e => new { MovementComment = e.CommentText, e.MovementHdrId, e.LastModifiedDate, e.MovementCommentId })
                    .HasName("IX_tblMovementComment_MovementHdr_ID_LastModifiedDate_MovementComment_ID");

                entity.HasIndex(e => new { e.MovementCommentId, e.MovementHdrId, MovementComment = e.CommentText, e.CreatedBy, e.CreatedDate, e.FtlMovementHdrId })
                    .HasName("IX_tblMovementComment_FTL_MovementHdr_ID");

                entity.Property(e => e.MovementCommentId).HasColumnName("MovementComment_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.FtlMovementHdrId).HasColumnName("FTL_MovementHdr_ID");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.CommentText)
                    .IsRequired()
                    .HasColumnName("MovementComment")
                    .HasColumnType("nvarchar(max)");

                entity.Property(e => e.MovementCommentSiteId).HasColumnName("MovementComment_SiteID");

                entity.Property(e => e.MovementHdrId).HasColumnName("MovementHdr_ID");

                entity.Property(e => e.ParentShipmentNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ReferenceMovementStatus>(entity =>
            {
                entity.HasKey(e => e.RefMovementStatusId);

                entity.ToTable("tblRefMovementStatus");

                entity.HasIndex(e => new { e.Active, e.MovementStatus, e.RefMovementStatusId })
                    .HasName("INDX_RMvmtSts_ID");

                entity.HasIndex(e => new { e.RefMovementStatusId, e.Active, e.MovementStatus })
                    .HasName("XAK1tblRefMovementStatus")
                    .IsUnique();

                entity.HasIndex(e => new { e.RefMovementStatusSiteId, e.Active, e.RefMovementStatusId, e.MovementStatus })
                    .HasName("INDX_RMVMTSTS_IDSTS");

                entity.Property(e => e.RefMovementStatusId).HasColumnName("RefMovementStatus_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("nvarchar(max)")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.MovementStatus)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.RefMovementStatusSiteId).HasColumnName("RefMovementStatus_SiteID");
            });

            modelBuilder.Entity<TCOToolSet>(entity =>
            {
                entity.HasKey(e => e.TcotoolsetId);

                entity.ToTable("tblTCOToolset");

                entity.HasIndex(e => e.ShipmentNumber)
                    .HasName("NCI_TBLTCOTS_ShipNum");

                entity.HasIndex(e => new { e.EtraceLoadToolId, e.StatusId })
                    .HasName("IX_tblTCOToolset_StatusID_ETLoadtoolID");

                entity.HasIndex(e => new { e.TcotoolsetSiteId, e.RedirectedToSiteId })
                    .HasName("XA1tblTCOToolset_TCOToolset_SiteId");

                entity.HasIndex(e => new { e.EtraceLoadOutId, e.PlannedShipDate, e.StatusId })
                    .HasName("INDX_tblTCOToolset_Status_etraceloadout_plannedshipeddate");

                entity.HasIndex(e => new { e.EtraceLoadOutId, e.ToolsetHistoryHdrId, e.TcotoolsetStatus })
                    .HasName("INDX_TCOTS_HHDRIDSTS");

                entity.HasIndex(e => new { e.ToolsetHistoryHdrId, e.EquipmentId, e.ParentTcotoolsetId, e.AcceptedSiteid, e.QuantityNo })
                    .HasName("NCI_tblTCOToolset_TSHistoryHdr_ID_EqpID_Parent_TCOTS_ID");

                entity.HasIndex(e => new { e.AcceptedSiteid, e.EquipmentId, e.IsToolset, e.RedirectedTypeId, e.ToolsetHistoryHdrId, e.MovementHdrId })
                    .HasName("ix_MovementHDR_ID");

                entity.HasIndex(e => new { e.EtraceLoadOutId, e.TcotoolsetStatus, e.LastModifiedDate, e.IsToolset, e.ShipmentNumber, e.EquipmentId })
                    .HasName("ix_tblTCOToolset_Equipment_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.EtraceTcoId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.IsToolset })
                    .HasName("ix_tblTCOToolset_IsToolset");

                entity.HasIndex(e => new { e.TcotoolsetId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.LastModifiedBy, e.LastModifiedDate, e.StatusId, e.ActualShipDate, e.MovementHdrId, e.ParentTcotoolsetId })
                    .HasName("INDX_tblTCOToolset_MHDRID_PTCOTSET_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.RedirectedToSiteId, e.ToolsetHistoryHdrId, e.EquipmentId, e.StatusId, e.AcceptedSiteid, e.QuantityNo, e.ParentTcotoolsetId })
                    .HasName("IX_tblTCOToolset_ToolsetHistoryHdr_ID_Equipment_ID_Status_ID_ACCEPTED_SITEID_Quantity_No_Parent_TCOToolset_ID");

                entity.HasIndex(e => new { e.AcceptedSiteid, e.EquipmentId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.IsToolset, e.LastModifiedDate, e.PlannedShipDate, e.RedirectedToSiteId, e.RedirectedTypeId, e.StatusId, e.TcotoolsetId, e.TcotoolsetStatus, e.ToolsetHistoryHdrId, e.TroLoadoutId, e.TcotoolsetSiteId })
                    .HasName("IX_tblTCOToolset_TCOToolset_SIteid_etLoutID_Status_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.EtraceLoadToolId, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.StatusId, e.RedirectedTypeId, e.PlannedShipDate, e.ActualShipDate, e.TroLoadoutId, e.QuantityNo, e.RedirectedToSiteId, e.EtraceLoadOutId })
                    .HasName("IX_tblTCOToolset_RedirectedTO_SiteID_EtraceLoadOut_ID");

                entity.HasIndex(e => new { e.AcceptedSiteid, e.ActualShipDate, e.CreatedBy, e.CreatedDate, e.EquipmentId, e.EtraceLoadOutId, e.EtraceTcoId, e.IsToolset, e.LastModifiedBy, e.LastModifiedDate, e.MovementHdrId, e.ParentTcotoolsetId, e.PlannedShipDate, e.QuantityNo, e.RedirectRejectFlag, e.RedirectedToSiteId, e.RedirectedTypeId, e.ShipmentNumber, e.StatusId, e.TcotoolsetId, e.TcotoolsetSiteId, e.TcotoolsetStatus, e.ToolReqId, e.ToolsetId, e.ToolsetHistoryHdrId, e.TroLoadoutId, e.EtraceLoadToolId })
                    .HasName("XAK_tblTCOToolset_EtraceLoadTool_ID");

                entity.HasIndex(e => new { e.AcceptedSiteid, e.ActualShipDate, e.CreatedBy, e.CreatedDate, e.EquipmentId, e.EtraceLoadToolId, e.EtraceTcoId, e.IsToolset, e.LastModifiedBy, e.LastModifiedDate, e.MovementHdrId, e.ParentTcotoolsetId, e.PlannedShipDate, e.QuantityNo, e.RedirectRejectFlag, e.RedirectedToSiteId, e.RedirectedTypeId, e.ShipmentNumber, e.StatusId, e.TcotoolsetId, e.TcotoolsetSiteId, e.TcotoolsetStatus, e.ToolReqId, e.ToolsetId, e.ToolsetHistoryHdrId, e.TroLoadoutId, e.EtraceLoadOutId })
                    .HasName("INDX_tblTCOToolset_ETraceLoadout_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.EtraceTcoId, e.EtraceLoadOutId })
                    .HasName("XA1tblTCOToolset_EtraceTCO_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.EtraceLoadToolId, e.EtraceLoadOutId, e.TcotoolsetStatus })
                    .HasName("INDX_TCOTS_TOOLIDLOIDSTATUS");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.TcotoolsetStatus, e.IsToolset })
                    .HasName("INDEX_TTT_ISTOOLSET_TOOLSETSTATUS");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.RedirectRejectFlag, e.ParentTcotoolsetId })
                    .HasName("INDX_tblTCOToolset_ParentTCOToolset_ID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.RedirectedTypeId })
                    .HasName("INDX_TCOTS_REDIRECTID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.EtraceLoadOutId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.AcceptedSiteid })
                    .HasName("INDX_TCOTS_ACCEPTEDSITEID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.EtraceLoadToolId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.EtraceLoadOutId, e.StatusId, e.PlannedShipDate })
                    .HasName("INDX_tlbTCOToolset_PSD_STATUSID_LOADOUTID");

                entity.HasIndex(e => new { e.TcotoolsetId, e.TcotoolsetSiteId, e.ToolsetId, e.EtraceTcoId, e.TcotoolsetStatus, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.ShipmentNumber, e.ToolsetHistoryHdrId, e.EquipmentId, e.IsToolset, e.AcceptedSiteid, e.StatusId, e.RedirectedToSiteId, e.RedirectedTypeId, e.ToolReqId, e.PlannedShipDate, e.ActualShipDate, e.MovementHdrId, e.TroLoadoutId, e.QuantityNo, e.ParentTcotoolsetId, e.RedirectRejectFlag, e.EtraceLoadOutId, e.EtraceLoadToolId })
                    .HasName("XAK1tblTCOToolset_EtraceLoadOut_ID_EtraceLoadTool_ID");

                entity.Property(e => e.TcotoolsetId).HasColumnName("TCOToolset_ID");

                entity.Property(e => e.AcceptedSiteid).HasColumnName("ACCEPTED_SITEID");

                entity.Property(e => e.ActualShipDate)
                    .HasColumnName("ACTUAL_SHIP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.EquipmentId).HasColumnName("Equipment_ID");

                entity.Property(e => e.EtraceLoadOutId).HasColumnName("EtraceLoadOut_ID");

                entity.Property(e => e.EtraceLoadToolId).HasColumnName("EtraceLoadTool_ID");

                entity.Property(e => e.EtraceTcoId).HasColumnName("EtraceTCO_ID");

                entity.Property(e => e.Fcdescription)
                    .HasColumnName("FCDESCRIPTION")
                    .HasMaxLength(2000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.MovementHdrId).HasColumnName("MovementHdr_ID");

                entity.Property(e => e.ParentTcotoolsetId).HasColumnName("Parent_TCOToolset_ID");

                entity.Property(e => e.PlannedShipDate)
                    .HasColumnName("PLANNED_SHIP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Qtrac1Cguid)
                    .HasColumnName("QTrac1CGUID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qtrac1CrequestId)
                    .HasColumnName("QTrac1CRequestID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.QuantityNo).HasColumnName("Quantity_No");

                entity.Property(e => e.RealizationNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RedirectRejectFlag).HasColumnName("REDIRECT_REJECT_FLAG");

                entity.Property(e => e.RedirectedToSiteId).HasColumnName("RedirectedTO_SiteID");

                entity.Property(e => e.RedirectedTypeId).HasColumnName("RedirectedType_ID");

                entity.Property(e => e.ShipmentNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.StatusId).HasColumnName("Status_ID");

                entity.Property(e => e.SubstituteReason)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubstituteWhy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubstituteWhyComment)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TcotoolsetSiteId).HasColumnName("TCOToolset_SiteID");

                entity.Property(e => e.TcotoolsetStatus)
                    .HasColumnName("TCOToolsetStatus")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ToolReqId).HasColumnName("TOOL_REQ_ID");

                entity.Property(e => e.ToolsetHistoryHdrId).HasColumnName("ToolsetHistoryHdr_ID");

                entity.Property(e => e.ToolsetId).HasColumnName("Toolset_ID");

                entity.Property(e => e.TroLoadoutId).HasColumnName("TRO_LOADOUT_ID");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.ToTable("tblUser");

                entity.HasIndex(e => e.FirstName)
                    .HasName("XAK_tblUser_FirstName");

                entity.HasIndex(e => e.GinNo)
                    .HasName("XAK_tblUser_GinNo");

                entity.HasIndex(e => e.LastName)
                    .HasName("XAK_tblUser_LastName");

                entity.HasIndex(e => e.Ldapalias)
                    .HasName("XAK2tblUser_LDAP_Alias");

                entity.HasIndex(e => new { e.UserId, e.GinNo, e.Ldapalias, e.LastModifiedDate, e.Active })
                    .HasName("XAK_tblUser_Active");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.GinNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Ldapalias)
                    .IsRequired()
                    .HasColumnName("LDAPAlias")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RefResidentStatusId).HasColumnName("RefResidentStatus_ID");

                entity.Property(e => e.Uid)
                    .HasColumnName("UID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UserSiteId).HasColumnName("User_SiteID");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.HasKey(e => e.PermissionId);

                entity.ToTable("tblPermission");

                entity.Property(e => e.PermissionId).HasColumnName("Permission_ID");
                entity.Property(e => e.IsPermission).HasColumnName("Permission");
                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('DEFAULT')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.PermissionDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PermissionSiteId).HasColumnName("Permission_SiteID");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.RoleId);

                entity.ToTable("tblRole");

                entity.HasIndex(e => e.RoleName)
                    .HasName("XAK1tblRole")
                    .IsUnique();

                entity.Property(e => e.RoleId).HasColumnName("Role_ID");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('DEFAULT')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.RoleDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.RoleSiteId).HasColumnName("Role_SiteID");
            });

            modelBuilder.Entity<RoleObject>(entity =>
            {
                entity.HasKey(e => e.RoleObjectId);

                entity.ToTable("tblRoleObject");

                entity.HasIndex(e => e.ObjectId)
                    .HasName("XAK_tblRoleObject_Object_ID");

                entity.HasIndex(e => e.PermissionId)
                    .HasName("XAK_tblRoleObject_Permission_ID");

                entity.HasIndex(e => new { e.RoleId, e.ObjectId, e.PermissionId })
                    .HasName("INDX_ROLE_ID_OBJ_ID_PERM_ID");

                entity.Property(e => e.RoleObjectId).HasColumnName("RoleObject_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Permission).HasColumnName("permission");

                entity.Property(e => e.PermissionId).HasColumnName("Permission_ID");

                entity.Property(e => e.RoleId).HasColumnName("Role_ID");

                entity.Property(e => e.RoleObjectSiteId).HasColumnName("RoleObject_SiteID");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.RoleObject)
                    .HasForeignKey(d => d.ObjectId)
                    .HasConstraintName("R_Usr02");

                entity.HasOne(d => d.PermissionNavigation)
                    .WithMany(p => p.RoleObject)
                    .HasForeignKey(d => d.PermissionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_Usr03");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleObject)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_Usr01");
            });

            modelBuilder.Entity<UserRoles>(entity =>
            {
                entity.HasKey(e => e.UserRoleId);

                entity.ToTable("tblUserRoles");

                entity.HasIndex(e => new { e.UserId, e.RoleId, e.UserRoleSiteId })
                    .HasName("INDX_tblUserRoles_URSID");

                entity.HasIndex(e => new { e.UserId, e.UserRoleSiteId, e.RoleId })
                    .HasName("INDX_tblUserRoles_User_ID_UserRole_SiteID_Role_ID");

                entity.HasIndex(e => new { e.UserRoleSiteId, e.UserId, e.RoleId, e.Active })
                    .HasName("IX_tblUserRoles_Role_ID_Active");

                entity.HasIndex(e => new { e.UserRoleId, e.UserRoleSiteId, e.Active, e.CreatedBy, e.CreatedDate, e.LastModifiedBy, e.LastModifiedDate, e.UserId, e.RoleId })
                    .HasName("INDX_tblUserRoles_User_ID_Role_ID");

                entity.Property(e => e.UserRoleId).HasColumnName("UserRole_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.CurrentRole).HasColumnName("Current_Role");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.RefLdmsdepartmentId).HasColumnName("RefLDMSDepartment_ID");

                entity.Property(e => e.RefLdmsteamId).HasColumnName("RefLDMSTeam_ID");

                entity.Property(e => e.RoleId).HasColumnName("Role_ID");

                entity.Property(e => e.StraightHours)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.TeamTypeId).HasColumnName("TeamType_ID");

                entity.Property(e => e.UserId).HasColumnName("User_ID");

                entity.Property(e => e.UserRoleSiteId).HasColumnName("UserRole_SiteID");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_Usrs07");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("R_Usrs05");
            });

            modelBuilder.Entity<Object>(entity =>
            {
                entity.HasKey(e => e.ObjectId);

                entity.ToTable("tblObject");

                entity.Property(e => e.ObjectId).HasColumnName("Object_ID");

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('DEFAULT')");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.ObjectName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ObjectSiteId).HasColumnName("Object_SiteID");
            });

            modelBuilder.Entity<MapJobSite>(entity =>
            {
                entity.HasKey(e => e.MapJobSiteId);

                entity.ToTable("tblMapJobSite");

                entity.HasIndex(e => new { e.MapJobSiteSiteId, e.LocationId })
                    .HasName("XAKtblMapJobSite_LocationID_MapjobSiteID");

                entity.HasIndex(e => new { e.MapJobSiteId, e.MapJobSiteSiteId, e.Active, e.LocationId })
                    .HasName("XAKtblMapjObsite_LocationID");

                entity.HasIndex(e => new { e.MapJobSiteId, e.MapJobSiteSiteId, e.LocationId, e.Active })
                    .HasName("INDX_tblMapJobSite_Active");

                entity.Property(e => e.MapJobSiteId).HasColumnName("MapJobSite_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.LocationId).HasColumnName("Location_ID");

                entity.Property(e => e.MapJobSiteSiteId).HasColumnName("MapJobSite_SiteID");

                entity.Property(e => e.TcoControl).HasColumnName("TCO_CONTROL");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasNoKey();
                entity.ToTable("tblRefCountry");
                entity.Property(e => e.Code).HasColumnName("Code").HasColumnType("nvarchar(10)");

                entity.Property(e => e.Name).HasColumnName("Name").HasColumnType("nvarchar(255)");
            });

                modelBuilder.Entity<Company>(entity =>
            {
                entity.HasKey(e => e.CrmId);

                entity.ToTable("COMPANY");

                entity.HasIndex(e => e.CrmId)
                    .HasName("INDX_COMPANY_CRMID");

                entity.HasIndex(e => e.SourceId)
                    .HasName("IDX_Company_IDISTRICTID");

                entity.HasIndex(e => new { e.CrmId, e.Name })
                    .HasName("IX_COMPANY_NAME");

                entity.Property(e => e.CrmId)
                    .HasColumnName("CRM_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Address)
                    .HasColumnName("ADDRESS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.BillingFlag)
                    .HasColumnName("BILLING_FLAG")
                    .HasColumnType("char(1)");

                entity.Property(e => e.City)
                    .HasColumnName("CITY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CorporateAlias)
                    .HasColumnName("CORPORATE_ALIAS")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasColumnType("nchar(50)");

                entity.Property(e => e.Id)
                    .HasColumnName("ID")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Parent)
                    .HasColumnName("PARENT")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.ParentSite)
                    .HasColumnName("PARENT_SITE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Region)
                    .HasColumnName("REGION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Site)
                    .HasColumnName("SITE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Source)
                    .HasColumnName("SOURCE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SOURCE_ID");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<JobHighProfileMatrix>(entity =>
            {
                entity.HasKey(e => e.JobId);

                entity.ToTable("tblJobHighProfileMatrix");

                entity.Property(e => e.JobHighProfileMatrixId)
                    .HasColumnName("JobHighProfileMatrix_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.JobId)
                    .HasColumnName("JOB_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CreatedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CreatedBy")
                    .HasColumnType("nchar(50)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("LastModifiedDate")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("LastModifiedBy")
                    .HasColumnType("nchar(50)");
            });
            modelBuilder.Entity<Loadout>(entity =>
            {
                entity.ToTable("LOADOUT");

                entity.HasIndex(e => e.JobId)
                    .HasName("XAK_LOADOUT_JOB_ID");

                entity.HasIndex(e => e.ToolOrderName)
                    .HasName("NCI_LOADOUT_TO_NAME");

                entity.HasIndex(e => new { e.JobId, e.UpdateDate })
                    .HasName("INDX_LOADOUT_Update_JOb_ID");

                entity.HasIndex(e => new { e.Id, e.LockedDate, e.LockedBy })
                    .HasName("NCI_LOADOUT_LOCKEDBY");

                entity.HasIndex(e => new { e.ParentLoadoutId, e.Active, e.ToolOrderName })
                    .HasName("NCI_LOADOUT_PARENT_LOID_ACTIVE_TO_NAME");

                entity.HasIndex(e => new { e.Id, e.JobId, e.Active, e.ParentLoadoutId, e.ToolOrderName })
                    .HasName("NCI_LO_ACTIVE_PARENT_LO_ID_TO_NAME");

                entity.HasIndex(e => new { e.JobId, e.Active, e.OrderStatus, e.ParentLoadoutId, e.Id })
                    .HasName("IX_Job_ID_active_order_status_parentLoadoutID_ID_status");

                entity.HasIndex(e => new { e.Id, e.JobId, e.Active, e.RedirectDestSiteId, e.ParentLoadoutId, e.OrderStatus })
                    .HasName("ix_LOADOUT_ACTIVE_RedirectDest_SiteIDPARENT_LOADOUT_ID_ORDER_STATUS");

                entity.HasIndex(e => new { e.Id, e.JobId, e.ShipDate, e.Active, e.UpdateDate, e.OrderStatus })
                    .HasName("ix_LOADOUT_ACTIVEUPDATE_DATE_ORDER_STATUS");

                entity.HasIndex(e => new { e.Active, e.Comments, e.JobId, e.OrderStatus, e.RmShipDate, e.VersionNumber, e.Id })
                    .HasName("IX_LOADOUT_");

                entity.HasIndex(e => new { e.ActualShipDate, e.Id, e.JobId, e.OrderStatus, e.ShipDate, e.Active, e.RedirectDestSiteId, e.ParentLoadoutId })
                    .HasName("ix_LOADOUT_ACTIVE_RedirectDest_SiteIDPARENT_LOADOUT_ID");

                entity.HasIndex(e => new { e.Id, e.CreatedUser, e.CreatedDate, e.Qtrac1CrequestId, e.ToolOrderName, e.OrderStatus, e.Is1Ctco, e.Qtrac1Cguid })
                    .HasName("NCI_LO_ORDER_STATUS_is1CTCO_QTrac1CGUID");

                entity.HasIndex(e => new { e.Id, e.JobId, e.Comments, e.VersionNumber, e.RmShipDate, e.ParentLoadoutId, e.Active, e.OrderStatus })
                    .HasName("ix_LOADOUT_PARENT_LOADOUT_ID_ACTIVEORDER_STATUS");

                entity.HasIndex(e => new { e.BhpDrop, e.Comments, e.Id, e.JobId, e.RmShipDate, e.VersionNumber, e.ParentLoadoutId, e.Active, e.OrderStatus })
                    .HasName("IX_LOADOUT_PARENT_ACTIVE_ORDER_ID_JOB_STATUS");

                entity.HasIndex(e => new { e.Id, e.JobId, e.Comments, e.VersionNumber, e.ShipDate, e.ShippingInstructions, e.ActualShipDate, e.RedirectDestSiteId, e.MaintenanceComments, e.RmShipDate, e.Active, e.ParentLoadoutId, e.OrderStatus })
                    .HasName("ix_LOADOUT_ACTIVEPARENT_LOADOUT_ID_ORDER_STATUS");

                entity.HasIndex(e => new { e.ActualShipDate, e.Azimuth, e.BoreHoleId, e.Comments, e.CreatedDate, e.CreatedUser, e.DockName, e.DockPhone, e.EndDate, e.EtraceId, e.HoleSizeId, e.Id, e.JobProbability, e.LoadoutName, e.Luid, e.RedirectDestSiteId, e.RedirectSourceSiteId, e.ShipDate, e.ShipDateStatus, e.ShippingInstructions, e.StartDate, e.SubmittedByDate, e.SubmittedByGin, e.Template, e.UpdateDate, e.UpdateUser, e.VersionNumber, e.JobId, e.Active, e.OrderStatus, e.ParentLoadoutId })
                    .HasName("INDX_LOUT_JOBIDACTORDSTSPRNTLOID");

                entity.HasIndex(e => new { e.Luid, e.LoadoutName, e.JobId, e.StartDate, e.EndDate, e.HoleSizeId, e.Azimuth, e.Comments, e.VersionNumber, e.ShipDate, e.ShipDateStatus, e.ShippingInstructions, e.SubmittedByGin, e.SubmittedByDate, e.CreatedUser, e.CreatedDate, e.UpdateUser, e.UpdateDate, e.Template, e.ActualShipDate, e.EtraceId, e.DockPhone, e.DockName, e.JobProbability, e.ParentLoadoutId, e.OrderStatus, e.BoreHoleId, e.RedirectSourceSiteId, e.RedirectDestSiteId, e.Id, e.Active })
                    .HasName("INDX_LOUT_IDACTIVESTS");

                entity.HasIndex(e => new { e.Luid, e.LoadoutName, e.StartDate, e.EndDate, e.HoleSizeId, e.Azimuth, e.Comments, e.VersionNumber, e.ShipDate, e.ShipDateStatus, e.ShippingInstructions, e.SubmittedByGin, e.SubmittedByDate, e.CreatedUser, e.CreatedDate, e.UpdateUser, e.UpdateDate, e.Template, e.ActualShipDate, e.EtraceId, e.DockPhone, e.DockName, e.JobProbability, e.ParentLoadoutId, e.Active, e.OrderStatus, e.BoreHoleId, e.RedirectDestSiteId, e.Id, e.JobId, e.RedirectSourceSiteId })
                    .HasName("INDX_LOUT_IDJOBIDREDIR");

                entity.HasIndex(e => new { e.Id, e.Luid, e.JobId, e.StartDate, e.EndDate, e.StartDepthMdDrop, e.EndDepthMdDrop, e.EndDepthTvdDrop, e.HoleSizeId, e.PlannedFlowRateDrop, e.InclinationDrop, e.Azimuth, e.MudTypeDrop, e.MudDensityDrop, e.MudViscosityDrop, e.BhtDrop, e.StatusDrop, e.Comments, e.VersionNumber, e.ShipDate, e.ShipDateStatus, e.ShippingInstructions, e.SubmittedByGin, e.SubmittedByDate, e.CreatedUser, e.CreatedDate, e.UpdateUser, e.UpdateDate, e.Template, e.ActualShipDate, e.InspectionCompanyDrop, e.MonitoringCompanyDrop, e.InspectionLevelDrop, e.InspectionPaperworkDrop, e.BhpDrop, e.EtraceId, e.HighPressureDrop, e.HighTemperatureDrop, e.TruckingCompanyDrop, e.DockPhone, e.DockName, e.JobProbability, e.ParentLoadoutId, e.Active, e.OrderStatus, e.BoreHoleId, e.RedirectSourceSiteId, e.RedirectDestSiteId, e.LockedBy, e.LockedDate, e.LockedBySite, e.LockType, e.MaintenanceComments, e.RmShipDate, e.MonelId, e.MagSpacingDrop, e.BhStaticTemperatureDrop, e.MaxDlsDrop, e.HighShockDrop, e.HighCorrosiveDrop, e.DoglegDrop, e.BitTypeDrop, e.SurfTempDrop, e.MudPv, e.MudPvTempDrop, e.StandPressDrop, e.SeaDepDrop, e.MaxwellDrop, e.HspmDrop, e.Rx5, e.PlannedFlowRateMinDrop, e.Is1Ctco, e.Qtrac1Cguid, e.Qtrac1CrequestId, e.Dmlocation, e.ToolOrderName, e.IsHsh, e.ToolVersion, e.ShipDateVersion, e.LoadoutName })
                    .HasName("NCI_LOADOUT_LOADOUT_NAME");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.ActualShipDate)
                    .HasColumnName("ACTUAL_SHIP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Azimuth).HasColumnName("AZIMUTH_DROP");

                entity.Property(e => e.BhStaticTemperatureDrop).HasColumnName("BH_Static_Temperature_DROP");

                entity.Property(e => e.BhpDrop).HasColumnName("BHP_DROP");

                entity.Property(e => e.BhtDrop).HasColumnName("BHT_DROP");

                entity.Property(e => e.BitTypeDrop)
                    .HasColumnName("Bit_Type_DROP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.BoreHoleId).HasColumnName("BORE_HOLE_ID");

                entity.Property(e => e.Comments)
                    .HasColumnName("COMMENTS_DROP")
                    .HasMaxLength(2000);

                entity.Property(e => e.County)
                    .HasColumnName("County_Drop")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50);

                entity.Property(e => e.Dmlocation)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DockName)
                    .HasColumnName("DOCK_NAME_DROP")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.DockPhone)
                    .HasColumnName("DOCK_PHONE_DROP")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DoglegDrop).HasColumnName("DOGLEG_DROP");

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EndDepthMdDrop).HasColumnName("END_DEPTH_MD_DROP");

                entity.Property(e => e.EndDepthTvdDrop).HasColumnName("END_DEPTH_TVD_DROP");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.HighCorrosiveDrop).HasColumnName("HIGH_CORROSIVE_DROP");

                entity.Property(e => e.HighPressureDrop).HasColumnName("HIGH_PRESSURE_DROP");

                entity.Property(e => e.HighShockDrop).HasColumnName("HIGH_SHOCK_DROP");

                entity.Property(e => e.HighTemperatureDrop).HasColumnName("HIGH_TEMPERATURE_DROP");

                entity.Property(e => e.HoleSizeId).HasColumnName("HOLE_SIZE_ID");

                entity.Property(e => e.HspmDrop).HasColumnName("HSPM_DROP");

                entity.Property(e => e.InclinationDrop).HasColumnName("INCLINATION_DROP");

                entity.Property(e => e.InspectionCompanyDrop)
                    .HasColumnName("INSPECTION_COMPANY_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionLevelDrop)
                    .HasColumnName("INSPECTION_LEVEL_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.InspectionPaperworkDrop)
                    .HasColumnName("INSPECTION_PAPERWORK_DROP")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Is1Ctco).HasColumnName("is1CTCO");

                entity.Property(e => e.IsHsh).HasColumnName("IsHSh");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.JobProbability)
                    .HasColumnName("Job_Probability")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LoadoutName)
                    .HasColumnName("LOADOUT_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockType)
                    .HasColumnName("Lock_Type")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.LockedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockedBySite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LockedDate).HasColumnType("datetime");

                entity.Property(e => e.Luid).HasColumnName("LUID");

                entity.Property(e => e.MagSpacingDrop).HasColumnName("Mag_Spacing_DROP");

                entity.Property(e => e.MaintenanceComments)
                    .HasColumnName("Maintenance_Comments")
                    .HasMaxLength(4000)
                    .IsUnicode(false);

                entity.Property(e => e.MaxDlsDrop).HasColumnName("Max_DLS_DROP");

                entity.Property(e => e.MaxwellDrop).HasColumnName("MAXWELL_DROP");

                entity.Property(e => e.MonelId).HasColumnName("Monel_ID");

                entity.Property(e => e.MonitoringCompanyDrop)
                    .HasColumnName("MONITORING_COMPANY_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MudDensityDrop).HasColumnName("MUD_DENSITY_DROP");

                entity.Property(e => e.MudPv).HasColumnName("MUD_PV");

                entity.Property(e => e.MudPvTempDrop).HasColumnName("MUD_PV_TEMP_DROP");

                entity.Property(e => e.MudTypeDrop)
                    .HasColumnName("MUD_TYPE_DROP")
                    .HasMaxLength(75)
                    .IsUnicode(false);

                entity.Property(e => e.MudViscosityDrop).HasColumnName("MUD_VISCOSITY_DROP");

                entity.Property(e => e.OrderStatus)
                    .HasColumnName("ORDER_STATUS")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ParentLoadoutId).HasColumnName("PARENT_LOADOUT_ID");

                entity.Property(e => e.PlannedFlowRateDrop).HasColumnName("PLANNED_FLOW_RATE_DROP");

                entity.Property(e => e.PlannedFlowRateMinDrop).HasColumnName("PLANNED_FLOW_RATE_MIN_DROP");

                entity.Property(e => e.Qtrac1Cguid)
                    .HasColumnName("QTrac1CGUID")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Qtrac1CrequestId)
                    .HasColumnName("QTrac1CRequestID")
                    .HasMaxLength(50);

                entity.Property(e => e.RedirectDestSiteId).HasColumnName("RedirectDest_SiteID");

                entity.Property(e => e.RedirectSourceSiteId).HasColumnName("RedirectSource_SiteID");

                entity.Property(e => e.RmShipDate)
                    .HasColumnName("RM_SHIP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Rx5).HasColumnName("RX5");

                entity.Property(e => e.SeaDepDrop).HasColumnName("SEA_DEP_DROP");

                entity.Property(e => e.ShipDate)
                    .HasColumnName("SHIP_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.ShipDateStatus)
                    .HasColumnName("SHIP_DATE_STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('Estimate')");

                entity.Property(e => e.ShipDateVersion).HasColumnName("SHIP_DATE_VERSION");

                entity.Property(e => e.ShippingInstructions)
                    .HasColumnName("SHIPPING_INSTRUCTIONS_DROP")
                    .HasMaxLength(2000);

                entity.Property(e => e.StandPressDrop).HasColumnName("STAND_PRESS_DROP");

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.StartDepthMdDrop).HasColumnName("START_DEPTH_MD_DROP");

                entity.Property(e => e.StatusDrop)
                    .HasColumnName("Status_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SubmittedByDate)
                    .HasColumnName("SUBMITTED_BY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SubmittedByGin).HasColumnName("SUBMITTED_BY_GIN");

                entity.Property(e => e.SurfTempDrop).HasColumnName("SURF_TEMP_DROP");

                entity.Property(e => e.Template).HasColumnName("TEMPLATE");

                entity.Property(e => e.ToolOrderName)
                    .HasColumnName("TOOL_ORDER_NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ToolVersion).HasColumnName("TOOL_VERSION");

                entity.Property(e => e.TruckingCompanyDrop)
                    .HasColumnName("TRUCKING_COMPANY_DROP")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50);

                entity.Property(e => e.VersionNumber)
                    .HasColumnName("VERSION_NUMBER")
                    .HasDefaultValueSql("((1))");

                entity.HasMany(c => c.LoadoutTools)
                    .WithOne(x => x.Loadout)
                    .HasForeignKey(c => c.LoadoutId);

                entity.HasOne(c => c.Job).WithMany(c => c.Loadouts).HasForeignKey(c => c.JobId);
            });

            modelBuilder.Entity<LoadoutTool>(entity =>
            {
                entity.ToTable("LOADOUT_TOOL");

                entity.HasIndex(e => new { e.Id, e.DefaultRedirectSite, e.DefaultRedirectType })
                    .HasName("IX_LOADOUT_TOOL_ID_DefaultRedirectSite_Type");

                entity.HasIndex(e => new { e.Id, e.LoadoutId, e.ToolMasterId })
                    .HasName("IX_LOADOUT_TOOL_ID_LOADOUT_TOOLMASTER");

                entity.HasIndex(e => new { e.LoadoutId, e.Id, e.ToolMasterId })
                    .HasName("IX_LOADOUT_TOOL_IDToolMasterIDLoadoutID");

                entity.HasIndex(e => new { e.AvailableQuantity, e.EndDate, e.EtraceId, e.Id, e.Quantity, e.RequestedQuantity, e.StartDate, e.Template, e.ToolMasterId, e.UpdateDate, e.UpdateUser, e.LoadoutId })
                    .HasName("INDX_LOT_LOID");

                entity.HasIndex(e => new { e.Id, e.LoadoutId, e.Quantity, e.UpdateUser, e.UpdateDate, e.Template, e.StartDate, e.EndDate, e.AvailableQuantity, e.RequestedQuantity, e.EtraceId, e.ToolMasterId })
                    .HasName("INDX_LOT_TMID");

                entity.HasIndex(e => new { e.Id, e.Quantity, e.UpdateUser, e.UpdateDate, e.Template, e.StartDate, e.EndDate, e.AvailableQuantity, e.RequestedQuantity, e.EtraceId, e.LoadoutId, e.ToolMasterId })
                    .HasName("AK1LOADOUT_TOOL_LOUT_TM_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.AvailableQuantity).HasColumnName("AVAILABLE_QUANTITY");

                entity.Property(e => e.DefaultRedirectSite)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate)
                    .HasColumnName("END_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.ImageId).HasColumnName("IMAGE_ID");

                entity.Property(e => e.LeftImageAttachmentId).HasColumnName("LeftImageAttachment_ID");

                entity.Property(e => e.LoadoutId).HasColumnName("LOADOUT_ID");

                entity.Property(e => e.Quantity)
                    .HasColumnName("QUANTITY")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RequestedQuantity).HasColumnName("REQUESTED_QUANTITY");

                entity.Property(e => e.SignalComment)
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.Signalstrength)
                    .HasColumnName("SIGNALSTRENGTH")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate)
                    .HasColumnName("START_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Template).HasColumnName("TEMPLATE");

                entity.Property(e => e.ToolMasterId).HasColumnName("TOOL_MASTER_ID");

                entity.Property(e => e.TubularTool).HasColumnName("Tubular_Tool");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50);

                entity.HasMany(c => c.ToolSets).WithOne(c => c.LoadoutTool);
            });
            modelBuilder.Entity<Rig>(entity =>
            {
                entity.ToTable("RIG");

                entity.HasIndex(e => e.SourceId)
                    .HasName("IDX_RIG_IDITRICTID");

                entity.HasIndex(e => new { e.CrmId, e.RigTypeId })
                    .HasName("IDX_RIG_CRMID");

                entity.HasIndex(e => new { e.Active, e.Description, e.Email, e.IpAddress, e.Name, e.PhoneNumber, e.RigTypeId, e.SiebelId, e.SourceId, e.Id })
                    .HasName("INDX_RIG_ID");

                entity.HasIndex(e => new { e.Id, e.Description, e.RigTypeId, e.PhoneNumber, e.Email, e.Active, e.UpdateUser, e.UpdateDate, e.CreatedUser, e.CreatedDate, e.IpAddress, e.SiebelId, e.SourceId, e.CrmId, e.CrmRigType, e.CrmRigName, e.CrmRigLocation, e.Name })
                    .HasName("INDX_RIG_NAME");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.AltRigName)
                    .HasColumnName("ALT_RIG_NAME")
                    .HasMaxLength(510);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50);

                entity.Property(e => e.CrmId)
                    .HasColumnName("CRM_ID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CrmRigLocation)
                    .HasColumnName("CRM_RIG_LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CrmRigName)
                    .HasColumnName("CRM_RIG_NAME")
                    .HasMaxLength(600);

                entity.Property(e => e.CrmRigType)
                    .HasColumnName("CRM_RIG_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(1000);

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(100);

                entity.Property(e => e.IpAddress)
                    .HasColumnName("IP_ADDRESS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(255);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("PHONE_NUMBER")
                    .HasMaxLength(50);

                entity.Property(e => e.RigTypeId)
                    .HasColumnName("RIG_TYPE_ID")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.SiebelId)
                    .HasColumnName("SiebelID")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.SourceId).HasColumnName("SOURCE_ID");

                entity.Property(e => e.SourceSystem)
                    .HasColumnName("Source_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<RProductGroup>(entity =>
            {
                entity.ToTable("R_PRODUCT_GROUP");

                entity.HasIndex(e => e.ProductLineId)
                    .HasName("AK1R_PRODUCT_GROUP_PRODUCT_LINE_ID");

                entity.HasIndex(e => new { e.Name, e.ProductLineId, e.Id })
                    .HasName("IXR_PRODUCT_GROUP_ID_PRDLN_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Created)
                    .HasColumnName("CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EomrFlag).HasColumnName("EOMR_FLAG");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ProductLineId).HasColumnName("PRODUCT_LINE_ID");

                entity.Property(e => e.RpgTestId).HasColumnName("RPG_TEST_ID");

                entity.Property(e => e.Updated)
                    .HasColumnName("UPDATED")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<RProductLine>(entity =>
            {
                entity.ToTable("R_PRODUCT_LINE");

                entity.HasIndex(e => new { e.Name, e.Id })
                    .HasName("IX_R_PRODUCT_LINE_ID_Name");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Created)
                    .HasColumnName("CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EomrFlag).HasColumnName("EOMR_FLAG");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RplTestId).HasColumnName("RPL_TEST_ID");

                entity.Property(e => e.Updated)
                    .HasColumnName("UPDATED")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<RToolMaster>(entity =>
            {
                entity.ToTable("R_TOOL_MASTER");

                entity.HasIndex(e => e.Active)
                    .HasName("INDX_R_TOOL_MASTER_ACTIVE");

                entity.HasIndex(e => e.ProductGroupId)
                    .HasName("AK1R_TOOL_MASTER_PRODUCT_GROUP_ID");

                entity.HasIndex(e => new { e.Id, e.Name });

                entity.HasIndex(e => new { e.Id, e.ProductGroupId })
                    .HasName("IX_R_TOOL_MASTER_id_productGroupID");

                entity.HasIndex(e => new { e.ProductGroupId, e.Id })
                    .HasName("IX_R_TOOL_MASTER");

                entity.HasIndex(e => new { e.Description, e.Id, e.ProductGroupId, e.Name })
                    .HasName("IX_R_TOOL_MASTER_ID_PRODUCT_GROUP_ID_NAME");

                entity.HasIndex(e => new { e.Id, e.ProductGroupId, e.Name, e.Updated, e.Active })
                    .HasName("NCI_R_TOOL_MASTER_ACTIVE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Abbreviation)
                    .HasColumnName("ABBREVIATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Created)
                    .HasColumnName("CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.InnerDiameter).HasColumnName("INNER_DIAMETER");

                entity.Property(e => e.Length).HasColumnName("LENGTH");

                entity.Property(e => e.MaxOuterDiameter).HasColumnName("MAX_OUTER_DIAMETER");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OuterDiameter).HasColumnName("OUTER_DIAMETER");

                entity.Property(e => e.ProductGroupId).HasColumnName("PRODUCT_GROUP_ID");

                entity.Property(e => e.ToolImageId).HasColumnName("Tool_Image_ID");

                entity.Property(e => e.ToolSize)
                    .HasColumnName("Tool_Size")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TubularTool).HasColumnName("Tubular_Tool");

                entity.Property(e => e.Updated)
                    .HasColumnName("UPDATED")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<Sdmcell>(entity =>
            {
                entity.ToTable("SDMCell");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Createddate)
                    .HasColumnName("CREATEDDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");

                entity.Property(e => e.IDistrictId).HasColumnName("iDistrict_ID");

                entity.Property(e => e.Modifiedby)
                    .HasColumnName("MODIFIEDBY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Modifieddate)
                    .HasColumnName("MODIFIEDDATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.SdmcellName)
                    .HasColumnName("SDMCellName")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<Well>(entity =>
            {
                entity.ToTable("WELL");

                entity.HasIndex(e => e.SourceId)
                    .HasName("IDX_WELL_IDISTRICT_ID");

                entity.HasIndex(e => new { e.Id, e.Name });

                entity.HasIndex(e => new { e.Active, e.Country, e.County, e.CreatedDate, e.CreatedUser, e.FieldName, e.Id, e.Latitude, e.Location, e.Longitude, e.SiebelId, e.SourceId, e.SpudDate, e.State, e.UpdateDate, e.UpdateUser, e.Uwi, e.WellNumber, e.Name })
                    .HasName("XAK_Well_Name");

                entity.HasIndex(e => new { e.Name, e.Uwi, e.Location, e.SpudDate, e.Latitude, e.Longitude, e.FieldName, e.Active, e.UpdateUser, e.UpdateDate, e.CreatedUser, e.CreatedDate, e.County, e.State, e.Country, e.WellNumber, e.SiebelId, e.SourceId, e.Id })
                    .HasName("INDX_WELL_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.County)
                    .HasColumnName("COUNTY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FieldName)
                    .HasColumnName("FIELD_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Latitude)
                    .HasColumnName("LATITUDE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasColumnName("LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Longitude)
                    .HasColumnName("LONGITUDE")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnName("NAME")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SiebelId)
                    .HasColumnName("SiebelID")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SourceId).HasColumnName("SOURCE_ID");

                entity.Property(e => e.SourceSystem)
                    .HasColumnName("Source_System")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SpudDate)
                    .HasColumnName("SPUD_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.State)
                    .HasColumnName("STATE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Uwi)
                    .HasColumnName("UWI")
                    .HasMaxLength(64)
                    .IsUnicode(false);

                entity.Property(e => e.WellNumber)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.WellType)
                    .HasColumnName("WELL_TYPE")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });
#pragma warning disable 618
            modelBuilder.Query<PivotTCOData>(entity =>
#pragma warning restore 618
            {
                entity.ToView("vwpivottcodata");
                entity.Property(v => v.LoadoutId).HasColumnName("loadout_id");
                entity.Property(v => v.HSPMVersion).HasColumnName("HSPM_version");
                entity.Property(v => v.HeisenbergVersion).HasColumnName("Heisenberg_Version");
                entity.Property(v => v.Status).HasColumnName("Status");
                entity.Property(v => v.MudType).HasColumnName("MUD_TYPE");
                entity.Property(v => v.StartDepthMD).HasColumnName("START_DEPTH_MD");
                entity.Property(v => v.RX56).HasColumnName("RX 5/6");
                entity.Property(v => v.MaxwellVersion).HasColumnName("Maxwell_Version");
                entity.Property(v => v.MonitoringCompany).HasColumnName("MONITORING_COMPANY");
                entity.Property(v => v.InspectionCompany).HasColumnName("INSPECTION_COMPANY");
                entity.Property(v => v.InspectionLevel).HasColumnName("INSPECTION_LEVEL");
                entity.Property(v => v.InspectionPaperWork).HasColumnName("INSPECTION_PAPERWORK");
                entity.Property(v => v.EndDepthMD).HasColumnName("END_DEPTH_MD");
                entity.Property(v => v.EndDepthTVD).HasColumnName("END_DEPTH_TVD");
                entity.Property(v => v.SeaDep).HasColumnName("SEA_DEP");
                entity.Property(v => v.PlannedFlowRate).HasColumnName("PLANNED_FLOW_RATE");
                entity.Property(v => v.PlannedFlowRateMin).HasColumnName("PLANNED_FLOW_RATE_MIN");
                entity.Property(v => v.Inclination).HasColumnName("INCLINATION");
                entity.Property(v => v.MudDensity).HasColumnName("MUD_DENSITY");
                entity.Property(v => v.MudViscosity).HasColumnName("MUD_VISCOSITY");
                entity.Property(v => v.BHT).HasColumnName("BHT");
                entity.Property(v => v.BHP).HasColumnName("BHP");
                entity.Property(v => v.HighPressure).HasColumnName("HIGH_PRESSURE");
                entity.Property(v => v.HighTemperature).HasColumnName("HIGH_TEMPERATURE");
                entity.Property(v => v.TruckingCompany).HasColumnName("TRUCKING_COMPANY");
                entity.Property(v => v.MagSpacing).HasColumnName("Mag_spacing");
                entity.Property(v => v.DogLeg).HasColumnName("DOGLEG");
                entity.Property(v => v.HighCorrosive).HasColumnName("HIGH_CORROSIVE");
                entity.Property(v => v.HighShock).HasColumnName("HIGH_SHOCK");
                entity.Property(v => v.MaxDLS).HasColumnName("Max_DLS");
                entity.Property(v => v.BHStaticTemperature).HasColumnName("BH_Static_Temperature");
                entity.Property(v => v.SurfTemp).HasColumnName("SURF_TEMP");
                entity.Property(v => v.MudPVTemp).HasColumnName("MUD_PV_TEMP");
                entity.Property(v => v.MudPV).HasColumnName("Mud_Pv");
                entity.Property(v => v.BitType).HasColumnName("Bit_Type");
                entity.Property(v => v.StandPress).HasColumnName("STAND_PRESS");
                entity.Property(v => v.DockName).HasColumnName("DOCK_NAME");
                entity.Property(v => v.DockPhone).HasColumnName("DOCK_PHONE");
                entity.Property(v => v.ShippingInstructions).HasColumnName("SHIPPING_INSTRUCTIONS");
                entity.Property(v => v.Azimuth).HasColumnName("AZIMUTH");
                entity.Property(v => v.County).HasColumnName("COUNTY");
                entity.Property(v => v.Comments).HasColumnName("COMMENTS");
            });
            modelBuilder.Entity<RefEqpStatus>(entity =>
            {
                entity.HasKey(e => e.RefEqpStatusId);

                entity.ToTable("tblRefEqpStatus");

                entity.HasIndex(e => new { e.EqpStatus, e.RefEqpStatusId })
                    .HasName("INDX_REqpStatus_IDEqpStatus");

                entity.Property(e => e.RefEqpStatusId).HasColumnName("RefEqpStatus_ID");

                entity.Property(e => e.EqpStatus)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<RControl>(entity =>
            {
                entity.ToTable("R_CONTROL");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.CreatedBy)
                    .HasColumnName("CREATED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DisplayWidth).HasColumnName("DISPLAY_WIDTH");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.LastmodifiedBy)
                    .HasColumnName("LASTMODIFIED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MessageActive).HasColumnName("MESSAGE_ACTIVE");

                entity.Property(e => e.MessgaeDisplay)
                    .HasColumnName("MESSGAE_DISPLAY")
                    .HasMaxLength(500);

                entity.Property(e => e.ParentId).HasColumnName("PARENT_ID");

                entity.Property(e => e.RMasterAttributeId).HasColumnName("R_MASTER_ATTRIBUTE_ID");

                entity.Property(e => e.RToolOptionTypeId).HasColumnName("R_TOOL_OPTION_TYPE_ID");

                entity.Property(e => e.ToolTip).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate)
                    .HasColumnName("UPDATED_DATE")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<RDimension>(entity =>
            {
                entity.ToTable("R_DIMENSION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TypeCode)
                    .HasColumnName("Type_Code")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<RMasterAttribute>(entity =>
            {
                entity.ToTable("R_MASTER_ATTRIBUTE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasColumnName("CREATED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DefaultUom)
                    .HasColumnName("DEFAULT_UOM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedBy)
                    .HasColumnName("LASTMODIFIED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedDate)
                    .HasColumnName("LASTMODIFIED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .HasColumnName("NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OptionName)
                    .HasColumnName("OPTION_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.RDimensionId).HasColumnName("R_DIMENSION_ID");

                entity.Property(e => e.RMasterAttributeTypeId).HasColumnName("R_MASTER_ATTRIBUTE_TYPE_ID");
            });
            modelBuilder.Entity<RTcoConfiguration>(entity =>
            {
                entity.ToTable("R_TCO_CONFIGURATION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.CreatedBy)
                    .HasColumnName("CREATED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.JobType)
                    .HasColumnName("JOB_TYPE")
                    .HasMaxLength(500);

                entity.Property(e => e.LastmodifiedBy)
                    .HasColumnName("LASTMODIFIED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedDate)
                    .HasColumnName("LASTMODIFIED_DATE")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<RTcoOption>(entity =>
            {
                entity.ToTable("R_TCO_OPTION");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActivationDate)
                    .HasColumnName("ACTIVATION_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasColumnName("CREATED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.DefaultValueFormula)
                    .HasColumnName("DEFAULT_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.ExpiryDate)
                    .HasColumnName("EXPIRY_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.IsMandatory).HasColumnName("IS_Mandatory");

                entity.Property(e => e.IsReadOnly).HasColumnName("Is_ReadOnly");

                entity.Property(e => e.LastmodifiedBy)
                    .HasColumnName("LASTMODIFIED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedDate)
                    .HasColumnName("LASTMODIFIED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.MaxValueFormula)
                    .HasColumnName("MAX_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MinValueFormula)
                    .HasColumnName("MIN_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);
                entity.Property(e => e.Active).HasColumnName("ACTIVE");
                entity.Property(e => e.DisplayName).HasColumnName("Display_Name");
                entity.Property(e => e.Group).HasColumnName("GROUP");
                entity.Property(e => e.HeaderType).HasColumnName("HeaderType");

                entity.Property(e => e.RControlId).HasColumnName("R_CONTROL_ID");

                entity.Property(e => e.RMasterAttributeId).HasColumnName("R_MASTER_ATTRIBUTE_ID");

                entity.Property(e => e.RTcoConfigurationId).HasColumnName("R_TCO_CONFIGURATION_ID");
            });
            modelBuilder.Entity<RToolOptions>(entity =>
            {
                entity.ToTable("R_TOOL_OPTIONS");

                entity.HasIndex(e => e.OptionName)
                    .HasName("NCI_R_TOOL_OPTIONS_OPTION_NAME");

                entity.HasIndex(e => new { e.Id, e.OptionName })
                    .HasName("NCI_R_TOOL_OPTIONS_ID_Name");

                entity.HasIndex(e => new { e.OptionName, e.ToolMasterId, e.Id, e.Group })
                    .HasName("IX_R_TOOL_MASTER_TOOL_MASTER_ID_ID_ROW_COLUMN_GROUP");

                entity.HasIndex(e => new { e.ToolMasterId, e.OptionName, e.Group, e.Active, e.DisplayOptionName })
                    .HasName("NCI_R_TOOL_OPTIONS_Active_DISPLAY_OPTION_NAME");

                entity.HasIndex(e => new { e.Id, e.Active, e.OptionDisplayWidth, e.DisplayOptionName, e.DisplayOptionValue, e.DisplayOnImage, e.PositionOnLeft, e.PositionOnImage, e.AbbreviatedName, e.Remarks, e.Mandatory, e.ToolMasterId, e.Group, e.OptionName })
                    .HasName("IX_R_TOOL_OPTIONS_uspPopulateOptionsGrid_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AbbreviatedName)
                    .HasColumnName("ABBREVIATED_NAME")
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ColumnDrop).HasColumnName("COLUMN_DROP");

                entity.Property(e => e.Created)
                    .HasColumnName("CREATED")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultValueFormula)
                    .HasColumnName("DEFAULT_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.DisplayOnImage).HasColumnName("DISPLAY_ON_IMAGE");

                entity.Property(e => e.DisplayOptionName).HasColumnName("DISPLAY_OPTION_NAME");

                entity.Property(e => e.DisplayOptionValue).HasColumnName("DISPLAY_OPTION_VALUE");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.Group).HasColumnName("GROUP");

                entity.Property(e => e.IsMocRequired).HasColumnName("Is_MOC_Required");

                entity.Property(e => e.IsReadOnly).HasColumnName("Is_ReadOnly");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.MaxValueFormula)
                    .HasColumnName("MAX_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.MinValueFormula)
                    .HasColumnName("MIN_VALUE_FORMULA")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.OptionDisplayWidth).HasColumnName("OPTION_DISPLAY_WIDTH");

                entity.Property(e => e.OptionListCodeDrop)
                    .HasColumnName("OPTION_LIST_CODE_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.OptionName)
                    .HasColumnName("OPTION_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.OptionTypeDrop)
                    .HasColumnName("OPTION_TYPE_DROP")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.PositionOnImage).HasColumnName("POSITION_ON_IMAGE");

                entity.Property(e => e.PositionOnLeft).HasColumnName("POSITION_ON_LEFT");

                entity.Property(e => e.RControlId).HasColumnName("R_CONTROL_ID");

                entity.Property(e => e.RDimensionId).HasColumnName("R_Dimension_ID");

                entity.Property(e => e.Remarks)
                    .HasColumnName("REMARKS")
                    .HasColumnType("varchar(max)");

                entity.Property(e => e.RowDrop).HasColumnName("ROW_DROP");

                entity.Property(e => e.ShowInShortDesc).HasColumnName("SHOW_IN_SHORT_DESC");

                entity.Property(e => e.ToolMasterId).HasColumnName("TOOL_MASTER_ID");

                entity.Property(e => e.Updated)
                    .HasColumnName("UPDATED")
                    .HasColumnType("datetime");
            });
            modelBuilder.Entity<TcoData>(entity =>
            {
                entity.ToTable("TCO_DATA");

                entity.HasIndex(e => e.LoadoutId)
                    .HasName("IX_TCO_DATA_LoadOut_ID");

                entity.HasIndex(e => e.RMasterAttributeId)
                    .HasName("NCI_TCO_DATA_R_MASTER_ATTRIBUTE_ID");

                entity.HasIndex(e => new { e.LoadoutId, e.RMasterAttributeId })
                    .HasName("NCI_TCO_DATA_R_MASTER_ATTRIBUTE_ID_LOID");

                entity.HasIndex(e => new { e.RMasterValueId, e.LoadoutId, e.RMasterAttributeId })
                    .HasName("NCI_TCO_DATA_R_MASTER_ATTRIBUTE_ID_ValueID_LOID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .HasColumnName("CREATED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CustValue)
                    .HasColumnName("CUST_VALUE")
                    .HasMaxLength(2500)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedBy)
                    .HasColumnName("LASTMODIFIED_BY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LastmodifiedDate)
                    .HasColumnName("LASTMODIFIED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.LoadoutId).HasColumnName("LOADOUT_ID");

                entity.Property(e => e.RMasterAttributeId).HasColumnName("R_MASTER_ATTRIBUTE_ID");

                entity.Property(e => e.RMasterValueId).HasColumnName("R_MASTER_VALUE_ID");

                entity.Property(e => e.RTcoOptionId).HasColumnName("R_TCO_OPTION_ID");
            });

            modelBuilder.Entity<LoadoutToolOptions>(entity =>
            {
                entity.ToTable("LOADOUT_TOOL_OPTIONS");

                entity.HasIndex(e => e.LoadoutImageMappingId);

                entity.HasIndex(e => e.RMasterAttributeId)
                    .HasName("NCI_LO_TOOL_OPT_R_MASTER_ATT_ID");

                entity.HasIndex(e => new { e.LoadoutToolId, e.ToolOptionId })
                    .HasName("AK1LOADOUT_TOOL_OPTIONS_LOUT_ID_TOPTION_ID");

                entity.HasIndex(e => new { e.OptionValue, e.LoadoutToolId, e.Id, e.ToolOptionId })
                    .HasName("IX_LOADOUT_TOOL_OPTIONS_LOADOUT_TOOL_ID_ID_TOOL_OPTION_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DisplayOnImage).HasColumnName("DISPLAY_ON_IMAGE");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.LoadoutImageMappingId).HasColumnName("LOADOUT_IMAGE_MAPPING_ID");

                entity.Property(e => e.LoadoutToolId).HasColumnName("LOADOUT_TOOL_ID");

                entity.Property(e => e.MessageDisplay)
                    .HasColumnName("MESSAGE_DISPLAY")
                    .HasMaxLength(500);

                entity.Property(e => e.OptionValue)
                    .HasColumnName("OPTION_VALUE")
                    .HasMaxLength(1000)
                    .IsUnicode(false);

                entity.Property(e => e.PositionOnImage).HasColumnName("POSITION_ON_IMAGE");

                entity.Property(e => e.PositionOnLeft).HasColumnName("POSITION_ON_LEFT");

                entity.Property(e => e.RMasterAttributeId).HasColumnName("R_MASTER_ATTRIBUTE_ID");

                entity.Property(e => e.RMasterValueId).HasColumnName("R_MASTER_VALUE_ID");

                entity.Property(e => e.ToolOptionId).HasColumnName("TOOL_OPTION_ID");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<LoadoutModificationDetails>(entity =>
            {
                entity.ToTable("LOADOUT_MODIFICATION_DETAILS");

                entity.HasIndex(e => e.LogId)
                    .HasName("INDX_LOADOUT_MODIFICATION_DETAILS_LOG_ID");

                entity.HasIndex(e => new { e.TCOToolsetId, e.UpdateDate, e.Type })
                    .HasName("IX_LOADOUT_MODIFICATION_DETAILS_TCOToolset_ID_UPDATE_DATE_TYPE");

                entity.HasIndex(e => new { e.Type, e.TCOToolsetId })
                    .HasName("IX_LOADOUT_MODIFICATION_DETAILS_Type_TCOToolSet_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LogId).HasColumnName("LOG_ID");

                entity.Property(e => e.Type).HasColumnName("TYPE").HasMaxLength(50);

                entity.Property(e => e.Label).HasColumnName("LABEL");

                entity.Property(e => e.Action).HasColumnName("ACTION").HasMaxLength(50);

                entity.Property(e => e.OldValue).HasColumnName("OLD_VALUE");

                entity.Property(e => e.NewValue).HasColumnName("NEW_VALUE");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50);

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.TCOToolsetId).HasColumnName("TCOToolset_ID");

                entity.Property(e => e.AttributeId).HasColumnName("ATTRIBUTE_ID");
            });

            modelBuilder.Entity<RefUom>(entity =>
            {
                entity.HasKey(e => e.RefUomId);

                entity.ToTable("tblRefUOM");

                entity.HasIndex(e => e.DisplayUom)
                    .HasName("INDX_RUOM_DisplayUOM");

                entity.HasIndex(e => new { e.Active, e.DisplayUom, e.Factor, e.Offset1, e.Offset2, e.RefUomSiteId, e.Si, e.Uomcode, e.Uomname, e.RefUomId })
                    .HasName("INDX_tblRefUOM_ID");

                entity.Property(e => e.RefUomId).HasColumnName("RefUOM_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.DisplayUom)
                    .IsRequired()
                    .HasColumnName("DisplayUOM")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Factor)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.RefUomSiteId).HasColumnName("RefUOM_SiteID");

                entity.Property(e => e.Si)
                    .IsRequired()
                    .HasColumnName("SI")
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Uomcode)
                    .IsRequired()
                    .HasColumnName("UOMCode")
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Uomname)
                    .HasColumnName("UOMName")
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Positions>(entity =>
            {
                entity.ToTable("tblPositions");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(50);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PositionTypeId).HasColumnName("PositionType_ID");

                entity.Property(e => e.PostionAttributeId).HasColumnName("PostionAttribute_ID");
            });
            modelBuilder.Entity<RefInBaseAttribute>(entity =>
            {
                entity.ToTable("tblrefInBaseAttribute");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.AttributeDescription).IsUnicode(false);

                entity.Property(e => e.AttributeName)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AttributeType)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.RefSegmentId).HasColumnName("RefSegmentID");

                entity.Property(e => e.Tslice)
                    .HasColumnName("TSlice")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PositionTypes>(entity =>
            {
                entity.ToTable("tblPositionTypes");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.PositionOptionId).HasColumnName("PositionOption_ID");
            });
            modelBuilder.Entity<PositionOptions>(entity =>
            {
                entity.ToTable("tblPositionOptions");
                entity.Property(e => e.Id).HasColumnName("ID");
                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.CreatedDate).HasColumnType("datetime");
                entity.Property(e => e.Description).HasMaxLength(50);
                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50);
                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });
            modelBuilder.Entity<Facilities>(entity =>
            {
                entity.ToTable("tblrefFacilities");
                entity.Property(e => e.FacilityID).HasColumnName("FacilityID");
                entity.Property(e => e.FacilityName).HasColumnName("FacilityName");
            });
            modelBuilder.Entity<RefSegment>(entity =>
            {
                entity.HasKey(e => e.RefSegmentId);

                entity.ToTable("tblRefSegment");

                entity.HasIndex(e => e.SegmentName);

                entity.Property(e => e.RefSegmentId).HasColumnName("RefSegment_ID");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.ImageName)
                    .HasColumnName("Image_Name")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

                entity.Property(e => e.RefSegmentSiteId).HasColumnName("RefSegment_SiteID");

                entity.Property(e => e.SegmentName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.SlbOrgName)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });
                                
            modelBuilder.Entity<RefBusinessLine>(entity =>
            {
                entity.HasKey(e => e.RefBusinessLineId);

                entity.ToTable("tblRefBusinessLine");

                entity.Property(e => e.Type).HasColumnName("Type").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.Code).HasColumnName("Code").HasMaxLength(50).IsUnicode(false);
                entity.Property(e => e.Description).HasColumnName("Description").HasMaxLength(100).IsUnicode(false);

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");


                entity.Property(e => e.LastModifiedBy)
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");

            });

            modelBuilder.Entity<UserTablecolumnsCustomizations>(entity =>
            {
                entity.ToTable("USER_TABLECOLUMNS_CUSTOMIZATIONS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ColumnDisplayString)
                    .HasColumnName("COLUMN_DISPLAY_STRING")
                    .HasMaxLength(3000)
                    .IsUnicode(false);

                entity.Property(e => e.ColumnId).HasColumnName("COLUMN_ID");

                entity.Property(e => e.DisplayOrder).HasColumnName("DISPLAY_ORDER");

                entity.Property(e => e.Gin)
                    .HasColumnName("GIN")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ParentTable)
                    .HasColumnName("PARENT_TABLE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.SortColumn).HasColumnName("SORT_COLUMN");

                entity.Property(e => e.SortOrder)
                    .HasColumnName("SORT_ORDER")
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('ASC')");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonnelMaster>(entity =>
            {
                entity.HasKey(e => e.Gin);

                entity.ToTable("PERSONNEL_MASTER");

                entity.HasIndex(e => new { e.FullName, e.Alias })
                    .HasName("ix_PERSONNEL_MASTER_ALIAS");

                entity.HasIndex(e => new { e.Gin, e.FullName })
                    .HasName("INDX_T_BRS_GENERAL_GW");

                entity.HasIndex(e => new { e.Gin, e.IdistrictId })
                    .HasName("ix_PERSONNEL_MASTER_IDISTRICT_ID");

                entity.HasIndex(e => new { e.Active, e.Alias, e.Country, e.CreatedDate, e.CreatedUser, e.DateHired, e.Email, e.EmployeeType, e.FirstName, e.FullName, e.IdistrictId, e.JobCode, e.LastName, e.Location, e.Manager, e.PhoneNumber, e.Sms, e.UpdateDate, e.UpdateUser, e.Gin })
                    .HasName("INDX_PERSONNELMASTER_GIN");

                entity.Property(e => e.Gin)
                    .HasColumnName("GIN")
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .HasColumnName("ACTIVE")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Alias)
                    .HasColumnName("ALIAS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Country)
                    .HasColumnName("COUNTRY")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DateHired)
                    .HasColumnName("DATE_HIRED")
                    .HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .HasColumnName("EMAIL")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.EmployeeType)
                    .HasColumnName("EMPLOYEE_TYPE")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.FirstName)
                    .HasColumnName("FIRST_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FullName)
                    .HasColumnName("FULL_NAME")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.IdistrictId).HasColumnName("IDISTRICT_ID");

                entity.Property(e => e.JobCode)
                    .HasColumnName("JOB_CODE")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .HasColumnName("LAST_NAME")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Location)
                    .HasColumnName("LOCATION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Manager)
                    .HasColumnName("MANAGER")
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.PhoneNumber)
                    .HasColumnName("PHONE_NUMBER")
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Sms)
                    .HasColumnName("SMS")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PersonnelOnBoard>(entity =>
            {
                entity.ToTable("PERSONNEL_ON_BOARD");

                entity.HasIndex(e => new { e.DepartureDate, e.DaysOnBoard, e.RigId, e.Gin, e.PobDate, e.ArrivalDate })
                    .HasName("IX_PERSONNEL_ON_BOARD_uspRepDandMDailyActivityDetailDandMPersonnel_1");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ArrivalDate)
                    .HasColumnName("ARRIVAL_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedDate)
                    .HasColumnName("CREATED_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.CreatedUser)
                    .HasColumnName("CREATED_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DaysOnBoard).HasColumnName("DAYS_ON_BOARD");

                entity.Property(e => e.DepartureDate)
                    .HasColumnName("DEPARTURE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.Function)
                    .HasColumnName("FUNCTION")
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.Gin).HasColumnName("GIN");

                entity.Property(e => e.JobId).HasColumnName("JOB_ID");

                entity.Property(e => e.PobDate)
                    .HasColumnName("POB_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.RigId).HasColumnName("RIG_ID");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Rig)
                    .WithMany(p => p.PersonnelOnBoard)
                    .HasForeignKey(d => d.RigId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_PERSONNEL_ON_BOARD_RIG");
            });
            modelBuilder.Entity<RefRedirectionType>(entity =>
            {
                entity.ToTable("tblRefRedirectionType");

                entity.HasIndex(e => new { e.ID, e.RedirectionType })
                    .HasName("INDX_RRedirType_RedirType");

                entity.HasIndex(e => new { e.RedirectionType, e.ID })
                    .HasName("INDX_REFREDIRTYPE_ID");

                entity.Property(e => e.ID).HasColumnName("ID");

                entity.Property(e => e.RedirectionType)
                    .HasColumnName("Redirection_type")
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<ContainerEqp>(entity =>
            {
                entity.HasKey(e => e.EquipmentId);

                entity.ToTable("tblContainerEqp");

                entity.HasIndex(e => new { e.FileCode, e.SerialNo })
                    .HasName("NCI_TBLCONEQP_FCSN");

                entity.Property(e => e.EquipmentId)
                    .HasColumnName("Equipment_Id")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileCode)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentFc)
                    .HasColumnName("ParentFC")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ParentSn)
                    .HasColumnName("ParentSN")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.SerialNo)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<RToolOrderStatus>(entity =>
            {
                entity.ToTable("R_TOOL_ORDER_STATUS");

                entity.HasIndex(e => new { e.Id, e.Status })
                    .HasName("INDX_RTOS_IDSTATUS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Status)
                    .HasColumnName("STATUS")
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<TcoPGPL>(entity =>
            {
                entity.HasKey(e => e.ID);

                entity.ToTable("tblTCOPGPL");

                entity.Property(e => e.LoadoutId).HasColumnName("LoadoutId");
                entity.Property(e => e.TcoToolsetId).HasColumnName("TcoToolsetId");
                entity.Property(e => e.ProductGroupId).HasColumnName("Product_Group_Id");
                entity.Property(e => e.ProductGroupStatus)
                    .HasColumnName("Product_Group_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.ProductLineId).HasColumnName("Product_Line_id");
                entity.Property(e => e.ProductLineStatus)
                    .HasColumnName("Product_Line_status")
                    .HasMaxLength(50)
                    .IsUnicode(false);
                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasColumnType("CreatedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasColumnType("CreatedDate");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasColumnType("LastModifiedBy")
                    .HasMaxLength(8000)
                    .IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasColumnType("LastModifiedDate");
            });

            modelBuilder.Entity<Location>(entity =>
            {
                entity.ToTable("LOCATION");

                entity.HasIndex(e => new { e.Location1, e.RigPacketQcRequired, e.Id })
                    .HasName("IX_LOCATION_ID_RIG_PACKET_QC_REQUIRED");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.BusinessUnit).HasColumnName("Business_unit");

                entity.Property(e => e.CategoryTypeId).HasColumnName("CategoryTypeID");

                entity.Property(e => e.CreatedBy).HasColumnType("char(50)");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .HasColumnName("DESCRIPTION")
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.DistrictId).HasColumnName("DistrictID");

                entity.Property(e => e.Districtmigrated).HasColumnName("DISTRICTMIGRATED");

                entity.Property(e => e.EnableSap).HasColumnName("ENABLE_SAP");

                entity.Property(e => e.EtraceId).HasColumnName("ETRACE_ID");

                entity.Property(e => e.IdistrictId).HasColumnName("IDISTRICT_ID");

                entity.Property(e => e.LastModifiedBy).HasColumnType("char(50)");

                entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Level).HasColumnName("LEVEL");

                entity.Property(e => e.Location1)
                    .HasColumnName("LOCATION")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ParentId).HasColumnName("PARENT_ID");

                entity.Property(e => e.RigPacketQcRequired)
                    .HasColumnName("RIG_PACKET_QC_REQUIRED")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.UpdateDate)
                    .HasColumnName("UPDATE_DATE")
                    .HasColumnType("datetime");

                entity.Property(e => e.UpdateUser)
                    .HasColumnName("UPDATE_USER")
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.UtcDifference).HasColumnName("UTC_DIFFERENCE");
            });

            modelBuilder.Entity<LrdeRun>(entity =>
            {
                entity.HasKey(e => e.LrdeRunId);

                entity.ToTable("tblLRDERun");

                entity.Property(e => e.LrdeRunId).HasColumnName("LRDE_RunID");

                entity.Property(e => e.EndDateTime)
                    .HasColumnName("End Date / Time")
                    .HasColumnType("datetime");

                entity.Property(e => e.JobId).HasColumnName("JobID");

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateTime)
                    .HasColumnName("Start Date / Time")
                    .HasColumnType("datetime");

                entity.HasOne(d => d.Job)
                    .WithMany(p => p.LrdeRun)
                    .HasForeignKey(d => d.JobId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TBLLRDERUN_JOB_ID");
            });

            modelBuilder.Entity<LrdeRunAttachment>(entity =>
            {
                entity.HasKey(e => e.LrdeRunAttachmentId);

                entity.ToTable("tblLRDERunAttachment");

                entity.HasIndex(e => e.LrdeRunId)
                    .HasName("IDX_LRDE_RunID");

                entity.Property(e => e.LrdeRunAttachmentId).HasColumnName("LRDE_RunAttachmentID");

                entity.Property(e => e.AttachmentId).HasColumnName("Attachment_ID");

                entity.Property(e => e.File)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LrdeRunId).HasColumnName("LRDE_RunID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.LrdeRun)
                    .WithMany(p => p.LrdeRunAttachment)
                    .HasForeignKey(d => d.LrdeRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunAttachment_tblLRDERun");
            });

            modelBuilder.Entity<LrdeRunAttribute>(entity =>
            {
                entity.HasKey(e => e.LrdeRunAttributeId);

                entity.ToTable("tblLRDERunAttribute");

                entity.HasIndex(e => e.LrdeRunId)
                    .HasName("IDX_RunID");

                entity.Property(e => e.LrdeRunAttributeId).HasColumnName("LRDE_RunAttributeID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LrdeRunId).HasColumnName("LRDE_RunID");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.LrdeRunAttribute)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunAttribute_tblRigAttribute");

                entity.HasOne(d => d.LrdeRun)
                    .WithMany(p => p.LrdeRunAttribute)
                    .HasForeignKey(d => d.LrdeRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunAttribute_tblLRDERun");
            });

            modelBuilder.Entity<LrdeRunEquipment>(entity =>
            {
                entity.HasKey(e => e.LrdeRunEquipmentId);

                entity.ToTable("tblLRDERunEquipment");

                entity.Property(e => e.LrdeRunEquipmentId).HasColumnName("LRDE_RunEquipmentID");

                entity.Property(e => e.FileCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LrdeRunId).HasColumnName("LRDE_RunID");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.LrdeRun)
                    .WithMany(p => p.LrdeRunEquipment)
                    .HasForeignKey(d => d.LrdeRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunEquipment_tblLRDERun");
            });

            modelBuilder.Entity<LrdeRunEquipmentAttribute>(entity =>
            {
                entity.HasKey(e => e.LrdeRunEquipmentAttributeId);

                entity.ToTable("tblLRDERunEquipmentAttribute");

                entity.HasIndex(e => e.LrdeRunEquipmentId)
                    .HasName("IDX_LRDE_RunEquipmentID");

                entity.Property(e => e.LrdeRunEquipmentAttributeId).HasColumnName("LRDE_RunEquipmentAttributeID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LrdeRunEquipmentId).HasColumnName("LRDE_RunEquipmentID");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.LrdeRunEquipmentAttribute)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("FK_tblLRDERunEquipmentAttribute_tblRigAttribute");

                entity.HasOne(d => d.LrdeRunEquipment)
                    .WithMany(p => p.LrdeRunEquipmentAttribute)
                    .HasForeignKey(d => d.LrdeRunEquipmentId)
                    .HasConstraintName("FK_tblLRDERunEquipmentAttribute_tblLRDERunEquipment");
            });

            modelBuilder.Entity<LrdeRunOutOfSpec>(entity =>
            {
                entity.HasKey(e => e.LrdeRunOutOfSpecId);

                entity.ToTable("tblLRDERunOutOfSpec");

                entity.HasIndex(e => new { e.LrdeRunId, e.AttributeId })
                    .HasName("IDX_LRDE_RunID_AttrID");

                entity.Property(e => e.LrdeRunOutOfSpecId).HasColumnName("LRDE_RunOutOfSpecID");

                entity.Property(e => e.AttributeId).HasColumnName("AttributeID");

                entity.Property(e => e.AttributeValue)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastModified).HasColumnType("datetime");

                entity.Property(e => e.LastModifiedBy)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.LrdeRunId).HasColumnName("LRDE_RunID");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.LrdeRunOutOfSpec)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunOutOfSpec_tblRigAttribute");

                entity.HasOne(d => d.LrdeRun)
                    .WithMany(p => p.LrdeRunOutOfSpec)
                    .HasForeignKey(d => d.LrdeRunId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tblLRDERunOutOfSpec_tblLRDERun");
            });

            modelBuilder.Entity<RefManufacturer>(entity =>
            {
                entity.HasKey(e => e.RefManufacturerID);

                entity.ToTable("tblRefManufacturer");

                entity.Property(e => e.RefManufacturerID).HasColumnName("RefManufacturer_ID");

                entity.Property(e => e.Manufacturer).HasColumnName("Manufacturer");
            });

            modelBuilder.Entity<RefEqpState>(entity =>
            {
                entity.HasKey(e => e.RefEqpStateID);
                entity.ToTable("tblRefEqpState");
                entity.Property(e => e.EquipmentState).HasColumnName("EquipmentState");
                entity.Property(e => e.RefEqpStateSiteID).HasColumnName("RefEqpState_SiteID");
                entity.Property(e => e.RefEqpStateID).HasColumnName("RefEqpState_ID");
                entity.Property(e => e.Active).HasColumnName("Active");
            });
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // TODO Alex I added this to force us to justify (or remove) the need for Include() at the appropriate levels
#pragma warning disable 612
            optionsBuilder.ConfigureWarnings(warnings => warnings.Throw(CoreEventId.IncludeIgnoredWarning));
#pragma warning restore 612
        }

        public override void Dispose()
        {
            if (Database.IsSqlServer())
                SqlConnection.ClearPool((SqlConnection)Database.GetDbConnection());

            base.Dispose();
        }

        public delegate QtracDbContext Factory();
    }
}