#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading.Tasks;
using IdentityModel.Client;
using Microsoft.Extensions.Caching.Memory;
using Microsoft.Extensions.Options;
using Newtonsoft.Json;
using Serilog;
using Tlm.Fed.Framework.Common.ServiceClient;
using Tlm.Fed.Models.CrossDomain.Models.MasterData;
using Tlm.Sdk.AspNetCore;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Core.Models.Querying;

namespace Tlm.Fed.Contexts.Common.Services
{
    public class MasterDataSiteTypeMappingService : IMasterDataSiteTypeMappingService
    {
        private static readonly MemoryCache Cache = new MemoryCache(new OptionsWrapper<MemoryCacheOptions>(new MemoryCacheOptions()));
        private readonly ILogger _logger;
        private readonly IHttpService _httpService;
        private readonly IMateoAuthenticationService _mateoAuthenticationService;
        private readonly IInternalUriBuilder _uriBuilder;
        private readonly string _siteTypeMapApiEndPoint = "/api/v2/masterdata/sitetypemapping";
        private static readonly string CacheKey = "MasterData.SiteTypeMap";

        public MasterDataSiteTypeMappingService(IHttpService httpService,
                                            IMateoAuthenticationService mateoAuthenticationService,
                                            IInternalUriBuilder uriBuilder)
        {
            _logger = Log.ForContext<SiteTypeMapping>();
            _mateoAuthenticationService = mateoAuthenticationService;
            _uriBuilder = uriBuilder;
            _httpService = httpService;
        }

        public string GetSiteTypeMappingName(string source, CmmsId cmmsId)
        {
            if (string.IsNullOrEmpty(source))
                return "Unknown";
            var cmmsIdValue = Convert.ToString((int)cmmsId);

            var siteTypeMapping = Task.Run(async () => await GetSiteTypeMapping(source.Trim(), cmmsIdValue)).Result;
            var siteTypeMap = siteTypeMapping != null ? siteTypeMapping.Name : source;

            return siteTypeMap;
        }

        public string GetSiteTypeMappingDescription(string source, CmmsId cmmsId)
        {
            if (string.IsNullOrEmpty(source))
                return "NA";

            var cmmsIdValue = Convert.ToString((int)cmmsId);
            var description = "NA";

            var siteTypeMapping = Task.Run(async () => await GetSiteTypeMapping(source.Trim(), cmmsIdValue)).Result;
            if (siteTypeMapping != null)
                if (siteTypeMapping.CmmsMapping.ContainsKey(cmmsIdValue))
                {
                    var cmmsMapping = siteTypeMapping.CmmsMapping[cmmsIdValue].FirstOrDefault(x => x.Code.ToLowerInvariant() == source.Trim().ToLowerInvariant());
                    description = cmmsMapping?.Description;
                }

            return description;
        }

        public void ClearCache()
        {
            Cache.Remove(CacheKey);
        }

        private async Task<SiteTypeMapping> GetSiteTypeMapping(string source, string cmmsId)
        {
            try
            {
                var allSiteTypeMappings = await Cache.GetOrCreateAsync(CacheKey, RetrieveDataFromService);
                var result = allSiteTypeMappings?.FirstOrDefault(x => x.CmmsMapping.ContainsKey(cmmsId)
                    && x.CmmsMapping[cmmsId].Any(cref => source.ToLowerInvariant() == cref.Code.ToLowerInvariant()));
                return result;
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Internal error while retrieving the Site type map data from the master data service.");
                return new SiteTypeMapping();
            }
        }

        private async Task<IReadOnlyCollection<SiteTypeMapping>> RetrieveDataFromService(ICacheEntry cacheEntry)
        {
            try
            {
                var url = _uriBuilder.MakeInternalUriBuilder().AppendPath(_siteTypeMapApiEndPoint).Uri;
                var httpRequest = new HttpRequestMessage(HttpMethod.Get, url);
                var accessToken = await _mateoAuthenticationService.GetAccessToken("masterdataapi");
                httpRequest.SetBearerToken(accessToken);

                var httpResponse = await _httpService.ServiceCaller(httpRequest, TimeSpan.FromMinutes(5));

                if (httpResponse.StatusCode == HttpStatusCode.NotFound)
                    return null;

                if (!httpResponse.IsSuccessStatusCode)
                    throw new Exception($"Unable to get http response from {url}. Reason: {httpResponse.ReasonPhrase}");

                var json = await httpResponse.Content.ReadAsStringAsync();
                var siteTypeMapCollection = JsonConvert.DeserializeObject<CollectionResult<SiteTypeMapping>>(json);

                if (!siteTypeMapCollection.Collection.Any())
                    throw new InvalidOperationException("The Site Type Map collection came empty from the Master data service. Need to retry.");

                cacheEntry.AbsoluteExpirationRelativeToNow = TimeSpan.FromDays(7);
                return siteTypeMapCollection.Collection;
            }
            catch (Exception ex)
            {
                _logger.Error(ex, "Internal error while retrieving the Site Type Map data from master data.");
            }

            return null;
        }
    }
}