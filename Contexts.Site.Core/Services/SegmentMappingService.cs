#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Serilog;
using Tlm.Fed.Models.Canonical.MasterData;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Data;
using Tlm.Sdk.Core.Models.Querying;

namespace Tlm.Fed.Contexts.Site.Core.Services
{
    public class SegmentMappingService : ISegmentMappingService
    {
        private readonly IReadOnlyRepo<SegmentMapping> _repo;

        public SegmentMappingService(IReadOnlyRepo<SegmentMapping> repo)
        {
            _repo = repo;
        }

        public async Task<List<WorkCenterSite>> UpdateSegments(List<WorkCenterSite> sites)
        {
            var segmentCollection = await _repo.QueryManyAsync(QuerySpec.ForEverything);
            var segmentMappings = segmentCollection.Collection.Where(x => x.CMMSSegment != null).ToDictionary(x => x.CMMSSegment);
            if (segmentMappings.Count != segmentCollection.Collection.Count)
                Log.Logger.Error("One or more segment mappings where the CMMS Segment is null were found; skipping these.");

            foreach (var site in sites)
                if (!string.IsNullOrEmpty(site.SegmentCode) && segmentMappings.TryGetValue(site.SegmentCode, out var segmentMapping))
                    site.SegmentCode = segmentMapping.FMPSegment;
            return sites;
        }
    }
}