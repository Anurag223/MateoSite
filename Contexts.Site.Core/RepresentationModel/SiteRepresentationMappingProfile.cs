#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using AutoMapper;

using System;
using System.Collections.Generic;
using System.Linq;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Fed.Models.Canonical;
using Tlm.Fed.Models.Canonical.SiteDomain;

namespace Tlm.Fed.Contexts.Site.Core.RepresentationModel
{
    public class SiteRepresentationMappingProfile : Profile
    {
        public SiteRepresentationMappingProfile()
        {
            CreateMap<WorkCenterSite, FacilityRepresentation>()
                .ForMember(x => x.Longitude, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.Longitude, src)))
                .ForMember(x => x.CreatedBy, opt => opt.Ignore())
                .ForMember(x => x.CreatedDate, opt => opt.Ignore())
                .ForMember(x => x.Id, opt => opt.MapFrom(src => string.IsNullOrEmpty(src.FacilityId) ? string.Empty : src.FacilityId))
                .ForMember(x => x.Latitude, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.Latitude, src)))
                .MapSyncDate()
                .ForMember(x => x.ModifiedDate, opt => opt.Ignore())
                .ForMember(x => x.ModifiedBy, opt => opt.Ignore())
                .ForMember(x => x.Ownership, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.Ownership, src)))
                .ForMember(x => x.Status, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.FacilityStatus, src)))
                .ForMember(x => x.Description, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.FacilityDescription, src)))
                .ForMember(x => x.Name, opt => opt.MapFrom(src => src.FacilityName));

            CreateMap<WorkCenterSite, SlOrgClassificationRepresentation>()
                .ForMember(x => x.CreatedBy, opt => opt.Ignore())
                .ForMember(x => x.CreatedDate, opt => opt.Ignore())
                .ForMember(x => x.Id, opt => opt.Ignore())
                .MapSyncDate()
                .ForMember(x => x.ModifiedDate, opt => opt.Ignore())
                .ForMember(x => x.ModifiedBy, opt => opt.Ignore())
                .ForMember(x => x.GeoMarket, opt => opt.MapFrom(src => src.GeoMarketCode))
                .ForMember(x => x.Area, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.Area, src)))
                .ForMember(x => x.Group, opt => opt.MapFrom((src, sc) => UnwrapUnmanagedValue(CanonicalSiteConstant.Group, src)))
                .ForMember(x => x.ProductLine, opt => opt.MapFrom(src => src.SegmentCode));


            CreateMap<WorkCenterSite, SiteRepresentation>()
                .ForMember(x => x.ActiveCmmsId, opt => opt.Ignore())
                .ForMember(x => x.CreatedDate, opt => opt.MapFrom(src => src.CreatedDate))
                .ForMember(x => x.CreatedBy, opt => opt.MapFrom(src => src.CreatedBy))
                .ForMember(x => x.ModifiedBy, opt => opt.MapFrom(src => src.ModifiedBy))
                .ForMember(x => x.ModifiedDate, opt => opt.MapFrom(src => src.ModifiedDate))
                .ForMember(x => x.Id, opt => opt.MapFrom(src => string.IsNullOrEmpty(src.Id) ? string.Empty : src.Id))
                .ForMember(x => x.OutOfDateDate, opt => opt.Ignore())
                .ForMember(x => x.UpdateStatus, opt => opt.Ignore())
                .MapSyncDate()
                .ForMember(x => x.UnmanagedAttributes, opt => opt.Ignore())
                .ForMember(x => x.SourceSystemRecordId, opt => opt.MapFrom(src => src.SourceSystemRecordId))
                .ForMember(x => x.ModifiedDate, opt => opt.MapFrom(src => src.ModifiedDate))
                .ForMember(x => x.Code, opt => opt.MapFrom(src => src.Code.Value))
                .ForMember(x => x.Description, opt => opt.MapFrom(src => src.Description))
                .ForMember(x => x.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(x => x.SiteType, opt => opt.MapFrom(src => src.SiteType))
                .ForMember(x => x.SubSite, opt => opt.MapFrom(src => src.SubSites))
                .ForMember(x => x.Facility, opt => opt.Ignore())
                .ForMember(x => x.Classifications, opt => opt.Ignore())
                .ForMember(x => x.ActiveCmms, opt => opt.MapFrom(x => Cmms.Systems[x.ActiveCmmsId].SsrId))
                .ForMember(x => x.Id, opt => opt.MapFrom(x => x.Id))
                .AfterMap((a, e) =>
                {
                    if (!string.IsNullOrEmpty(a.FacilityId))
                    {
                        e.Facility = new FacilityRepresentation
                        {
                            Name = a.FacilityName,
                            Description = UnwrapUnmanagedValue(CanonicalSiteConstant.FacilityDescription, a),
                            Status = UnwrapUnmanagedValue(CanonicalSiteConstant.FacilityStatus, a),
                            Ownership = UnwrapUnmanagedValue(CanonicalSiteConstant.Ownership, a),
                            Latitude = UnwrapUnmanagedValue(CanonicalSiteConstant.Latitude, a),
                            Longitude = UnwrapUnmanagedValue(CanonicalSiteConstant.Longitude, a),
                            Id = string.IsNullOrEmpty(a.FacilityId) ? string.Empty : a.FacilityId
                        };
                    }
                    if (!string.IsNullOrEmpty(a.SegmentCode))
                    {
                        SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgBusinessView, new Classification()
                        {
                            Code = a.SegmentCode,
                            Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.Segment)
                        });
                    }
                    if (a.SubBusinessLines.Count > 0)
                    {
                        SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgBusinessView, new Classification()
                        {
                            Code = a.SubBusinessLines.First(),
                            Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.SubSegment)
                        });

                        foreach (var subBusinessLine in a.SubBusinessLines)
                        {
                            SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgDivisionView, new Classification()
                            {
                                Code = subBusinessLine,
                                Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.SubBusinessLine)
                            });
                        }
                    }

                    if (!string.IsNullOrEmpty(a.SubGeoMarketCode))
                    {
                        SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam, new Classification()
                        {
                            Code = a.SubGeoMarketCode,
                            Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.SubGeoMarket)
                        });
                    }
                    else if (!string.IsNullOrEmpty(a.GeoMarketCode))
                    {
                        SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam, new Classification()
                        {
                            Code = a.GeoMarketCode,
                            Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.GeoMarket)
                        });
                    }

                    if (!string.IsNullOrEmpty(a.GeoMarketCode))
                    {
                        SetClassification(e, WorkCenterSite.SiteClassificationValueSlOrgBasinView, new Classification()
                        {
                            Code = a.GeoMarketCode,
                            Type = System.Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.Geounit)
                        });
                    }
                });
        }

        private string UnwrapUnmanagedValue(string unmanagedField, WorkCenterSite site)
        {
            string retVal = string.Empty;
            if (site?.UnmanagedAttributes != null && site.UnmanagedAttributes.Any())
            {
                var code = Cmms.Systems[site.ActiveCmmsId].Code;
                if (string.IsNullOrEmpty(code))
                    return retVal;

                var unmanagedDict = site.UnmanagedAttributes.ContainsKey(code) ? site.UnmanagedAttributes[code] : null;
                if (unmanagedDict == null)
                    return retVal;

                if (!unmanagedDict.Keys.Contains(unmanagedField))
                    return retVal;

                var unmanagedAttribute = unmanagedDict[unmanagedField];
                retVal = unmanagedAttribute.Value;
            }
            return retVal;
        }


        private static void SetClassification(SiteRepresentation siteRepresentation, string @namespace, Classification classification)
        {
            if (classification != null && !siteRepresentation.Classifications.ContainsKey(@namespace))
                siteRepresentation.Classifications.Add(@namespace, new List<Classification>());

            if (classification != null)
                siteRepresentation.Classifications[@namespace].Add(classification);

        }

    }
}
