#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Tlm.Fed.Adapters.SAP.Site;
using Tlm.Fed.Adapters.SAP.Site.Models;
using Tlm.Fed.Contexts.Common.Services;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Testing.Unit;

namespace Adapters.SAP.Site.Tests
{
    [TestClass]
    public class SAPToMateoSiteMapperProfileTests : UnitTestBase
    {
        private readonly MapperConfiguration _configuration;
        private readonly IMapper _mapper;
        private readonly Mock<IMasterDataSiteTypeMappingService> _masterDataSiteTypeMappingService;

        #region FilePaths

        private const string SAPServiceResponseFilePath = "Data\\SAPSiteServiceResponse.json";

        #endregion

        public SAPToMateoSiteMapperProfileTests()
        {
            var mockRepository = new MockRepository(MockBehavior.Strict);
            _masterDataSiteTypeMappingService = mockRepository.Create<IMasterDataSiteTypeMappingService>();
            _configuration = new MapperConfiguration(config => { config.AddProfile(new SAPToMateoSiteMapperProfile(_masterDataSiteTypeMappingService.Object)); });
            _mapper = _configuration.CreateMapper();
        }

        /// <summary>
        ///     Validates whether mapper configurations are valid or not.
        /// </summary>
        [TestMethod]
        public void AssertConfigurationIsValid_NoExceptionThrown()
        {
            // Assert
            _configuration.AssertConfigurationIsValid();
        }

        /// <summary>
        ///     Given: SAP site
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite Object <see cref="WorkCenterSite" />
        /// </summary>
        [TestMethod]
        [DeploymentItem(SAPServiceResponseFilePath)]
        public void GivenSAPSiteObject_ReturnsMateoWorkCenterSiteObject()
        {
            // Arrange
            var data = ReadJson<SAPSiteResponse>(SAPServiceResponseFilePath);
            var SAPSite = data.SAPSites[0];
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingDescription(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("LABOR");

            // Act
            var mateoSite = _mapper.Map<WorkCenterSite>(SAPSite);

            //Assert
            Assert.AreEqual(SAPSite.Name1, mateoSite.Name.Sanitize());
            Assert.AreEqual(SAPSite.City, mateoSite.City.Sanitize());
            Assert.AreEqual(SAPSite.CountryKey.Sanitize(), mateoSite.CountryCode);
            Assert.AreEqual(SAPSite.Plant.Sanitize(), mateoSite.Code.ToString());
            Assert.AreEqual(CmmsId.SAP, mateoSite.ActiveCmmsId);
            Assert.AreEqual(mateoSite.UnmanagedAttributes.Count, 0);
            Assert.AreEqual(mateoSite.AlternateIdentities.Count, 0);
            Assert.IsNull(mateoSite.FacilityName.Sanitize());
            Assert.IsNotNull(mateoSite.SubSites);
            Assert.IsNotNull(mateoSite.SiteType);
            Assert.IsTrue(mateoSite.SubSites.Count > 0);
            Assert.IsNotNull(mateoSite.SubSites.ElementAt(0).SiteType);
            Assert.AreEqual(mateoSite.SiteType, "Operations");
            Assert.IsNotNull(mateoSite.SubSites.ElementAt(0).Description);
        }

        /// <summary>
        ///     Given: SAP sites list
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite list <see cref="WorkCenterSite" />
        /// </summary>
        [TestMethod]
        [DeploymentItem(SAPServiceResponseFilePath)]
        public void GivenSAPSiteList_ReturnsMateoWorkCenterSiteList()
        {
            // Arrange
            var SAPSites = ReadJson<SAPSiteResponse>(SAPServiceResponseFilePath);
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingDescription(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("LABOR");

            // Act
            var mateoSites = _mapper.Map<WorkCenterSite[]>(SAPSites.SAPSites).ToList();

            //Assert
            Assert.AreEqual(SAPSites.SAPSites.Count(), mateoSites.Count);
        }

        /// <summary>
        ///     Given: SAP site object with empty string values
        ///     <see cref="SAP_R_LOCATIONS_LOCATIONSType">
        ///         When: Mapper is configured.
        ///         Then: Returns Mateo WorkCenterSite with null value when mapped to string.Empty <see cref="WorkCenterSite">
        /// </summary>
        [TestMethod]
        public void GivenSAPSiteObjectWithEmptyStringValues_ReturnsNullValue()
        {
            // Arrange
            var SAPSite = new SAPSiteResponse
            {
                SAPSites = new List<SAPSite>
                {
                    new SAPSite
                    {
                        Plant = null,
                        Name1 = null, City = null, CountryKey = null
                    }
                }
            };
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingName(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("Operations");
            _masterDataSiteTypeMappingService.Setup(x => x.GetSiteTypeMappingDescription(It.IsAny<string>(), It.IsAny<CmmsId>())).Returns("LABOR");

            // Act	
            var mateoSite = _mapper.Map<WorkCenterSite>(SAPSite.SAPSites[0]);

            // Assert
            Assert.IsNull(mateoSite.Name);
            Assert.IsNull(mateoSite.Code);
            Assert.IsNull(mateoSite.City);
            Assert.IsNull(mateoSite.CountryCode);
        }
    }
}