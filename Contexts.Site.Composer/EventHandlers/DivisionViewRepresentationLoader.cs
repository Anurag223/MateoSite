#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using JetBrains.Annotations;
using Tlm.Fed.Contexts.Site.Core.RepresentationModel;
using Tlm.Fed.Framework.Common.Models;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Data;
using Tlm.Sdk.Core.Models.Querying;

namespace Tlm.Fed.Contexts.Site.Composer.EventHandlers
{
    [BulkRepresentationLoader("MasterData.DivisionView")]
    [UsedImplicitly]
    public class DivisionViewRepresentationLoader : IBulkRepresentationLoader
    {
        private readonly IRepresentationBulkComposerAndSaver<SiteRepresentation> _siteBulkComposerAndSaver;
        private readonly IRepository<WorkCenterSite> _workCenterSiteCanonicalRepo;

        public DivisionViewRepresentationLoader(IRepository<WorkCenterSite> workCenterSiteCanonicalRepo, IRepresentationBulkComposerAndSaver<SiteRepresentation> siteBulkComposerAndSaver)
        {
            _siteBulkComposerAndSaver = siteBulkComposerAndSaver;
            _workCenterSiteCanonicalRepo = workCenterSiteCanonicalRepo;
        }

        public async Task<CacheLoadInfo> Load(IEnumerable<string> keys)
        {
            try
            {
                var workCenterKeys = await GetWorkCenterSiteKeysByBusinessTeam(keys);
                return await _siteBulkComposerAndSaver.UpdateRepresentations(workCenterKeys);
            }
            catch (Exception e)
            {
                return CacheLoadInfo.ForError(e.Message);
            }
        }

        private async Task<IEnumerable<string>> GetWorkCenterSiteKeysByBusinessTeam(IEnumerable<string> DivisionViewKeys)
        {
            if (!DivisionViewKeys.Any())
                return Enumerable.Empty<string>();

            var workCenterSites = await FindWorkCenterSiteBySegmentCode(DivisionViewKeys);
            return workCenterSites?.Collection.Select(x => x.Id) ?? Enumerable.Empty<string>();
        }

        private Task<CollectionResult<WorkCenterSite>> FindWorkCenterSiteBySegmentCode(IEnumerable<string> DivisionViewKeys)
        {
            var querySpec = QuerySpec.ByValues(nameof(WorkCenterSite.SegmentCode), DivisionViewKeys);
            return _workCenterSiteCanonicalRepo.QueryManyAsync(querySpec);
        }
    }
}