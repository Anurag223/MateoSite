#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using MoreLinq;
using Serilog;
using Tlm.Fed.Contexts.Site.Core.RepresentationModel;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.MasterData;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Data;
using Tlm.Sdk.Core.Models;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Core.Models.Querying;
using SiteCanonical = Tlm.Fed.Models.Canonical.SiteDomain.Site;

namespace Tlm.Fed.Contexts.Site.Composer
{
    public class SiteInboundComposer : IInboundComposer<SiteCanonical, SiteRepresentation>
    {
        private readonly IMapper _mapper;
        private static readonly ILogger Logger = Log.Logger.ForContext<SiteInboundComposer>();
        private readonly IReadOnlyRepo<WorkCenterSite> _siteCanonicalRepo;
        private readonly IReadOnlyRepo<BusinessView> _businessViewRepo;
        private readonly IReadOnlyRepo<DivisionView> _divisionViewRepo;
        private readonly IReadOnlyRepo<BasinView> _basinViewRepo;
        private readonly IReadOnlyRepo<FacilityRepresentation> _facilityRepo;
        private readonly SiteComposerConfiguration _siteComposerConfiguration;
        private readonly IReadOnlyRepo<BusinessTeam> _businessTeamRepo;
        private readonly IReadOnlyRepo<SegmentMapping> _segmentMappingRepo;

        private readonly string Segment = nameof(SiteClassificationType.Segment);
        private readonly string SubSegment = nameof(SiteClassificationType.SubSegment);
        private readonly string SubBusinessLine = nameof(SiteClassificationType.SubBusinessLine);
        private readonly string Geounit = nameof(SiteClassificationType.Geounit);

        public SiteInboundComposer(IMapper mapper,
            IReadOnlyRepo<WorkCenterSite> siteCanonicalRepo,
            IReadOnlyRepo<BusinessView> businessViewRepo,
            IReadOnlyRepo<DivisionView> divisionViewRepo,
            IReadOnlyRepo<BasinView> basinViewRepo,
            IReadOnlyRepo<BusinessTeam> businessTeamRepo,
            IReadOnlyRepo<SegmentMapping> segmentMappingRepo,
            IReadOnlyRepo<FacilityRepresentation> facilityRepo,
            SiteComposerConfiguration siteComposerConfiguration)
        {
            _mapper = mapper;
            _siteCanonicalRepo = siteCanonicalRepo;
            _businessViewRepo = businessViewRepo;
            _divisionViewRepo = divisionViewRepo;
            _basinViewRepo = basinViewRepo;
            _businessTeamRepo = businessTeamRepo;
            _facilityRepo = facilityRepo;
            _siteComposerConfiguration = siteComposerConfiguration;
            _segmentMappingRepo = segmentMappingRepo;
        }

        public async Task<IReadOnlyCollection<SiteRepresentation>> ComposeAsync(IReadOnlyCollection<SiteCanonical> sites)
        {
            var ids = sites.Select(x => x.Id).ToArray();

            Logger.Debug("Start: Site Composer");

            if (!ids.Any())
                return new List<SiteRepresentation>();

            var querySpec = QuerySpec.ByIds(ids);
            var canonicalEntities = await _siteCanonicalRepo.QueryManyAsync(querySpec);

            if (!canonicalEntities.Collection.Any())
            {
                Logger.Warning("Site was not found in the Canonical Repo for these ID's: {Ids}.", ids);
                return new List<SiteRepresentation>();
            }

            var siteRepresentations = _mapper.Map<SiteRepresentation[]>(canonicalEntities.Collection).DistinctBy(x => x.Id).ToList();
            UpdateClassificationsFeatureFlags(siteRepresentations, _siteComposerConfiguration);
            await UpdateProductlineMapping(siteRepresentations);
            await UpdateBusinessView(siteRepresentations);
            await UpdateDivisionView(siteRepresentations);
            await UpdateBasinView(siteRepresentations);
            await UpdateBusinessTeam(siteRepresentations);
            var sitesList = UpdateFacility(siteRepresentations);
            return sitesList;
        }

        private void UpdateClassificationsFeatureFlags(List<SiteRepresentation> siteRepresentations, SiteComposerConfiguration siteComposerConfiguration)
        {
            if (siteRepresentations != null && siteRepresentations.Count == 0)
                return;

            foreach (var site in siteRepresentations)
            {
                if (siteComposerConfiguration?.FeatureFlags?.ServeBasinView == false)
                    site.Classifications.Remove(WorkCenterSite.SiteClassificationValueSlOrgBasinView);
                if (siteComposerConfiguration?.FeatureFlags?.ServeBusinessTeam == false)
                    site.Classifications.Remove(WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam);
            }
        }

        private async Task UpdateProductlineMapping(List<SiteRepresentation> siteRepresentations)
        {
            var segmentMappingList = await _segmentMappingRepo.QueryManyAsync(QuerySpec.ForEverything);
            var segmentMappings = segmentMappingList.Collection;
            siteRepresentations.ForEach(siteRepresentation =>
            {
                if (siteRepresentation.Classifications.TryGetValue(WorkCenterSite.SiteClassificationValueSlOrgBusinessView, out var classifications))
                    if (classifications.FirstOrDefault(x => x.Type == Segment) is var segmentClassification)
                    {
                        var cmmsSystemName = GetCmmsSystemName(siteRepresentation.ActiveCmms);
                        var segmentMapping = segmentMappings?.FirstOrDefault(x => x.CMMSSegment.ToLowerInvariant() == Segment.ToLowerInvariant() && x.Target.ToUpperInvariant() == cmmsSystemName.ToUpperInvariant());
                        if (segmentMapping != null)
                            segmentClassification.Code = segmentMapping.FMPSegment;
                    }
            });
        }

        private string GetCmmsSystemName(string acctiveCmms)
        {
            switch (acctiveCmms.ToLower())
            {
                case var _ when acctiveCmms.Equals(Cmms.Maximo.SsrId, StringComparison.OrdinalIgnoreCase):
                    return Cmms.Maximo.SystemName;

                case var _ when acctiveCmms.Equals(Cmms.QTrac.SsrId, StringComparison.OrdinalIgnoreCase):
                    return Cmms.QTrac.SystemName;

                case var _ when acctiveCmms.Equals(Cmms.Rite.SsrId, StringComparison.OrdinalIgnoreCase):
                    return Cmms.Rite.SystemName;

                case var _ when acctiveCmms.Equals(Cmms.MT.SsrId, StringComparison.OrdinalIgnoreCase):
                    return Cmms.MT.SystemName;
            }

            return Cmms.None.SystemName;
        }

        private List<SiteRepresentation> UpdateFacility(List<SiteRepresentation> siteRepresentations)
        {
            siteRepresentations.ForEach(async site =>
            {
                if (site.Facility != null && !string.IsNullOrWhiteSpace(site.Facility.Id))
                {
                    var querySpec = QuerySpec.ById(site.Facility.Id);
                    var representationEntity = await _facilityRepo.QueryAsync(querySpec);
                    if (representationEntity != null)
                        site.Facility = representationEntity;
                }
            });
            return siteRepresentations;
        }

        /// <summary>
        ///     Updates the business view.
        /// </summary>
        /// <param name="siteRepresentations">The site representations.</param>
        private async Task UpdateBusinessView(IList<SiteRepresentation> siteRepresentations)
        {
            // update business view on basis of subsegment (for RITE and QTrac) on segment (for Maximo)         
            var businessViewList = await _businessViewRepo.QueryManyAsync(QuerySpec.ForEverything);
            foreach (var site in siteRepresentations)
                if (site.Classifications.TryGetValue(WorkCenterSite.SiteClassificationValueSlOrgBusinessView, out var classifications))
                {
                    var hasSubSegment = classifications.Any(x => x.Type == SubSegment);
                    BusinessView businessView;
                    if (hasSubSegment)
                        businessView = GetBusinessViewForSubSegment(site, classifications, businessViewList.Collection); // for Rite and QTrac data 
                    else
                        businessView = GetBusinessViewForSegment(classifications, businessViewList.Collection); // for Maximo data

                    if (businessView != null)
                    {
                        var businessViewHierarchy = GetBusinessViewHierarchy(businessView, businessViewList.Collection);

                        foreach (var hierarchyClassification in businessViewHierarchy)
                        {
                            var oldClassification = classifications?.FirstOrDefault(c => c.Type.ToUpperInvariant() == hierarchyClassification.Type.ToUpperInvariant());
                            if (oldClassification != null)
                                classifications.Remove(oldClassification); // remove existing classification, to avoid duplicate entry, also to keep updated values in collection
                            classifications.Add(hierarchyClassification);
                        }
                    }
                    else
                    {
                        Logger.Warning("Business view mapping not found in Master-Data for site id '{siteId}' code '{siteCode}'", site.Id, site.Code);
                    }
                }
        }

        /// <summary>
        ///     Updates the division view.
        /// </summary>
        /// <param name="siteRepresentations">The site representations.</param>
        private async Task UpdateDivisionView(IList<SiteRepresentation> siteRepresentations)
        {
            // Division View is only available for sites which have SubSegments
            var divisionViewList = await _divisionViewRepo.QueryManyAsync(QuerySpec.ForEverything);
            foreach (var site in siteRepresentations)
                if (site.Classifications.ContainsKey(WorkCenterSite.SiteClassificationValueSlOrgDivisionView))
                {
                    var classifications = site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgDivisionView];
                    var newClassifications = new List<Classification>();
                    foreach (var classification in classifications)
                        if (classification.Type == SubBusinessLine)
                        {
                            var divisionView = divisionViewList.Collection.FirstOrDefault(x => x.Code.ToUpperInvariant() == classification.Code.ToUpperInvariant());
                            if (divisionView != null)
                            {
                                var viewHierarchy = GetDivisionViewHierarchy(divisionView, divisionViewList.Collection);
                                foreach (var hierarchyClassification in viewHierarchy)
                                {
                                    newClassifications.RemoveAll(x => x.Code.ToUpperInvariant() == hierarchyClassification.Code.ToUpperInvariant());
                                    newClassifications.Add(hierarchyClassification);
                                }
                            }
                            else
                            {
                                newClassifications.RemoveAll(x => x.Code.ToUpperInvariant() == classification.Code.ToUpperInvariant());
                                newClassifications.Add(classification);
                                Logger.Warning("SlOrg DivisionView classification mapping not found for SubSegment '{SubSegment}' for site id '{siteId}' site code '{siteCode}' in activeCmmsId '{activeCmmsId}'", classification.Code, site.Id, site.Code, site.ActiveCmmsId);
                            }
                        }
                        else
                        {
                            newClassifications.RemoveAll(x => x.Code.ToUpperInvariant() == classification.Code.ToUpperInvariant());
                            newClassifications.Add(classification);
                        }

                    site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgDivisionView] = newClassifications;
                }
        }

        private IEnumerable<Classification> GetDivisionViewHierarchy(DivisionView divisionView, IReadOnlyCollection<DivisionView> divisionViewsMaster)
        {
            yield return new Classification
            {
                Code = divisionView.Code,
                ParentCode = divisionView.ParentCode,
                Type = divisionView.Type
            };

            while (divisionView != null)
            {
                var parentCode = divisionView.ParentCode.ToUpperInvariant();
                divisionView = divisionViewsMaster.FirstOrDefault(x => x.Code.ToUpperInvariant() == parentCode); // update divisionView with parent value
                if (divisionView != null)
                    yield return new Classification
                    {
                        Code = divisionView.Code,
                        ParentCode = divisionView.ParentCode,
                        Type = divisionView.Type
                    };
            }
        }

        /// <summary>
        ///     Updates the basin view.
        /// </summary>
        /// <param name="siteRepresentations">The site representations.</param>
        private async Task UpdateBasinView(IList<SiteRepresentation> siteRepresentations)
        {
            //  Basin View is only available for sites which have SubSegments
            var basinViewList = await _basinViewRepo.QueryManyAsync(QuerySpec.ForEverything);
            foreach (var site in siteRepresentations)
                if (site.Classifications.TryGetValue(WorkCenterSite.SiteClassificationValueSlOrgBasinView, out var classifications))
                {
                    var classification = classifications.FirstOrDefault(x => x.Type == Geounit);
                    var code = classification?.Code.ToUpperInvariant();
                    var basinView = basinViewList.Collection.FirstOrDefault(x => x.Code.ToUpperInvariant() == code);
                    if (basinView != null)
                    {
                        var viewHierarchy = GetBasinViewHierarchy(basinView, basinViewList.Collection);

                        foreach (var hierarchyClassification in viewHierarchy)
                        {
                            var oldClassification = classifications.FirstOrDefault(c => c.Type.ToUpperInvariant() == hierarchyClassification.Type.ToUpperInvariant());
                            if (oldClassification != null)
                            {
                                classifications.Remove(oldClassification); // remove existing classification, to avoid duplicate entry, also to keep updated values in collection

                                if (oldClassification.Code.ToUpperInvariant() != hierarchyClassification.Code.ToUpperInvariant())
                                    Logger.Warning("Code mismatch in Master-Data for site id '{siteId}' code '{siteCode}' classification code '{classificationCode}' division-view code '{BasinViewCode}' in activeCmmsId {activeCmmsId}", site.Id, site.Code, oldClassification.Code, hierarchyClassification.Code, site.ActiveCmmsId);
                            }

                            classifications.Add(hierarchyClassification);
                        }
                    }
                    else
                    {
                        Logger.Warning("SlOrg BasinView classification mapping not found for SubSegment '{SubSegment}' for site id '{siteId}' site code '{siteCode}' in activeCmmsId '{activeCmmsId}'", code, site.Id, site.Code, site.ActiveCmmsId);
                    }
                }
        }

        private IEnumerable<Classification> GetBasinViewHierarchy(BasinView basinView, IReadOnlyCollection<BasinView> basinViewsMaster)
        {
            yield return new Classification
            {
                Code = basinView.Code,
                ParentCode = basinView.ParentCode,
                Type = basinView.Type
            };

            while (basinView != null)
            {
                var parentCode = basinView.ParentCode.ToUpperInvariant();
                basinView = basinViewsMaster.FirstOrDefault(x => x.Code.ToUpperInvariant() == parentCode); // update basin View with parent value
                if (basinView != null)
                    yield return new Classification
                    {
                        Code = basinView.Code,
                        ParentCode = basinView.ParentCode,
                        Type = basinView.Type
                    };
            }
        }

        private BusinessView GetBusinessViewForSubSegment(SiteRepresentation site, ICollection<Classification> classifications, IReadOnlyCollection<BusinessView> businessViewList)
        {
            // subsegment are available for Rite and QTrac records 
            var classification = classifications.FirstOrDefault(x => x.Type == SubSegment); // for Rite and QTrac data   
            var code = classification?.Code?.ToUpperInvariant();
            var businessView = businessViewList.FirstOrDefault(x => x.Code.ToUpperInvariant() == code);
            if (businessView == null)
            {
                // to be removed
                // mapping should exist in databse for subsegments
                Logger.Warning("Business view mapping not found in Master-Data for SubSegment classification in site id '{siteId}' code '{siteCode}' for classification type {classificationType} with classfification code {classificationCode}", site.Id, site.Code, classification.Type, classification.Code);
                classification = classifications?.FirstOrDefault(x => x.Type == Segment); // for Rite and QTrac data where mapping not found in Master Data
                code = classification?.Code.ToUpperInvariant();
                businessView = businessViewList.FirstOrDefault(x => x.Code.ToUpperInvariant() == code);
            }

            return businessView;
        }

        private BusinessView GetBusinessViewForSegment(ICollection<Classification> classifications, IReadOnlyCollection<BusinessView> businessViewList)
        {
            // subsegment are not available for Maximo records
            var classification = classifications.FirstOrDefault(x => x.Type == Segment); // for Rite and QTrac data   
            var code = classification?.Code.ToUpperInvariant();
            var businessView = businessViewList?.FirstOrDefault(x => x.Code.ToUpperInvariant() == code);
            return businessView;
        }

        private IEnumerable<Classification> GetBusinessViewHierarchy(BusinessView businessView, IReadOnlyCollection<BusinessView> businessViewsMaster)
        {
            yield return new Classification
            {
                Code = businessView.Code,
                ParentCode = businessView.ParentCode,
                Type = businessView.Type
            };

            while (businessView != null)
            {
                var parentCode = businessView.ParentCode.ToUpperInvariant();
                businessView = businessViewsMaster.FirstOrDefault(x => x.Code.ToUpperInvariant() == parentCode); // update businessView with parent value
                if (businessView != null)
                    yield return new Classification
                    {
                        Code = businessView.Code,
                        ParentCode = businessView.ParentCode,
                        Type = businessView.Type
                    };
            }
        }

        /// <summary>
        ///     Updates the business team.
        /// </summary>
        /// <param name="siteRepresentations">The site representations.</param>
        private async Task UpdateBusinessTeam(IList<SiteRepresentation> siteRepresentations)
        {
            var geoMarket = Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.GeoMarket).ToUpperInvariant();
            var subGeoMarket = Enum.GetName(typeof(SiteClassificationType), SiteClassificationType.SubGeoMarket).ToUpperInvariant();

            var businessTeamList = await _businessTeamRepo.QueryManyAsync(QuerySpec.ForEverything);

            void updateClassification(SiteRepresentation site, IReadOnlyCollection<BusinessTeam> businessTeamMaster)
            {
                if (!site.Classifications.ContainsKey(WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam))
                    return;

                Classification classification = null;
                var hasSubGeoMarket = site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam]
                    .Any(x => x.Type.ToUpperInvariant() == subGeoMarket);
                //If subGeoMarketcode is present look up on it else geoMarketCode
                if (hasSubGeoMarket)
                {
                    classification = site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam]
                        .FirstOrDefault(x => x.Type.ToUpperInvariant() == subGeoMarket);
                    if (classification == null)
                        Logger.Error("BusinessTeam SubGeoMarket classification not found for site id '{siteId}' with code {siteCode} ", site.Id, site.Code);
                }
                else
                {
                    classification = site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam]
                        .FirstOrDefault(x => x.Type.ToUpperInvariant() == geoMarket);
                    if (classification == null)
                        Logger.Error("BusinessTeam GeoMarket classification not found for site id '{siteId}' with code {siteCode} ", site.Id, site.Code);
                }

                if (classification == null)
                    return;
                var lookUpCode = classification.Code.ToUpperInvariant();
                var businessTeam = businessTeamList.Collection.FirstOrDefault(x => x.Code.ToUpperInvariant() == lookUpCode);

                if (businessTeam != null)
                    site.Classifications[WorkCenterSite.SiteClassificationValueSlOrgBusinessTeam] = GetBusinessTeamHierarchy(businessTeam, businessTeamMaster);
            }

            foreach (var item in siteRepresentations)
                updateClassification(item, businessTeamList.Collection);
        }

        private List<Classification> GetBusinessTeamHierarchy(BusinessTeam businessTeam, IReadOnlyCollection<BusinessTeam> businessTeamMaster)
        {
            var list = new List<Classification>
            {
                new Classification
                {
                    Code = businessTeam.Code,
                    ParentCode = businessTeam.ParentCode,
                    Type = businessTeam.Type
                }
            };

            while (!string.IsNullOrEmpty(list.Last().ParentCode))
            {
                var parentBusinessTeam = businessTeamMaster.FirstOrDefault(x => x.Code.ToUpperInvariant() == list.Last().ParentCode.ToUpperInvariant());
                if (parentBusinessTeam != null)
                    list.Add(new Classification
                    {
                        Code = parentBusinessTeam.Code,
                        ParentCode = parentBusinessTeam.ParentCode,
                        Type = parentBusinessTeam.Type
                    });
                else
                    break;
            }

            return list;
        }
    }
}