#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;
using FizzWare.NBuilder;
using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

using Tlm.Fed.Contexts.Common.Configuration;
using Tlm.Fed.Contexts.Site.API.Controllers;
using Tlm.Fed.Contexts.Site.Core.RepresentationModel;
using Tlm.Sdk.Api;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models.Querying;
using Tlm.Sdk.Testing.Unit.Api;

namespace Tlm.Fed.Contexts.Site.API.Tests.Controllers
{
    [TestClass]
    public class SiteControllerTest : ApiUnitTestBase
    {
        private MockRepository _mockProvider;
        private Mock<IGetCollectionStrategy<SiteRepresentation>> _mockMultiResourceGetter;
        private Mock<IGetStrategy<SiteRepresentation>> _mockSingleResourceGetter;

        [TestInitialize]
        public void TestInitialize()
        {
            _mockProvider = new MockRepository(MockBehavior.Loose);
            _mockMultiResourceGetter = _mockProvider.Create<IGetCollectionStrategy<SiteRepresentation>>();
            _mockSingleResourceGetter = _mockProvider.Create<IGetStrategy<SiteRepresentation>>();
        }

        [TestMethod]
        public void Instantiate_Component_NoExceptionThrown()
        {
            Assert.IsNotNull(TryInstantiateComponent<SitesController, StartupForSiteApi, MasterDistrictConfig>(
                additionalConfigurations: builder => builder.AddJsonFile("testsettings.shared.json", false)));
        }

        [TestMethod]
        public void SiteController_Validate_Custom_Attribute()
        {
            var uat = GetSitesController();

            //act
            var result = uat.GetType().GetCustomAttributesData();
            var authAttribute = result.FirstOrDefault(r => r.AttributeType == typeof(RootPolicyAttribute));
            var apiExplorerSettingsAttribute = result.First(r => r.AttributeType == typeof(ApiExplorerSettingsAttribute));
            var apiVersionAttribute = result.First(r => r.AttributeType == typeof(ApiVersionAttribute));

            result.Count.Should().Be(4);
            authAttribute.Should().NotBeNull();
            uat.GetType().Should().BeDecoratedWith<ProducesAttribute>(x => x.ContentTypes.Contains("application/json"));
            Debug.Assert(apiExplorerSettingsAttribute.NamedArguments != null);
            apiExplorerSettingsAttribute.NamedArguments.Count.Should().Be(1);
            apiExplorerSettingsAttribute.NamedArguments[0].MemberName.Should().Be("GroupName");
            apiExplorerSettingsAttribute.NamedArguments[0].TypedValue.Value.Should().Be("v2");
            apiVersionAttribute.ConstructorArguments.Count.Should().Be(1);
            apiVersionAttribute.ConstructorArguments[0].Value.Should().Be("2.0");
        }

        [TestMethod]
        public void Validate_AttributeApplied_AssemblyHasApiControllerAttribute()
        {
            var ls = Assembly
                .GetExecutingAssembly()
                .GetReferencedAssemblies()
                .Select(Assembly.Load)
                .Where(a => a.IsDefined(typeof(ApiControllerAttribute), false))
                .ToList();

            ls.Should().NotBeNull();
            ls.Count.Should().Be(1);
            ls[0].GetName().Name.Should().Be("Tlm.Fed.Contexts.Site.API");
        }

        [TestMethod]
        public async Task Should_Return_Sites_For_Given_Query()
        {
            // arrange
            var sites = new List<SiteRepresentation>();
            var result = new OkObjectResult(new CollectionResult<SiteRepresentation>(sites));
            _mockMultiResourceGetter
                .Setup(s => s.GetCollection(It.IsAny<QuerySpec>()))
                .Returns<QuerySpec>(q => Task.FromResult<IActionResult>(result));

            var uat = GetSitesController();
            var query = SpecBuilder.ForQuery<SiteRepresentation>().ForPageOfSize(1, 25).Spec;

            // act
            var actualResult = await uat.Get(query);
            actualResult.Should().NotBeNull();

            // assert
            GetCollection<SiteRepresentation>(result).Collection.Should().HaveCount(0);
            ((OkObjectResult)result).Value.Should().NotBeNull();
            ((CollectionResult<SiteRepresentation>)((OkObjectResult)result).Value).Collection.Count.Should().Be(0);
        }

        private IActionResult PrepareReturn(QuerySpec querySpec, IEnumerable<SiteRepresentation> data)
        {
            var (_, builder, _) = CreateUriBuilder();
            var qcs = ReflectionExtensions.GetInstanceOfClosedGeneric<IGetCollectionStrategy<SiteRepresentation>>(
                "GetCollectionStrategy",
                typeof(SiteRepresentation),
                null,
                new CollectionLinker<SiteRepresentation>(builder),
                new HypermediaLinker<SiteRepresentation>(builder));
            var res = new CollectionResult<SiteRepresentation>(data);
            var returnObject = (CollectionResult<SiteRepresentation>)qcs.CreateCollectionDocument(res, querySpec).Value;

            return new OkObjectResult(returnObject);
        }

        private SitesController GetSitesController()
        {
            return new SitesController(_mockMultiResourceGetter.Object, _mockSingleResourceGetter.Object);
        }

        [TestMethod]
        public async Task Should_Return_Site_For_Given_Id()
        {
            // arrange
            const string SiteId = "2392:2016";

            var returnObject = Builder<SiteRepresentation>
                .CreateNew()
                .With(x => x.Id = SiteId)
                .Build();

            _mockSingleResourceGetter
                .Setup(s => s.GetResourceById<SitesController>(SiteId, It.IsAny<QuerySpec>()))
                .Returns(Task.FromResult<IActionResult>(new OkObjectResult(returnObject)));

            var uat = GetSitesController();
            var query = SpecBuilder.ForQuery<SiteRepresentation>().ForPageOfSize(1, 25).Spec;

            // act
            var result = await uat.GetById(SiteId, query);

            // assert
            GetValue<SiteRepresentation>(result).Id.Should().Be("2392:2016");
        }
    }
}