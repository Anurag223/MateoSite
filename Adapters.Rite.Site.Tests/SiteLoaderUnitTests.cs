#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion


using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Tlm.Fed.Models.Canonical.SiteDomain;
using FluentAssertions;
using Castle.Core.Internal;
using System.Linq;
using Tlm.Fed.Adapters.Rite.Site.Services;
using Tlm.Fed.Framework.Internal;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Testing.Unit;
using SiteLoader = Tlm.Fed.Adapters.Rite.Site.EventHandlers.SiteLoader;
using FizzWare.NBuilder;
using System;
using Tlm.Fed.Framework.Common.Models;
using System.Threading.Tasks;

namespace Tlm.Fed.Adapters.Rite.Site.Tests
{
	[TestClass]
	public class SiteLoaderUnitTests : UnitTestBase
	{
		private MockRepository _mockRepository;
		private Mock<ISiteService> _riteSiteService;
		private Mock<ITransformer<WorkCenterSite>> _riteSiteTransformer;

		[TestInitialize]
		public void TestInitialize()
		{
			_mockRepository = new MockRepository(MockBehavior.Loose);
			_riteSiteService = _mockRepository.Create<ISiteService>();
			_riteSiteTransformer = _mockRepository.Create<ITransformer<WorkCenterSite>>();
		}

		[TestMethod]
		public  void SiteLoader_Should_Have_Sequence_Loading_Strategy()
		{           
			var sut =  CreateSiteLoader();
			HasSequenceSiteLoadStrategy(sut).Should().BeTrue("SiteBasedLoader should have ContextStrategy= SiteLoadStrategy.Sequence");
		}

		[TestMethod]
		public async Task Should_Load_All_Sites()
        {
			//Arrange
			var query = Builder<SiteBasedLoadQuery>.CreateNew().Build();
			var siteList = Builder<WorkCenterSite>.CreateListOfSize(10).Build().ToList();

			_riteSiteService.Setup(x => x.GetSite(It.IsAny<string>(), It.IsAny<DateTime>())).ReturnsAsync(siteList);
			_riteSiteTransformer.Setup(x => x.ConstructCacheLoadInfo(It.IsAny<LoadFromSourceResult<WorkCenterSite>>())).ReturnsAsync(GetCacheLoadInfo);

			//Act
			var siteLoader = CreateSiteLoader();
			var result = await siteLoader.LoadAsync(query);

			//Assert
			result.Should().NotBeNull();
			result.ItemsLoaded.Should().NotBeEmpty();
			result.ItemsLoaded.Count.Should().Be(10);
		}

		private bool HasSequenceSiteLoadStrategy(SiteLoader sut)
		{
			var attribute = sut.GetType().GetAttributes<ContextStrategyAttribute>().FirstOrDefault();
			return attribute != null && attribute.Strategy == ContextStrategy.SiteBySite;
		}

		private SiteLoader CreateSiteLoader()
		{
			return new SiteLoader(_riteSiteService.Object, _riteSiteTransformer.Object);
		}

		private CacheLoadInfo GetCacheLoadInfo()
		{
			var cacheLoadInfo = new CacheLoadInfo();
			cacheLoadInfo.AddItemsLoaded(new string[] { "Test1", "Test2", "Test3", "Test4", "Test5", "Test6", "Test7", "Test8", "Test9", "Test10" });
			return cacheLoadInfo;
		}
	}
}
