#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Linq;
using Castle.Core.Internal;
using FluentAssertions;

using Microsoft.Extensions.Configuration;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

using Tlm.Fed.Adapters.Rite.Common.Configuration;
using Tlm.Fed.Adapters.Rite.Site.EventHandlers;
using Tlm.Fed.Adapters.Rite.Site.Services;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Sdk.Testing.Unit;

namespace Tlm.Fed.Adapters.Rite.Site.Tests.EventHandlers
{
    [TestClass]
    public class SiteLoaderTest : UnitTestBase
    {
        private MockRepository _mockRepository;
        private Mock<ISiteService> _riteSiteService;
        private Mock<ITransformer<WorkCenterSite>> _riteSiteTransformer;

        [TestInitialize]
        public void TestInitialize()
        {
            _mockRepository = new MockRepository(MockBehavior.Loose);
            _riteSiteService = _mockRepository.Create<ISiteService>();
            _riteSiteTransformer = _mockRepository.Create<ITransformer<WorkCenterSite>>();
        }

        [TestMethod]
        public void Instantiate_Component_NoExceptionThrown()
        {
            Assert.IsNotNull(TryInstantiateComponent<SiteLoader, StartupForRiteSiteAdapter, RiteAdapterConfig>(
                additionalConfigurations: builder => builder.AddJsonFile("testsettings.shared.json", false)));
        }
        [TestMethod]
        public void SiteLoader_Should_Have_Sequence_Loading_Strategy()
        {
            var sut = CreateSiteLoader();
            HasSequenceSiteLoadStrategy(sut).Should().BeTrue("SiteBasedLoader should have ContextStrategy= SiteLoadStrategy.Sequence");
        }

        private bool HasSequenceSiteLoadStrategy(SiteLoader sut)
        {
            var attribute = sut.GetType().GetAttributes<ContextStrategyAttribute>().FirstOrDefault();
            return attribute != null && attribute.Strategy == ContextStrategy.SiteBySite;
        }

        private SiteLoader CreateSiteLoader()
        {
            return new SiteLoader(_riteSiteService.Object, _riteSiteTransformer.Object);
        }
    }
}