#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using Castle.Core.Internal;
using MoreLinq;
using Newtonsoft.Json;
using RestSharp;
using Tlm.Fed.Adapters.Rite.Common.Configuration;
using Tlm.Fed.Adapters.Rite.Common.Services.Interfaces;
using Tlm.Fed.Adapters.Rite.Common.Services.ServiceModels.Organization;
using Tlm.Fed.Framework.Common.ServiceClient;

namespace Tlm.Fed.Adapters.Rite.Common.Services.Implementers
{
    public class OrganizationService : IOrganizationService
    {
	    public OrganizationService(RiteEndpointConfig configuration, IHttpService httpService)
        {
            _httpService = httpService;
            _configuration = configuration;
        }

        private readonly IHttpService _httpService;
        private readonly RiteEndpointConfig _configuration;

        public async Task<List<OrganizationDetail>> GetOrganizationDetails(string segment)
        {
            List<OrganizationDetail> retList = null;

            var baseUri = _configuration.BaseUri;
            var orgRequest = new OrganizationRequest { Segment = segment };
            var url = _configuration.BaseUri + "Api/Organization";
            var httpRequestMessage = new HttpRequestMessage(HttpMethod.Post, url);
            httpRequestMessage.Content = new StringContent(JsonConvert.SerializeObject(orgRequest));
            httpRequestMessage.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            var restResponse = await _httpService.ServiceCaller(httpRequestMessage, TimeSpan.FromMilliseconds(RiteAdapterConstants.RiteRequestTimeout));

            if (restResponse.StatusCode == HttpStatusCode.OK)
            {
                var jsonBody = await restResponse.Content.ReadAsStringAsync();
	            var response = JsonConvert.DeserializeObject<OrganizationResponse>(jsonBody);
                retList = response.OrganizationDetails.Where(m=> !string.IsNullOrEmpty(m.FacilitiesID)).ToList();
            }

            return retList;
        }
    }
}