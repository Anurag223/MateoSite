#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using AutoMapper;
using System;
using JetBrains.Annotations;
using Tlm.Fed.Adapters.Rite.Common.Services.ServiceModels.Organization;
using Tlm.Sdk.Core.Models.Infrastructure;
using Tlm.Fed.Models.Canonical;
using Tlm.Fed.Models.Canonical.SiteDomain;
using static Tlm.Sdk.Core.Models.UnmanagedAttributeValue;
using System.Collections.Generic;
using Tlm.Sdk.Core.Models;
using CanonicalSite = Tlm.Fed.Models.Canonical.SiteDomain.Site;

namespace Tlm.Fed.Adapters.Rite.Site
{
    [UsedImplicitly]
	public class OrganizationToWorkCenterSiteMappingProfile : Profile
	{
        private static readonly IKeyGenerator<CanonicalSite> SiteKeyGenerator = new CompositeKeyGenerator<CanonicalSite>();
		DateTime GetModifiedDate(string lastModified)
        {
            return string.IsNullOrWhiteSpace(lastModified) 
                ? default 
                : DateTime.TryParse(lastModified, out var lastDate) ? lastDate : default;
        }

        public OrganizationToWorkCenterSiteMappingProfile()
		{
            CreateMap<OrganizationDetail, WorkCenterSite>()
				 .ForMember(x => x.ActiveCmmsId, opts => opts.MapFrom(src => CmmsId.RITE))
				 .ForMember(x => x.Code, opts => opts.MapFrom(src => new SiteCode(src.AU.HasValue? src.AU.ToString():string.Empty)))
				 .ForMember(x => x.CreatedBy, opts => opts.MapFrom(src => src.LastModifiedBy))
				 .ForMember(x => x.CreatedDate, opts => opts.Ignore())
				 .ForMember(x => x.Description, opts => opts.MapFrom(src => src.LocalDescription))
                 .ForMember(x => x.FacilityId, opts => opts.MapFrom(src => SiteKeyGenerator.ComposeKeyFromParts(((int)CmmsId.RITE).ToString(), src.FacilitiesID)))
				 .ForMember(x => x.FacilityName, opts => opts.MapFrom(src=>src.FacilityName))
				 .ForMember(x=>x.SubGeoMarketCode,opts=>opts.MapFrom(src=>src.SubGeoMarket))
				 .ForMember(x => x.GeoMarketCode, opts => opts.MapFrom(src => src.GeoMarket))
				 .ForMember(x => x.Id, opts => opts.Ignore())
                 .ForMember(x=>x.City, opts => opts.MapFrom(src=>src.City))
				 .ForMember(x => x.Name, opts => opts.MapFrom(src => src.AUDescription))
				 .ForMember(x => x.ModifiedBy, opts => opts.MapFrom(src => src.LastModifiedBy))
				 .ForMember(x => x.ModifiedDate, opts => opts.MapFrom(src => GetModifiedDate(src.LastModified)))
				 .ForMember(x => x.SegmentCode, opts => opts.MapFrom(src => src.Segment))
				 .ForMember(x => x.SubBusinessLines, opts => opts.MapFrom(src =>new List<string>() { src.SubSegment }))
				 .ForMember(x => x.SiteType, opts => opts.Ignore())
                 .ForMember(x => x.UpdateWorkstation, opts => opts.Ignore())
                 .ForMember(x => x.SourceSystemRecordId, opts => opts.MapFrom(src => src.AU))
				 .ForMember(x => x.Attributes, opts => opts.Ignore())
				 .ForMember(x => x.UnmanagedAttributes, opts => opts.Ignore())
                 .ForMember(x => x.AlternateIdentities, opts => opts.Ignore())
                 .ForMember(x => x.Attribute, opts => opts.Ignore())
                 .ForMember(x => x.SubSites, opts => opts.Ignore())
				 .ForMember(x => x.Links, opts => opts.Ignore())
				 .MapSyncDate()
                 .AfterMap((a, e) =>
				 {                    
                     e.UnmanagedAttributes.Add(
                         Cmms.Rite.Code, new Dictionary<string, UnmanagedAttributeValue>
                         {
                             {
                                 CanonicalSiteConstant.Area,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.Area,
                                     a.Area)
                             },
                             {
                                 CanonicalSiteConstant.FacilityStatus,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.FacilityStatus,
                                     a.Status)
                             },
                             {
                                 CanonicalSiteConstant.FacilityDescription,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.FacilityDescription,
                                     a.Description)
                             },
                             {
                                 ToCode(nameof(a.City)),
                                 new UnmanagedAttributeValue(ToCode(nameof(a.City)),
                                     a.City)
                             },
                             {
                                 ToCode(nameof(a.Country)),
                                 new UnmanagedAttributeValue(ToCode(nameof(a.Country)),
                                     a.Country)
                             },
                             {
                                 ToCode(nameof(a.Location)),
                                 new UnmanagedAttributeValue(ToCode(nameof(a.Location)),
                                     a.Location)
                             },
                             {
                                 CanonicalSiteConstant.Longitude,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.Longitude,
                                     a.Longitude)
                             },
                             {
                                 CanonicalSiteConstant.Latitude,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.Latitude,
                                     a.Latitude)
                             },
                             {
                                 CanonicalSiteConstant.Ownership,
                                 new UnmanagedAttributeValue(CanonicalSiteConstant.Ownership,
                                     a.Ownership)
                             }

                         });
				 });
		}
    }
}
