#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using Autofac;
using Tlm.Fed.Adapters.Rite.Common.Services.Implementers;
using Tlm.Fed.Adapters.Rite.Common.Services.Interfaces;
using Tlm.Fed.Adapters.Rite.Site.EventHandlers;
using Tlm.Fed.Adapters.Rite.Site.Services;
using Tlm.Fed.Contexts.Site.Core.Services;
using Tlm.Fed.Framework.Common;
using Tlm.Fed.Framework.Common.ServiceClient;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Framework.Internal.Configurers;
using Tlm.Fed.Models.Canonical.MasterData;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.AspNetCore;
using Tlm.Sdk.Data.Mongo;

namespace Tlm.Fed.Adapters.Rite.Site
{
    public class RiteSiteAdapterConfigurer : AdapterConfigurer
    {
        public override IEnumerable<Type> GetNonReflectedMessageHandlers()
        {
            yield return typeof(LoadCacheCommandHandler<Models.Canonical.SiteDomain.Site>);
        }

        protected override void RegisterAdapter(Startup startup, ContainerBuilder builder)
        {
            builder.RegisterModule(new AutoMapperModule());
            builder.RegisterType<HttpService>().As<IHttpService>();
            builder.RegisterType<OrganizationService>().As<IOrganizationService>().InstancePerDependency();
            builder.RegisterType<SiteLoader>().As<IDataLoader>();
            builder.RegisterType<Transformer<WorkCenterSite>>().As<ITransformer<WorkCenterSite>>();
            builder.RegisterType<SiteService>().As<ISiteService>().SingleInstance();
            builder.RegisterType<SegmentMappingService>().As<ISegmentMappingService>();

            builder.AddRepoSupport<WorkCenterSite>()
                .AddRepoSupport<SegmentMapping>();

            builder.AddRepoSupport<Facility>();
            builder.RegisterType<FacilityMasterDataService>().As<IFacilityMasterDataService>();
            RegisterLoading<Models.Canonical.SiteDomain.Site>(builder);
            RegisterLoading<Models.Canonical.MasterData.Facility>(builder);
        }
    }
}