#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using LinqKit;
using Serilog;
using Tlm.Fed.Adapters.Qtrac.Site.DataAccess;
using Tlm.Fed.Contexts.Site.Core.Services;
using Tlm.Fed.Framework.Common.Models;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models.Infrastructure;

namespace Tlm.Fed.Adapters.Qtrac.Site.EventHandlers
{
    [BulkLoader(CmmsId.QTrac, "Site", ContextStrategy.SiteBySite)]
    [ContextStrategy(ContextStrategy.SiteBySite)]
    public class SiteLoader : IDataLoader<SiteBasedLoadQuery>
    {
        private readonly IDataHandler _dataHandler;
        private readonly ITransformer<WorkCenterSite> _transformer;
        private readonly ILogger Logger;
        private readonly ISegmentMappingService _segmentMappingService;

        public SiteLoader(IDataHandler dataHandler, ITransformer<WorkCenterSite> transformer, ISegmentMappingService segmentMappingService)
        {
            _dataHandler = dataHandler;
            _transformer = transformer;
            _segmentMappingService = segmentMappingService;
            Logger = Log.Logger.ForContext(GetType());
        }

        public async Task<CacheLoadInfo> LoadAsync(SiteBasedLoadQuery query)
        {
            var siteList = new List<WorkCenterSite>();
            var sitesArray = query.CommaSeparatedSiteCodes?.FromCsv();
            if (sitesArray == null) return new CacheLoadInfo();

            var criteria = PredicateBuilder.New<WorkCenterSite>(true);
            var subSiteCriteria = PredicateBuilder.New<WorkCenterSite>(true);

            if (query.HighWaterMark.HasValue)
            {
                criteria = criteria.And(e => e.ModifiedDate > query.HighWaterMark.Value);
                subSiteCriteria = subSiteCriteria.And(e => e.ModifiedDate > query.HighWaterMark.Value);
            }

            siteList.AddRange(await _dataHandler.GetSite(criteria, subSiteCriteria, query.CommaSeparatedSiteCodes));

            if (siteList.Any())
                Logger.Debug($"{siteList.Count} sites found in Cmms");

            await _segmentMappingService.UpdateSegments(siteList);

            var dataOperations = siteList.Select(x => new UpdateDataOperation<WorkCenterSite> { Entity = x }).ToArray();
            var res = new LoadFromSourceResult<WorkCenterSite> { DataOperations = dataOperations.ToArray() };
            var info = await _transformer.ConstructCacheLoadInfo(res).ConfigureAwait(false);

            return info;
        }
    }
}