#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Serilog;
using Tlm.Fed.Adapters.Maximo.Site.Models;
using Tlm.Fed.Contexts.Site.Core.Services;
using Tlm.Fed.Framework.Common.Models;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;

namespace Tlm.Fed.Adapters.Maximo.Site.Concrete
{
    public class MaximoSiteTransformer : IMaximoSiteTransformer
    {
        private readonly ILogger _logger;
        private readonly ISegmentMappingService _segmentMappingService;
        private readonly IMapper _mapper;
        private readonly ITransformer<WorkCenterSite> _transformer;

        public MaximoSiteTransformer(IMapper mapper, ITransformer<WorkCenterSite> transformer, ISegmentMappingService segmentMappingService)
        {
            _mapper = mapper;
            _transformer = transformer;
            _segmentMappingService = segmentMappingService;
            _logger = Log.Logger.ForContext(GetType());
        }

        /// <summary>
        ///     Converts <see cref="MaximoLocation" />> to <see cref="WorkCenterSite" />> and inserts into the
        ///     database.
        /// </summary>
        /// <param name="maximoLocations"> List of all the sites returned by maximo.</param>
        public async Task<CacheLoadInfo> Transform(IList<MaximoLocation> maximoLocations)
        {
            _logger.Information($"Inserting {maximoLocations.Count()} sites into database.");
            var info = new CacheLoadInfo();
            if (!maximoLocations.Any())
                return info;
            var canonicalSiteList = _mapper.Map<WorkCenterSite[]>(maximoLocations.ToArray()).ToList();

            /* commeting for MAximo District to location migration because there wont be subsite 
            var mainSitesList = new List<WorkCenterSite>();
            foreach (var site in canonicalSiteList.ToList())
                // if site code(location in maximo) and source system record id (district in maximo) is same then we consider it to be a site otherwise subsite.
                if (site.Code == site.SourceSystemRecordId)
                {
                    mainSitesList.Add(site);
                    canonicalSiteList.Remove(site);
                }

            // Adding subsites for each site to the main sites list.
            mainSitesList.ForEach(site =>
            {
                site.SubSites = GetSubSites(canonicalSiteList, site);
                _logger.Debug($"For site {site.Code} {site.SubSites?.Count} subsites were found.");
            });
            */
            canonicalSiteList = await _segmentMappingService.UpdateSegments(canonicalSiteList);

            // Updating the database.
            var dataOperations = canonicalSiteList.Select(site => new UpdateDataOperation<WorkCenterSite> { Entity = site }).ToArray();

            var res = new LoadFromSourceResult<WorkCenterSite> { DataOperations = dataOperations.ToArray() };
            var cacheLoadInfo = await _transformer.ConstructCacheLoadInfo(res);

            _logger.Debug($"Site insertion details: {cacheLoadInfo}.");
            _logger.Information("Sites insertion completed.");

            return cacheLoadInfo;
        }

        //commeting for MAximo District to location migration because there wont be subsite

        ///// <summary>
        /////     Filters subsite on basis of site code and source system record id.
        ///// </summary>
        ///// <param name="sitesList"> List of all the sites present in the system.</param>
        ///// <param name="mainSite"> Site for which sub sites are to be returned.</param>
        ///// <returns> list of subsites for the main site.</returns>
        //private ICollection<WorkCenterSite> GetSubSites(List<WorkCenterSite> sitesList, WorkCenterSite mainSite)
        //{
        //    var subsites = (from site in sitesList
        //            select site)
        //        .Where(x => x.Code == mainSite.Code && x.SourceSystemRecordId != mainSite.SourceSystemRecordId)
        //        .ToList();
        //    return subsites;
        //}
    }
}