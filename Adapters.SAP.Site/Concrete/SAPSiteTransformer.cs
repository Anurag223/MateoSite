#region Header

// Schlumberger Private
// Copyright 2020 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using Serilog;
using Tlm.Fed.Adapters.SAP.Site.Models;
using Tlm.Fed.Framework.Common.Models;
using Tlm.Fed.Framework.Internal;
using Tlm.Fed.Models.Canonical.SiteDomain;

namespace Tlm.Fed.Adapters.SAP.Site.Concrete
{
    public class SAPSiteTransformer : ISAPSiteTransformer
    {
        private readonly ILogger _logger;
        private readonly IMapper _mapper;
        private readonly ITransformer<WorkCenterSite> _transformer;

        public SAPSiteTransformer(IMapper mapper, ITransformer<WorkCenterSite> transformer)
        {
            _mapper = mapper;
            _transformer = transformer;
            _logger = Log.Logger.ForContext(GetType());
        }

        /// <summary>
        ///     Converts <see cref="SAPSite" />> to <see cref="WorkCenterSite" />> and inserts into the
        ///     database.
        /// </summary>
        /// <param name="SAPSites"> List of all the sites returned by sap.</param>
        public async Task<CacheLoadInfo> Transform(IList<SAPSite> SAPSites)
        {
            _logger.Information($"Inserting {SAPSites.Count()} sites into database.");
            var info = new CacheLoadInfo();
            if (!SAPSites.Any())
                return info;
            var canonicalSiteList = _mapper.Map<WorkCenterSite[]>(SAPSites.ToArray()).ToList();

            // Updating the database.
            var dataOperations = canonicalSiteList.Select(site =>
                new UpdateDataOperation<WorkCenterSite> { Entity = site }).ToArray();

            var res = new LoadFromSourceResult<WorkCenterSite> { DataOperations = dataOperations.ToArray() };
            var cacheLoadInfo = await _transformer.ConstructCacheLoadInfo(res);

            _logger.Debug($"Site insertion details: {cacheLoadInfo}.");
            _logger.Information("Sites insertion completed.");

            return cacheLoadInfo;
        }
    }
}