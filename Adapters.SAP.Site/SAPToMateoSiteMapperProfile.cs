#region Header

// Schlumberger Private
// Copyright 2018 Schlumberger.  All rights reserved in Schlumberger
// authored and generated code (including the selection and arrangement of
// the source code base regardless of the authorship of individual files),
// but not including any copyright interest(s) owned by a third party
// related to source code or object code authored or generated by
// non-Schlumberger personnel.
// This source code includes Schlumberger confidential and/or proprietary
// information and may include Schlumberger trade secrets. Any use,
// disclosure and/or reproduction is prohibited unless authorized in
// writing.

#endregion

using AutoMapper;
using System;
using System.Collections.Generic;
using Tlm.Fed.Adapters.SAP.Site.Models;
using Tlm.Fed.Contexts.Common.Services;
using Tlm.Fed.Models.Canonical;
using Tlm.Fed.Models.Canonical.SiteDomain;
using Tlm.Sdk.Core;
using Tlm.Sdk.Core.Models.Infrastructure;

namespace Tlm.Fed.Adapters.SAP.Site
{
    public class SAPToMateoSiteMapperProfile : Profile
    {

        public SAPToMateoSiteMapperProfile(IMasterDataSiteTypeMappingService masterDataSiteTypeMappingService)
        {
            CreateMap<SAPSite, WorkCenterSite>()
                .ForMember(x => x.Description, opts => opts.Ignore())
                .ForMember(x => x.Name, opts => opts.MapFrom(src => src.Name1.Sanitize()))
                .ForMember(x => x.FacilityId, opts => opts.Ignore())
                .ForMember(x => x.FacilityName, opts => opts.Ignore())
                .ForMember(x => x.SubGeoMarketCode, opts => opts.Ignore())
                .ForMember(x => x.SiteType, opts => opts.MapFrom(src => masterDataSiteTypeMappingService.GetSiteTypeMappingName("0000",CmmsId.SAP)))
                .ForMember(x => x.SegmentCode, opts => opts.MapFrom(src => "ALS"))
                .ForMember(x => x.Code, opts => opts.MapFrom(src => src.Plant.Sanitize()))
                .ForMember(x => x.City, opts => opts.MapFrom(src => src.City.Sanitize()))
                .ForMember(x => x.Country, opts => opts.Ignore())
                .ForMember(x => x.CountryCode, opts => opts.MapFrom(src => src.CountryKey.Sanitize()))
                .ForMember(x => x.SyncDate, opts => opts.MapFrom(src => DateTime.UtcNow))
                .ForMember(x => x.CreatedDate, opts => opts.MapFrom(src => DateTime.UtcNow))
                .ForMember(x => x.ActiveCmmsId, opts => opts.MapFrom(src => CmmsId.SAP))
                .ForMember(x => x.SourceSystemRecordId, opts => opts.MapFrom(src => src.Plant.Sanitize()))
                .ForMember(x => x.SubBusinessLines, opts => opts.MapFrom(src => new List<string>() { "HPS", "RTAL", "PCP", "ASNS", "SRP", "TALS", "ESP", "AGL"}))
                .ForMember(x => x.GeoMarketCode, opts => opts.Ignore())
                .ForMember(x => x.SubSites, opts => opts.MapFrom(src => src.SAPWorkCenters))
                .ForMember(x => x.UpdateWorkstation, opts => opts.Ignore())
                .ForMember(x => x.CreatedBy, opts => opts.Ignore())
                .ForMember(x => x.CreatedDate, opts => opts.Ignore())
                .ForMember(x => x.Id, opts => opts.Ignore())
                .ForMember(x => x.ModifiedBy, opts => opts.Ignore())
                .ForMember(x => x.ModifiedDate, opts => opts.Ignore())
                .ForMember(x => x.Links, opts => opts.Ignore())
                .MapSyncDate()
                .ForMember(x => x.Attributes, opts => opts.Ignore())
                .ForMember(x => x.Attribute, opts => opts.Ignore())
                .ForMember(x => x.AlternateIdentities, opts => opts.Ignore())
                .ForMember(x => x.UnmanagedAttributes, opts => opts.Ignore())
                .ForMember(x => x.Links, opts => opts.Ignore())
                .ForAllOtherMembers(opts => opts.UseDestinationValue());

            CreateMap<SAPWorkCenter, WorkCenterSite>()
               .ForMember(x => x.Name, opts => opts.MapFrom(src => src.Name.Sanitize()))
               .ForMember(x => x.SiteType, opts => opts.MapFrom(src => masterDataSiteTypeMappingService.GetSiteTypeMappingName(src.Category.Sanitize(), CmmsId.SAP)))
               .ForMember(x => x.Description, opts => opts.MapFrom(src => masterDataSiteTypeMappingService.GetSiteTypeMappingDescription(src.Category.Sanitize(), CmmsId.SAP)))
               .ForMember(x => x.ActiveCmmsId, opts => opts.MapFrom(src => CmmsId.SAP))
               .ForAllOtherMembers(opts => opts.Ignore());
        }
    }
}